
program_ass2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b1c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005078  08005078  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005078  08005078  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005078  08005078  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  2000006c  080050ec  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  080050ec  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d40c  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ed  00000000  00000000  0002d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0002f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a73  00000000  00000000  00030748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b325  00000000  00000000  000311bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b53  00000000  00000000  0004c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ab2c  00000000  00000000  0005d033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000428c  00000000  00000000  000f7b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000fbdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004ce8 	.word	0x08004ce8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000070 	.word	0x20000070
 8000220:	08004ce8 	.word	0x08004ce8

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000238:	4b46      	ldr	r3, [pc, #280]	; (8000354 <MX_GPIO_Init+0x130>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a45      	ldr	r2, [pc, #276]	; (8000354 <MX_GPIO_Init+0x130>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b43      	ldr	r3, [pc, #268]	; (8000354 <MX_GPIO_Init+0x130>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0320 	and.w	r3, r3, #32
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b40      	ldr	r3, [pc, #256]	; (8000354 <MX_GPIO_Init+0x130>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a3f      	ldr	r2, [pc, #252]	; (8000354 <MX_GPIO_Init+0x130>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b3d      	ldr	r3, [pc, #244]	; (8000354 <MX_GPIO_Init+0x130>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b3a      	ldr	r3, [pc, #232]	; (8000354 <MX_GPIO_Init+0x130>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a39      	ldr	r2, [pc, #228]	; (8000354 <MX_GPIO_Init+0x130>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b37      	ldr	r3, [pc, #220]	; (8000354 <MX_GPIO_Init+0x130>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	4834      	ldr	r0, [pc, #208]	; (8000358 <MX_GPIO_Init+0x134>)
 8000288:	f001 fb23 	bl	80018d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2104      	movs	r1, #4
 8000290:	4832      	ldr	r0, [pc, #200]	; (800035c <MX_GPIO_Init+0x138>)
 8000292:	f001 fb1e 	bl	80018d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8000296:	2301      	movs	r3, #1
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800029a:	4b31      	ldr	r3, [pc, #196]	; (8000360 <MX_GPIO_Init+0x13c>)
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	4619      	mov	r1, r3
 80002a8:	482b      	ldr	r0, [pc, #172]	; (8000358 <MX_GPIO_Init+0x134>)
 80002aa:	f001 f967 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80002ae:	2320      	movs	r3, #32
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002b2:	4b2b      	ldr	r3, [pc, #172]	; (8000360 <MX_GPIO_Init+0x13c>)
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	4619      	mov	r1, r3
 80002c0:	4828      	ldr	r0, [pc, #160]	; (8000364 <MX_GPIO_Init+0x140>)
 80002c2:	f001 f95b 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80002c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2302      	movs	r3, #2
 80002d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	481e      	ldr	r0, [pc, #120]	; (8000358 <MX_GPIO_Init+0x134>)
 80002e0:	f001 f94c 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ea:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <MX_GPIO_Init+0x13c>)
 80002ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ee:	2301      	movs	r3, #1
 80002f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	4619      	mov	r1, r3
 80002f8:	4817      	ldr	r0, [pc, #92]	; (8000358 <MX_GPIO_Init+0x134>)
 80002fa:	f001 f93f 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80002fe:	2304      	movs	r3, #4
 8000300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2302      	movs	r3, #2
 800030c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	4619      	mov	r1, r3
 8000314:	4811      	ldr	r0, [pc, #68]	; (800035c <MX_GPIO_Init+0x138>)
 8000316:	f001 f931 	bl	800157c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2101      	movs	r1, #1
 800031e:	2006      	movs	r0, #6
 8000320:	f000 ffb3 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000324:	2006      	movs	r0, #6
 8000326:	f000 ffcc 	bl	80012c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800032a:	2201      	movs	r2, #1
 800032c:	2101      	movs	r1, #1
 800032e:	2017      	movs	r0, #23
 8000330:	f000 ffab 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000334:	2017      	movs	r0, #23
 8000336:	f000 ffc4 	bl	80012c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800033a:	2202      	movs	r2, #2
 800033c:	2101      	movs	r1, #1
 800033e:	2028      	movs	r0, #40	; 0x28
 8000340:	f000 ffa3 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000344:	2028      	movs	r0, #40	; 0x28
 8000346:	f000 ffbc 	bl	80012c2 <HAL_NVIC_EnableIRQ>

}
 800034a:	bf00      	nop
 800034c:	3720      	adds	r7, #32
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40010800 	.word	0x40010800
 800035c:	40011400 	.word	0x40011400
 8000360:	10110000 	.word	0x10110000
 8000364:	40011000 	.word	0x40011000

08000368 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_IWDG_Init+0x2c>)
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <MX_IWDG_Init+0x30>)
 8000370:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_IWDG_Init+0x2c>)
 8000374:	2204      	movs	r2, #4
 8000376:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1875;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_IWDG_Init+0x2c>)
 800037a:	f240 7253 	movw	r2, #1875	; 0x753
 800037e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_IWDG_Init+0x2c>)
 8000382:	f001 faef 	bl	8001964 <HAL_IWDG_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800038c:	f000 f885 	bl	800049a <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000088 	.word	0x20000088
 8000398:	40003000 	.word	0x40003000

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f000 fe16 	bl	8000fd0 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_GPIO_Init();
 80003a4:	f7ff ff3e 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003a8:	f000 fd6e 	bl	8000e88 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80003ac:	f7ff ffdc 	bl	8000368 <MX_IWDG_Init>
  MX_TIM3_Init();
 80003b0:	f000 fcf6 	bl	8000da0 <MX_TIM3_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b4:	f000 f82a 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b8:	f7ff ff34 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003bc:	f000 fd64 	bl	8000e88 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80003c0:	f7ff ffd2 	bl	8000368 <MX_IWDG_Init>
  MX_TIM3_Init();
 80003c4:	f000 fcec 	bl	8000da0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  srand((unsigned)time(NULL));
 80003c8:	2000      	movs	r0, #0
 80003ca:	f003 fbbb 	bl	8003b44 <time>
 80003ce:	4602      	mov	r2, r0
 80003d0:	460b      	mov	r3, r1
 80003d2:	4613      	mov	r3, r2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 fa09 	bl	80037ec <srand>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	4907      	ldr	r1, [pc, #28]	; (80003fc <main+0x60>)
 80003de:	4808      	ldr	r0, [pc, #32]	; (8000400 <main+0x64>)
 80003e0:	f002 fc27 	bl	8002c32 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, (uint8_t *)"Press KEY0 to start\r\n", 21, HAL_MAX_DELAY);
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003e8:	2215      	movs	r2, #21
 80003ea:	4906      	ldr	r1, [pc, #24]	; (8000404 <main+0x68>)
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <main+0x64>)
 80003ee:	f002 fb9d 	bl	8002b2c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_IWDG_Refresh(&hiwdg);
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <main+0x6c>)
 80003f4:	f001 faf8 	bl	80019e8 <HAL_IWDG_Refresh>
 80003f8:	e7fb      	b.n	80003f2 <main+0x56>
 80003fa:	bf00      	nop
 80003fc:	20000094 	.word	0x20000094
 8000400:	20000528 	.word	0x20000528
 8000404:	08004d00 	.word	0x08004d00
 8000408:	20000088 	.word	0x20000088

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b090      	sub	sp, #64	; 0x40
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	2228      	movs	r2, #40	; 0x28
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f003 fb8a 	bl	8003b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800042e:	2309      	movs	r3, #9
 8000430:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043c:	2301      	movs	r3, #1
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000440:	2301      	movs	r3, #1
 8000442:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000444:	2302      	movs	r3, #2
 8000446:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000452:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	f107 0318 	add.w	r3, r7, #24
 8000458:	4618      	mov	r0, r3
 800045a:	f001 fad5 	bl	8001a08 <HAL_RCC_OscConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000464:	f000 f819 	bl	800049a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	230f      	movs	r3, #15
 800046a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2302      	movs	r3, #2
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fd42 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800048e:	f000 f804 	bl	800049a <Error_Handler>
  }
}
 8000492:	bf00      	nop
 8000494:	3740      	adds	r7, #64	; 0x40
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049e:	b672      	cpsid	i
}
 80004a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <Error_Handler+0x8>

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <HAL_MspInit+0x60>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <HAL_MspInit+0x60>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <HAL_MspInit+0x60>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <HAL_MspInit+0x60>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <HAL_MspInit+0x60>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <HAL_MspInit+0x60>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80004da:	2005      	movs	r0, #5
 80004dc:	f000 feca 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x64>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_MspInit+0x64>)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000552:	f000 fd83 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}

0800055a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 800055e:	2001      	movs	r0, #1
 8000560:	f001 f9e8 	bl	8001934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 800056c:	2020      	movs	r0, #32
 800056e:	f001 f9e1 	bl	8001934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <TIM3_IRQHandler+0x10>)
 800057e:	f001 ff03 	bl	8002388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200004e0 	.word	0x200004e0

0800058c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <USART1_IRQHandler+0x18>)
 8000592:	f002 fb73 	bl	8002c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	4903      	ldr	r1, [pc, #12]	; (80005a8 <USART1_IRQHandler+0x1c>)
 800059a:	4802      	ldr	r0, [pc, #8]	; (80005a4 <USART1_IRQHandler+0x18>)
 800059c:	f002 fb49 	bl	8002c32 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000528 	.word	0x20000528
 80005a8:	20000094 	.word	0x20000094

080005ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80005b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005b4:	f001 f9be 	bl	8001934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <blink_LED0>:
int finish_blink = 0;
static int rightAns = 0;
int delay = 500;
static int Time = 0;

void blink_LED0(int delay_time){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80005c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <blink_LED0+0x40>)
 80005ca:	f001 f99a 	bl	8001902 <HAL_GPIO_TogglePin>
	HAL_Delay(delay_time);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fd5f 	bl	8001094 <HAL_Delay>
	finish_blink = 0;
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <blink_LED0+0x44>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <blink_LED0+0x40>)
 80005e2:	f001 f98e 	bl	8001902 <HAL_GPIO_TogglePin>
	HAL_Delay(delay_time);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fd53 	bl	8001094 <HAL_Delay>
	finish_blink = 1;
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <blink_LED0+0x44>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40010800 	.word	0x40010800
 8000600:	200000cc 	.word	0x200000cc

08000604 <blink_LED1>:
void blink_LED1(int delay_time){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800060c:	2104      	movs	r1, #4
 800060e:	480c      	ldr	r0, [pc, #48]	; (8000640 <blink_LED1+0x3c>)
 8000610:	f001 f977 	bl	8001902 <HAL_GPIO_TogglePin>
	HAL_Delay(delay_time);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fd3c 	bl	8001094 <HAL_Delay>
	finish_blink = 0;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <blink_LED1+0x40>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000622:	2104      	movs	r1, #4
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <blink_LED1+0x3c>)
 8000626:	f001 f96c 	bl	8001902 <HAL_GPIO_TogglePin>
	HAL_Delay(delay_time);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fd31 	bl	8001094 <HAL_Delay>
	finish_blink = 1;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <blink_LED1+0x40>)
 8000634:	2201      	movs	r2, #1
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40011400 	.word	0x40011400
 8000644:	200000cc 	.word	0x200000cc

08000648 <HAL_GPIO_EXTI_Callback>:

int generateQuestion();

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8000652:	2064      	movs	r0, #100	; 0x64
 8000654:	f000 fd1e 	bl	8001094 <HAL_Delay>
	switch (GPIO_Pin){
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d01b      	beq.n	8000696 <HAL_GPIO_EXTI_Callback+0x4e>
 800065e:	2b20      	cmp	r3, #32
 8000660:	d127      	bne.n	80006b2 <HAL_GPIO_EXTI_Callback+0x6a>
	case KEY0_Pin:
		if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){ // reset the game
 8000662:	2120      	movs	r1, #32
 8000664:	4815      	ldr	r0, [pc, #84]	; (80006bc <HAL_GPIO_EXTI_Callback+0x74>)
 8000666:	f001 f91d 	bl	80018a4 <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d11d      	bne.n	80006ac <HAL_GPIO_EXTI_Callback+0x64>
			numAccept = 0;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
			//HAL_NVIC_SystemReset();
			HAL_UART_Transmit(&huart1, (uint8_t *)"Game start!\r\n", 13, HAL_MAX_DELAY);
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067a:	220d      	movs	r2, #13
 800067c:	4911      	ldr	r1, [pc, #68]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800067e:	4812      	ldr	r0, [pc, #72]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000680:	f002 fa54 	bl	8002b2c <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim3);
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <HAL_GPIO_EXTI_Callback+0x84>)
 8000686:	f001 fe1f 	bl	80022c8 <HAL_TIM_Base_Start_IT>
			rightAns = generateQuestion();
 800068a:	f000 f827 	bl	80006dc <generateQuestion>
 800068e:	4603      	mov	r3, r0
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000692:	6013      	str	r3, [r2, #0]
		}
		break;
 8000694:	e00a      	b.n	80006ac <HAL_GPIO_EXTI_Callback+0x64>
	case KEY_WK_Pin:
		if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET){
 8000696:	2101      	movs	r1, #1
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800069a:	f001 f903 	bl	80018a4 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d105      	bne.n	80006b0 <HAL_GPIO_EXTI_Callback+0x68>
			HAL_IWDG_Refresh(&hiwdg);
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x90>)
 80006a6:	f001 f99f 	bl	80019e8 <HAL_IWDG_Refresh>
		}
		break;
 80006aa:	e001      	b.n	80006b0 <HAL_GPIO_EXTI_Callback+0x68>
		break;
 80006ac:	bf00      	nop
 80006ae:	e000      	b.n	80006b2 <HAL_GPIO_EXTI_Callback+0x6a>
		break;
 80006b0:	bf00      	nop
	}
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40011000 	.word	0x40011000
 80006c0:	200000c8 	.word	0x200000c8
 80006c4:	08004d18 	.word	0x08004d18
 80006c8:	20000528 	.word	0x20000528
 80006cc:	200004e0 	.word	0x200004e0
 80006d0:	200000d0 	.word	0x200000d0
 80006d4:	40010800 	.word	0x40010800
 80006d8:	20000088 	.word	0x20000088

080006dc <generateQuestion>:

int generateQuestion(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80006e2:	af02      	add	r7, sp, #8
	unsigned char exp[1024] = {0};
 80006e4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80006e8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	3304      	adds	r3, #4
 80006f2:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fa1b 	bl	8003b34 <memset>
	int numa = 0, numb = 0, ope = 0, ans = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	int expLen = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	while (ans <= 0 || ans > 100){
 800071c:	e0c7      	b.n	80008ae <generateQuestion+0x1d2>
		numa = rand() % 100;
 800071e:	f003 f893 	bl	8003848 <rand>
 8000722:	4603      	mov	r3, r0
 8000724:	4a6f      	ldr	r2, [pc, #444]	; (80008e4 <generateQuestion+0x208>)
 8000726:	fb82 1203 	smull	r1, r2, r2, r3
 800072a:	1151      	asrs	r1, r2, #5
 800072c:	17da      	asrs	r2, r3, #31
 800072e:	1a8a      	subs	r2, r1, r2
 8000730:	2164      	movs	r1, #100	; 0x64
 8000732:	fb01 f202 	mul.w	r2, r1, r2
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
		numb = rand() % 100;
 800073c:	f003 f884 	bl	8003848 <rand>
 8000740:	4603      	mov	r3, r0
 8000742:	4a68      	ldr	r2, [pc, #416]	; (80008e4 <generateQuestion+0x208>)
 8000744:	fb82 1203 	smull	r1, r2, r2, r3
 8000748:	1151      	asrs	r1, r2, #5
 800074a:	17da      	asrs	r2, r3, #31
 800074c:	1a8a      	subs	r2, r1, r2
 800074e:	2164      	movs	r1, #100	; 0x64
 8000750:	fb01 f202 	mul.w	r2, r1, r2
 8000754:	1a9b      	subs	r3, r3, r2
 8000756:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
		ope = rand() % 4;
 800075a:	f003 f875 	bl	8003848 <rand>
 800075e:	4603      	mov	r3, r0
 8000760:	425a      	negs	r2, r3
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	f002 0203 	and.w	r2, r2, #3
 800076a:	bf58      	it	pl
 800076c:	4253      	negpl	r3, r2
 800076e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		switch (ope){
 8000772:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000776:	2b03      	cmp	r3, #3
 8000778:	f200 8098 	bhi.w	80008ac <generateQuestion+0x1d0>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <generateQuestion+0xa8>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	08000795 	.word	0x08000795
 8000788:	080007bf 	.word	0x080007bf
 800078c:	080007e9 	.word	0x080007e9
 8000790:	08000855 	.word	0x08000855
		case 0: // add
			ans = numa + numb;
 8000794:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000798:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800079c:	4413      	add	r3, r2
 800079e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
			expLen = snprintf((char *)exp, sizeof(exp), "%d + %d = ?\r\n", numa, numb);
 80007a2:	1d38      	adds	r0, r7, #4
 80007a4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80007ae:	4a4e      	ldr	r2, [pc, #312]	; (80008e8 <generateQuestion+0x20c>)
 80007b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b4:	f002 ffe6 	bl	8003784 <sniprintf>
 80007b8:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
			break;
 80007bc:	e077      	b.n	80008ae <generateQuestion+0x1d2>
		case 1: // sub
			ans = numa - numb;
 80007be:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 80007c2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
			expLen = snprintf((char *)exp, sizeof(exp), "%d - %d = ?\r\n", numa, numb);
 80007cc:	1d38      	adds	r0, r7, #4
 80007ce:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80007d8:	4a44      	ldr	r2, [pc, #272]	; (80008ec <generateQuestion+0x210>)
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	f002 ffd1 	bl	8003784 <sniprintf>
 80007e2:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
			break;
 80007e6:	e062      	b.n	80008ae <generateQuestion+0x1d2>
		case 2: // mul
			numa = rand()%10;
 80007e8:	f003 f82e 	bl	8003848 <rand>
 80007ec:	4602      	mov	r2, r0
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <generateQuestion+0x214>)
 80007f0:	fb83 1302 	smull	r1, r3, r3, r2
 80007f4:	1099      	asrs	r1, r3, #2
 80007f6:	17d3      	asrs	r3, r2, #31
 80007f8:	1ac9      	subs	r1, r1, r3
 80007fa:	460b      	mov	r3, r1
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
			numb = rand()%10;
 8000808:	f003 f81e 	bl	8003848 <rand>
 800080c:	4602      	mov	r2, r0
 800080e:	4b38      	ldr	r3, [pc, #224]	; (80008f0 <generateQuestion+0x214>)
 8000810:	fb83 1302 	smull	r1, r3, r3, r2
 8000814:	1099      	asrs	r1, r3, #2
 8000816:	17d3      	asrs	r3, r2, #31
 8000818:	1ac9      	subs	r1, r1, r3
 800081a:	460b      	mov	r3, r1
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
			ans = numa * numb;
 8000828:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800082c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
			expLen = snprintf((char *)exp, sizeof(exp), "%d * %d = ?\r\n", numa, numb);
 8000838:	1d38      	adds	r0, r7, #4
 800083a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000844:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <generateQuestion+0x218>)
 8000846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084a:	f002 ff9b 	bl	8003784 <sniprintf>
 800084e:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
			break;
 8000852:	e02c      	b.n	80008ae <generateQuestion+0x1d2>
		case 3: // div
			numb = rand()%15;
 8000854:	f002 fff8 	bl	8003848 <rand>
 8000858:	4602      	mov	r2, r0
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <generateQuestion+0x21c>)
 800085c:	fb83 1302 	smull	r1, r3, r3, r2
 8000860:	4413      	add	r3, r2
 8000862:	10d9      	asrs	r1, r3, #3
 8000864:	17d3      	asrs	r3, r2, #31
 8000866:	1ac9      	subs	r1, r1, r3
 8000868:	460b      	mov	r3, r1
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	1a5b      	subs	r3, r3, r1
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
			ans = (numb != 0) ? (numa / numb) : 0;
 8000874:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000878:	2b00      	cmp	r3, #0
 800087a:	d006      	beq.n	800088a <generateQuestion+0x1ae>
 800087c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000880:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000884:	fb92 f3f3 	sdiv	r3, r2, r3
 8000888:	e000      	b.n	800088c <generateQuestion+0x1b0>
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
			expLen = snprintf((char *)exp, sizeof(exp), "%d / %d = ?\r\n", numa, numb);
 8000890:	1d38      	adds	r0, r7, #4
 8000892:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800089c:	4a17      	ldr	r2, [pc, #92]	; (80008fc <generateQuestion+0x220>)
 800089e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a2:	f002 ff6f 	bl	8003784 <sniprintf>
 80008a6:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
			break;
 80008aa:	e000      	b.n	80008ae <generateQuestion+0x1d2>
		default:
			break;
 80008ac:	bf00      	nop
	while (ans <= 0 || ans > 100){
 80008ae:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f77f af33 	ble.w	800071e <generateQuestion+0x42>
 80008b8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80008bc:	2b64      	cmp	r3, #100	; 0x64
 80008be:	f73f af2e 	bgt.w	800071e <generateQuestion+0x42>
		}
	}
	HAL_UART_Transmit(&huart1, exp, expLen, HAL_MAX_DELAY);
 80008c2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	1d39      	adds	r1, r7, #4
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <generateQuestion+0x224>)
 80008d0:	f002 f92c 	bl	8002b2c <HAL_UART_Transmit>
	return ans;
 80008d4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
}
 80008d8:	4618      	mov	r0, r3
 80008da:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	51eb851f 	.word	0x51eb851f
 80008e8:	08004d28 	.word	0x08004d28
 80008ec:	08004d38 	.word	0x08004d38
 80008f0:	66666667 	.word	0x66666667
 80008f4:	08004d48 	.word	0x08004d48
 80008f8:	88888889 	.word	0x88888889
 80008fc:	08004d58 	.word	0x08004d58
 8000900:	20000528 	.word	0x20000528

08000904 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000904:	b580      	push	{r7, lr}
 8000906:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800090a:	af00      	add	r7, sp, #0
 800090c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000910:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000914:	6018      	str	r0, [r3, #0]
	if (numAccept == 5 || Time >= 60){
 8000916:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b05      	cmp	r3, #5
 800091c:	d003      	beq.n	8000926 <HAL_TIM_PeriodElapsedCallback+0x22>
 800091e:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b3b      	cmp	r3, #59	; 0x3b
 8000924:	dd06      	ble.n	8000934 <HAL_TIM_PeriodElapsedCallback+0x30>
		Time = 0;
 8000926:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);
 800092c:	483b      	ldr	r0, [pc, #236]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800092e:	f001 f85b 	bl	80019e8 <HAL_IWDG_Refresh>
		return;
 8000932:	e06b      	b.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x108>
	}
	Time++;
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a37      	ldr	r2, [pc, #220]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800093c:	6013      	str	r3, [r2, #0]
	if (Time < 50){
 800093e:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b31      	cmp	r3, #49	; 0x31
 8000944:	dc02      	bgt.n	800094c <HAL_TIM_PeriodElapsedCallback+0x48>
		HAL_IWDG_Refresh(&hiwdg);
 8000946:	4835      	ldr	r0, [pc, #212]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000948:	f001 f84e 	bl	80019e8 <HAL_IWDG_Refresh>
	}
	if (Time >= 50 && Time < 60 && numAccept < 5){
 800094c:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b31      	cmp	r3, #49	; 0x31
 8000952:	dd2f      	ble.n	80009b4 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8000954:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b3b      	cmp	r3, #59	; 0x3b
 800095a:	dc2b      	bgt.n	80009b4 <HAL_TIM_PeriodElapsedCallback+0xb0>
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b04      	cmp	r3, #4
 8000962:	dc27      	bgt.n	80009b4 <HAL_TIM_PeriodElapsedCallback+0xb0>
		unsigned char info[1024] = {0};
 8000964:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000968:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	3304      	adds	r3, #4
 8000972:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f003 f8db 	bl	8003b34 <memset>
		int infoLen = snprintf((char *)info, sizeof(info), "[Warning] %d seconds left!\r\n", 60 - Time);
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000986:	f107 0008 	add.w	r0, r7, #8
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800098c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000990:	f002 fef8 	bl	8003784 <sniprintf>
 8000994:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
		HAL_UART_Transmit(&huart1, info, infoLen, HAL_MAX_DELAY);
 8000998:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800099c:	b29a      	uxth	r2, r3
 800099e:	f107 0108 	add.w	r1, r7, #8
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009a6:	481f      	ldr	r0, [pc, #124]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80009a8:	f002 f8c0 	bl	8002b2c <HAL_UART_Transmit>
		HAL_IWDG_Refresh(&hiwdg);
 80009ac:	481b      	ldr	r0, [pc, #108]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80009ae:	f001 f81b 	bl	80019e8 <HAL_IWDG_Refresh>
	if (Time >= 50 && Time < 60 && numAccept < 5){
 80009b2:	e02b      	b.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x108>
	}
	else if (Time == 60 && numAccept < 5){
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b3c      	cmp	r3, #60	; 0x3c
 80009ba:	d127      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x108>
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	dc23      	bgt.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x108>
		unsigned char info[1024] = {0};
 80009c4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80009c8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	3304      	adds	r3, #4
 80009d2:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 f8ab 	bl	8003b34 <memset>
		int infoLen = snprintf((char *)info, sizeof(info), "[INFO]Time out. Game over. Please press KEY0 to try again.\r\n");
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80009e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fecb 	bl	8003784 <sniprintf>
 80009ee:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		HAL_UART_Transmit(&huart1, info, infoLen, HAL_MAX_DELAY);
 80009f2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f107 0108 	add.w	r1, r7, #8
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000a02:	f002 f893 	bl	8002b2c <HAL_UART_Transmit>
		HAL_IWDG_Refresh(&hiwdg);
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000a08:	f000 ffee 	bl	80019e8 <HAL_IWDG_Refresh>
	}
}
 8000a0c:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000c8 	.word	0x200000c8
 8000a18:	200000d4 	.word	0x200000d4
 8000a1c:	20000088 	.word	0x20000088
 8000a20:	08004d68 	.word	0x08004d68
 8000a24:	20000528 	.word	0x20000528
 8000a28:	08004d88 	.word	0x08004d88

08000a2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000a38:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000a3c:	6018      	str	r0, [r3, #0]
	if (numAccept == 5) return;
 8000a3e:	4b67      	ldr	r3, [pc, #412]	; (8000bdc <HAL_UART_RxCpltCallback+0x1b0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b05      	cmp	r3, #5
 8000a44:	f000 80c5 	beq.w	8000bd2 <HAL_UART_RxCpltCallback+0x1a6>
	unsigned char info[1024] = {0};
 8000a48:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000a4c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	3304      	adds	r3, #4
 8000a56:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 f869 	bl	8003b34 <memset>
	if (huart->Instance == USART1){
 8000a62:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000a66:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a5c      	ldr	r2, [pc, #368]	; (8000be0 <HAL_UART_RxCpltCallback+0x1b4>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	f040 80af 	bne.w	8000bd4 <HAL_UART_RxCpltCallback+0x1a8>
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if (rxBuffer[0] == '\n' || rxBuffer[0] == '\r'){ // user ends input
 8000a76:	4b5b      	ldr	r3, [pc, #364]	; (8000be4 <HAL_UART_RxCpltCallback+0x1b8>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b0a      	cmp	r3, #10
 8000a7c:	d004      	beq.n	8000a88 <HAL_UART_RxCpltCallback+0x5c>
 8000a7e:	4b59      	ldr	r3, [pc, #356]	; (8000be4 <HAL_UART_RxCpltCallback+0x1b8>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b0d      	cmp	r3, #13
 8000a84:	f040 8099 	bne.w	8000bba <HAL_UART_RxCpltCallback+0x18e>
			uLength = 0;
 8000a88:	4b57      	ldr	r3, [pc, #348]	; (8000be8 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
			int userAns = atoi((char *)uRx_Data);
 8000a8e:	4857      	ldr	r0, [pc, #348]	; (8000bec <HAL_UART_RxCpltCallback+0x1c0>)
 8000a90:	f002 fe74 	bl	800377c <atoi>
 8000a94:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
			int infoLen = snprintf((char *)info, sizeof(info), "Your input data is %d.\r\n", userAns);
 8000a98:	f107 000c 	add.w	r0, r7, #12
 8000a9c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000aa0:	4a53      	ldr	r2, [pc, #332]	; (8000bf0 <HAL_UART_RxCpltCallback+0x1c4>)
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	f002 fe6d 	bl	8003784 <sniprintf>
 8000aaa:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
			HAL_UART_Transmit(&huart1, info, infoLen, HAL_MAX_DELAY);
 8000aae:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f107 010c 	add.w	r1, r7, #12
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000abc:	484d      	ldr	r0, [pc, #308]	; (8000bf4 <HAL_UART_RxCpltCallback+0x1c8>)
 8000abe:	f002 f835 	bl	8002b2c <HAL_UART_Transmit>
			infoLen = snprintf((char *)info, sizeof(info), "Right answer is %d.\r\n", rightAns);
 8000ac2:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <HAL_UART_RxCpltCallback+0x1cc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f107 000c 	add.w	r0, r7, #12
 8000aca:	4a4c      	ldr	r2, [pc, #304]	; (8000bfc <HAL_UART_RxCpltCallback+0x1d0>)
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	f002 fe58 	bl	8003784 <sniprintf>
 8000ad4:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
			HAL_UART_Transmit(&huart1, info, infoLen, HAL_MAX_DELAY);
 8000ad8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae6:	4843      	ldr	r0, [pc, #268]	; (8000bf4 <HAL_UART_RxCpltCallback+0x1c8>)
 8000ae8:	f002 f820 	bl	8002b2c <HAL_UART_Transmit>
			if (userAns == rightAns){
 8000aec:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <HAL_UART_RxCpltCallback+0x1cc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d141      	bne.n	8000b7c <HAL_UART_RxCpltCallback+0x150>
				int infoLen = snprintf((char *)info, sizeof(info), "[INFO] True! Do a good job!\r\n");
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <HAL_UART_RxCpltCallback+0x1d4>)
 8000afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fe3e 	bl	8003784 <sniprintf>
 8000b08:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
				HAL_UART_Transmit(&huart1, info, infoLen, HAL_MAX_DELAY);
 8000b0c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f107 010c 	add.w	r1, r7, #12
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	4836      	ldr	r0, [pc, #216]	; (8000bf4 <HAL_UART_RxCpltCallback+0x1c8>)
 8000b1c:	f002 f806 	bl	8002b2c <HAL_UART_Transmit>
				blink_LED1(delay);
 8000b20:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <HAL_UART_RxCpltCallback+0x1d8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fd6d 	bl	8000604 <blink_LED1>
				while (!finish_blink){}
 8000b2a:	bf00      	nop
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <HAL_UART_RxCpltCallback+0x1dc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0fb      	beq.n	8000b2c <HAL_UART_RxCpltCallback+0x100>
				if (++numAccept == 5){
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <HAL_UART_RxCpltCallback+0x1b0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <HAL_UART_RxCpltCallback+0x1b0>)
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <HAL_UART_RxCpltCallback+0x1b0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	d114      	bne.n	8000b70 <HAL_UART_RxCpltCallback+0x144>
					int infoLen = snprintf((char *)info, sizeof(info), "[INFO] You pass! Press KEY0 to try again.\r\n");
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <HAL_UART_RxCpltCallback+0x1e0>)
 8000b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fe17 	bl	8003784 <sniprintf>
 8000b56:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
					HAL_UART_Transmit(&huart1, info, infoLen, HAL_MAX_DELAY);
 8000b5a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f107 010c 	add.w	r1, r7, #12
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b68:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <HAL_UART_RxCpltCallback+0x1c8>)
 8000b6a:	f001 ffdf 	bl	8002b2c <HAL_UART_Transmit>
					return;
 8000b6e:	e031      	b.n	8000bd4 <HAL_UART_RxCpltCallback+0x1a8>
				}
				rightAns = generateQuestion();
 8000b70:	f7ff fdb4 	bl	80006dc <generateQuestion>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <HAL_UART_RxCpltCallback+0x1cc>)
 8000b78:	6013      	str	r3, [r2, #0]
		if (rxBuffer[0] == '\n' || rxBuffer[0] == '\r'){ // user ends input
 8000b7a:	e02b      	b.n	8000bd4 <HAL_UART_RxCpltCallback+0x1a8>
			}
			else{
				blink_LED0(delay);
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_UART_RxCpltCallback+0x1d8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fd1b 	bl	80005bc <blink_LED0>
				while (!finish_blink);
 8000b86:	bf00      	nop
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <HAL_UART_RxCpltCallback+0x1dc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0fb      	beq.n	8000b88 <HAL_UART_RxCpltCallback+0x15c>
				int infoLen = snprintf((char *)info, sizeof(info), "[INFO] Wrong! Please try again!\r\n");
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 fdf2 	bl	8003784 <sniprintf>
 8000ba0:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
				HAL_UART_Transmit(&huart1, info, infoLen, HAL_MAX_DELAY);
 8000ba4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	f107 010c 	add.w	r1, r7, #12
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb2:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <HAL_UART_RxCpltCallback+0x1c8>)
 8000bb4:	f001 ffba 	bl	8002b2c <HAL_UART_Transmit>
		if (rxBuffer[0] == '\n' || rxBuffer[0] == '\r'){ // user ends input
 8000bb8:	e00c      	b.n	8000bd4 <HAL_UART_RxCpltCallback+0x1a8>
			}
		}
		else{
			uRx_Data[uLength++] = rxBuffer[0];
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_UART_RxCpltCallback+0x1bc>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	b2d1      	uxtb	r1, r2
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <HAL_UART_RxCpltCallback+0x1bc>)
 8000bc4:	7011      	strb	r1, [r2, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_UART_RxCpltCallback+0x1b8>)
 8000bca:	7819      	ldrb	r1, [r3, #0]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <HAL_UART_RxCpltCallback+0x1c0>)
 8000bce:	5499      	strb	r1, [r3, r2]
 8000bd0:	e000      	b.n	8000bd4 <HAL_UART_RxCpltCallback+0x1a8>
	if (numAccept == 5) return;
 8000bd2:	bf00      	nop
		}
	}
}
 8000bd4:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200000c8 	.word	0x200000c8
 8000be0:	40013800 	.word	0x40013800
 8000be4:	20000094 	.word	0x20000094
 8000be8:	200000d8 	.word	0x200000d8
 8000bec:	200000dc 	.word	0x200000dc
 8000bf0:	08004dc8 	.word	0x08004dc8
 8000bf4:	20000528 	.word	0x20000528
 8000bf8:	200000d0 	.word	0x200000d0
 8000bfc:	08004de4 	.word	0x08004de4
 8000c00:	08004dfc 	.word	0x08004dfc
 8000c04:	20000000 	.word	0x20000000
 8000c08:	200000cc 	.word	0x200000cc
 8000c0c:	08004e1c 	.word	0x08004e1c
 8000c10:	08004e48 	.word	0x08004e48

08000c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return 1;
 8000c18:	2301      	movs	r3, #1
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <_kill>:

int _kill(int pid, int sig)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c2c:	f002 ffb6 	bl	8003b9c <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2216      	movs	r2, #22
 8000c34:	601a      	str	r2, [r3, #0]
  return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_exit>:

void _exit (int status)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffe7 	bl	8000c22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c54:	e7fe      	b.n	8000c54 <_exit+0x12>

08000c56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e00a      	b.n	8000c7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c68:	f3af 8000 	nop.w
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	60ba      	str	r2, [r7, #8]
 8000c74:	b2ca      	uxtb	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dbf0      	blt.n	8000c68 <_read+0x12>
  }

  return len;
 8000c86:	687b      	ldr	r3, [r7, #4]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e009      	b.n	8000cb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	60ba      	str	r2, [r7, #8]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	dbf1      	blt.n	8000ca2 <_write+0x12>
  }
  return len;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_close>:

int _close(int file)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <_isatty>:

int _isatty(int file)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d04:	2301      	movs	r3, #1
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 ff20 	bl	8003b9c <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000c000 	.word	0x2000c000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200004dc 	.word	0x200004dc
 8000d90:	200006c0 	.word	0x200006c0

08000d94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000dbe:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <MX_TIM3_Init+0x98>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000dc4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000dd2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000de6:	f001 fa1f 	bl	8002228 <HAL_TIM_Base_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000df0:	f7ff fb53 	bl	800049a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000e02:	f001 fbc9 	bl	8002598 <HAL_TIM_ConfigClockSource>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e0c:	f7ff fb45 	bl	800049a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_TIM3_Init+0x94>)
 8000e1e:	f001 fdb7 	bl	8002990 <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e28:	f7ff fb37 	bl	800049a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200004e0 	.word	0x200004e0
 8000e38:	40000400 	.word	0x40000400

08000e3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_TIM_Base_MspInit+0x44>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d113      	bne.n	8000e76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2101      	movs	r1, #1
 8000e6a:	201d      	movs	r0, #29
 8000e6c:	f000 fa0d 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e70:	201d      	movs	r0, #29
 8000e72:	f000 fa26 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40021000 	.word	0x40021000

08000e88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART1_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	f001 fde4 	bl	8002a8c <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f7ff fae6 	bl	800049a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000528 	.word	0x20000528
 8000ed8:	40013800 	.word	0x40013800

08000edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <HAL_UART_MspInit+0x9c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d139      	bne.n	8000f70 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_UART_MspInit+0xa0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480f      	ldr	r0, [pc, #60]	; (8000f80 <HAL_UART_MspInit+0xa4>)
 8000f42:	f000 fb1b 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <HAL_UART_MspInit+0xa4>)
 8000f5c:	f000 fb0e 	bl	800157c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	2025      	movs	r0, #37	; 0x25
 8000f66:	f000 f990 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f6a:	2025      	movs	r0, #37	; 0x25
 8000f6c:	f000 f9a9 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010800 	.word	0x40010800

08000f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f84:	f7ff ff06 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f8a:	490c      	ldr	r1, [pc, #48]	; (8000fbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fa0:	4c09      	ldr	r4, [pc, #36]	; (8000fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f002 fdfb 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb2:	f7ff f9f3 	bl	800039c <main>
  bx lr
 8000fb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fc0:	08005080 	.word	0x08005080
  ldr r2, =_sbss
 8000fc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fc8:	200006c0 	.word	0x200006c0

08000fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_2_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x28>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x28>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f947 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fa5a 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f95f 	bl	80012de <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001038:	f000 f927 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000004 	.word	0x20000004
 8001054:	2000000c 	.word	0x2000000c
 8001058:	20000008 	.word	0x20000008

0800105c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_IncTick+0x1c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x20>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <HAL_IncTick+0x20>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000570 	.word	0x20000570

08001080 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <HAL_GetTick+0x10>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000570 	.word	0x20000570

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff fff0 	bl	8001080 <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffe0 	bl	8001080 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000000c 	.word	0x2000000c

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4906      	ldr	r1, [pc, #24]	; (8001174 <__NVIC_EnableIRQ+0x34>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001254:	f7ff ff90 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff2d 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff42 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff90 	bl	80011cc <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5f 	bl	8001178 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff35 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d008      	beq.n	8001320 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2204      	movs	r2, #4
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e020      	b.n	8001362 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 020e 	bic.w	r2, r2, #14
 800132e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001348:	2101      	movs	r1, #1
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d005      	beq.n	8001390 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2204      	movs	r2, #4
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e0d6      	b.n	800153e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 020e 	bic.w	r2, r2, #14
 800139e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b64      	ldr	r3, [pc, #400]	; (8001548 <HAL_DMA_Abort_IT+0x1dc>)
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d958      	bls.n	800146e <HAL_DMA_Abort_IT+0x102>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a62      	ldr	r2, [pc, #392]	; (800154c <HAL_DMA_Abort_IT+0x1e0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d04f      	beq.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a61      	ldr	r2, [pc, #388]	; (8001550 <HAL_DMA_Abort_IT+0x1e4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d048      	beq.n	8001462 <HAL_DMA_Abort_IT+0xf6>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a5f      	ldr	r2, [pc, #380]	; (8001554 <HAL_DMA_Abort_IT+0x1e8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d040      	beq.n	800145c <HAL_DMA_Abort_IT+0xf0>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_DMA_Abort_IT+0x1ec>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d038      	beq.n	8001456 <HAL_DMA_Abort_IT+0xea>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a5c      	ldr	r2, [pc, #368]	; (800155c <HAL_DMA_Abort_IT+0x1f0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d030      	beq.n	8001450 <HAL_DMA_Abort_IT+0xe4>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_DMA_Abort_IT+0x1f4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d028      	beq.n	800144a <HAL_DMA_Abort_IT+0xde>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a52      	ldr	r2, [pc, #328]	; (8001548 <HAL_DMA_Abort_IT+0x1dc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d020      	beq.n	8001444 <HAL_DMA_Abort_IT+0xd8>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_DMA_Abort_IT+0x1f8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d019      	beq.n	8001440 <HAL_DMA_Abort_IT+0xd4>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_DMA_Abort_IT+0x1fc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d012      	beq.n	800143c <HAL_DMA_Abort_IT+0xd0>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_DMA_Abort_IT+0x200>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00a      	beq.n	8001436 <HAL_DMA_Abort_IT+0xca>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_DMA_Abort_IT+0x204>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d102      	bne.n	8001430 <HAL_DMA_Abort_IT+0xc4>
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	e01b      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 8001430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001434:	e018      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	e015      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 800143c:	2310      	movs	r3, #16
 800143e:	e013      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 8001440:	2301      	movs	r3, #1
 8001442:	e011      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 8001444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001448:	e00e      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 800144a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800144e:	e00b      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 8001450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001454:	e008      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	e005      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 800145c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001460:	e002      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 8001462:	2310      	movs	r3, #16
 8001464:	e000      	b.n	8001468 <HAL_DMA_Abort_IT+0xfc>
 8001466:	2301      	movs	r3, #1
 8001468:	4a42      	ldr	r2, [pc, #264]	; (8001574 <HAL_DMA_Abort_IT+0x208>)
 800146a:	6053      	str	r3, [r2, #4]
 800146c:	e057      	b.n	800151e <HAL_DMA_Abort_IT+0x1b2>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a36      	ldr	r2, [pc, #216]	; (800154c <HAL_DMA_Abort_IT+0x1e0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d04f      	beq.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a34      	ldr	r2, [pc, #208]	; (8001550 <HAL_DMA_Abort_IT+0x1e4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d048      	beq.n	8001514 <HAL_DMA_Abort_IT+0x1a8>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a33      	ldr	r2, [pc, #204]	; (8001554 <HAL_DMA_Abort_IT+0x1e8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d040      	beq.n	800150e <HAL_DMA_Abort_IT+0x1a2>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a31      	ldr	r2, [pc, #196]	; (8001558 <HAL_DMA_Abort_IT+0x1ec>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d038      	beq.n	8001508 <HAL_DMA_Abort_IT+0x19c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a30      	ldr	r2, [pc, #192]	; (800155c <HAL_DMA_Abort_IT+0x1f0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d030      	beq.n	8001502 <HAL_DMA_Abort_IT+0x196>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2e      	ldr	r2, [pc, #184]	; (8001560 <HAL_DMA_Abort_IT+0x1f4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d028      	beq.n	80014fc <HAL_DMA_Abort_IT+0x190>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_DMA_Abort_IT+0x1dc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d020      	beq.n	80014f6 <HAL_DMA_Abort_IT+0x18a>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a2a      	ldr	r2, [pc, #168]	; (8001564 <HAL_DMA_Abort_IT+0x1f8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_DMA_Abort_IT+0x186>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a29      	ldr	r2, [pc, #164]	; (8001568 <HAL_DMA_Abort_IT+0x1fc>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d012      	beq.n	80014ee <HAL_DMA_Abort_IT+0x182>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <HAL_DMA_Abort_IT+0x200>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00a      	beq.n	80014e8 <HAL_DMA_Abort_IT+0x17c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_DMA_Abort_IT+0x204>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d102      	bne.n	80014e2 <HAL_DMA_Abort_IT+0x176>
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	e01b      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 80014e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e6:	e018      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 80014e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ec:	e015      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 80014ee:	2310      	movs	r3, #16
 80014f0:	e013      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e011      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 80014f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014fa:	e00e      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 80014fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001500:	e00b      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 8001502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001506:	e008      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	e005      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 800150e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001512:	e002      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 8001514:	2310      	movs	r3, #16
 8001516:	e000      	b.n	800151a <HAL_DMA_Abort_IT+0x1ae>
 8001518:	2301      	movs	r3, #1
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_DMA_Abort_IT+0x20c>)
 800151c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
    } 
  }
  return status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40020080 	.word	0x40020080
 800154c:	40020008 	.word	0x40020008
 8001550:	4002001c 	.word	0x4002001c
 8001554:	40020030 	.word	0x40020030
 8001558:	40020044 	.word	0x40020044
 800155c:	40020058 	.word	0x40020058
 8001560:	4002006c 	.word	0x4002006c
 8001564:	40020408 	.word	0x40020408
 8001568:	4002041c 	.word	0x4002041c
 800156c:	40020430 	.word	0x40020430
 8001570:	40020444 	.word	0x40020444
 8001574:	40020400 	.word	0x40020400
 8001578:	40020000 	.word	0x40020000

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e179      	b.n	8001884 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001590:	2201      	movs	r2, #1
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8168 	bne.w	800187e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a96      	ldr	r2, [pc, #600]	; (800180c <HAL_GPIO_Init+0x290>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d05e      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015b8:	4a94      	ldr	r2, [pc, #592]	; (800180c <HAL_GPIO_Init+0x290>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d875      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015be:	4a94      	ldr	r2, [pc, #592]	; (8001810 <HAL_GPIO_Init+0x294>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d058      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015c4:	4a92      	ldr	r2, [pc, #584]	; (8001810 <HAL_GPIO_Init+0x294>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d86f      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015ca:	4a92      	ldr	r2, [pc, #584]	; (8001814 <HAL_GPIO_Init+0x298>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d052      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015d0:	4a90      	ldr	r2, [pc, #576]	; (8001814 <HAL_GPIO_Init+0x298>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d869      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015d6:	4a90      	ldr	r2, [pc, #576]	; (8001818 <HAL_GPIO_Init+0x29c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d04c      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015dc:	4a8e      	ldr	r2, [pc, #568]	; (8001818 <HAL_GPIO_Init+0x29c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d863      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015e2:	4a8e      	ldr	r2, [pc, #568]	; (800181c <HAL_GPIO_Init+0x2a0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d046      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015e8:	4a8c      	ldr	r2, [pc, #560]	; (800181c <HAL_GPIO_Init+0x2a0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d85d      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d82a      	bhi.n	8001648 <HAL_GPIO_Init+0xcc>
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d859      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <HAL_GPIO_Init+0x80>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	08001677 	.word	0x08001677
 8001600:	08001651 	.word	0x08001651
 8001604:	08001663 	.word	0x08001663
 8001608:	080016a5 	.word	0x080016a5
 800160c:	080016ab 	.word	0x080016ab
 8001610:	080016ab 	.word	0x080016ab
 8001614:	080016ab 	.word	0x080016ab
 8001618:	080016ab 	.word	0x080016ab
 800161c:	080016ab 	.word	0x080016ab
 8001620:	080016ab 	.word	0x080016ab
 8001624:	080016ab 	.word	0x080016ab
 8001628:	080016ab 	.word	0x080016ab
 800162c:	080016ab 	.word	0x080016ab
 8001630:	080016ab 	.word	0x080016ab
 8001634:	080016ab 	.word	0x080016ab
 8001638:	080016ab 	.word	0x080016ab
 800163c:	080016ab 	.word	0x080016ab
 8001640:	08001659 	.word	0x08001659
 8001644:	0800166d 	.word	0x0800166d
 8001648:	4a75      	ldr	r2, [pc, #468]	; (8001820 <HAL_GPIO_Init+0x2a4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164e:	e02c      	b.n	80016aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e029      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	3304      	adds	r3, #4
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e024      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	3308      	adds	r3, #8
 8001668:	623b      	str	r3, [r7, #32]
          break;
 800166a:	e01f      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	330c      	adds	r3, #12
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e01a      	b.n	80016ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167e:	2304      	movs	r3, #4
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e013      	b.n	80016ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	2308      	movs	r3, #8
 800168e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	611a      	str	r2, [r3, #16]
          break;
 8001696:	e009      	b.n	80016ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001698:	2308      	movs	r3, #8
 800169a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	615a      	str	r2, [r3, #20]
          break;
 80016a2:	e003      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x130>
          break;
 80016aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2bff      	cmp	r3, #255	; 0xff
 80016b0:	d801      	bhi.n	80016b6 <HAL_GPIO_Init+0x13a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	e001      	b.n	80016ba <HAL_GPIO_Init+0x13e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3304      	adds	r3, #4
 80016ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d802      	bhi.n	80016c8 <HAL_GPIO_Init+0x14c>
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x152>
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	3b08      	subs	r3, #8
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	210f      	movs	r1, #15
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	6a39      	ldr	r1, [r7, #32]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80c1 	beq.w	800187e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_GPIO_Init+0x2a8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a48      	ldr	r2, [pc, #288]	; (8001824 <HAL_GPIO_Init+0x2a8>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_GPIO_Init+0x2a8>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001714:	4a44      	ldr	r2, [pc, #272]	; (8001828 <HAL_GPIO_Init+0x2ac>)
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a3c      	ldr	r2, [pc, #240]	; (800182c <HAL_GPIO_Init+0x2b0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d01f      	beq.n	8001780 <HAL_GPIO_Init+0x204>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a3b      	ldr	r2, [pc, #236]	; (8001830 <HAL_GPIO_Init+0x2b4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d019      	beq.n	800177c <HAL_GPIO_Init+0x200>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d013      	beq.n	8001778 <HAL_GPIO_Init+0x1fc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a39      	ldr	r2, [pc, #228]	; (8001838 <HAL_GPIO_Init+0x2bc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00d      	beq.n	8001774 <HAL_GPIO_Init+0x1f8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a38      	ldr	r2, [pc, #224]	; (800183c <HAL_GPIO_Init+0x2c0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x1f4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a37      	ldr	r2, [pc, #220]	; (8001840 <HAL_GPIO_Init+0x2c4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_GPIO_Init+0x1f0>
 8001768:	2305      	movs	r3, #5
 800176a:	e00a      	b.n	8001782 <HAL_GPIO_Init+0x206>
 800176c:	2306      	movs	r3, #6
 800176e:	e008      	b.n	8001782 <HAL_GPIO_Init+0x206>
 8001770:	2304      	movs	r3, #4
 8001772:	e006      	b.n	8001782 <HAL_GPIO_Init+0x206>
 8001774:	2303      	movs	r3, #3
 8001776:	e004      	b.n	8001782 <HAL_GPIO_Init+0x206>
 8001778:	2302      	movs	r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0x206>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_GPIO_Init+0x206>
 8001780:	2300      	movs	r3, #0
 8001782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001784:	f002 0203 	and.w	r2, r2, #3
 8001788:	0092      	lsls	r2, r2, #2
 800178a:	4093      	lsls	r3, r2
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001792:	4925      	ldr	r1, [pc, #148]	; (8001828 <HAL_GPIO_Init+0x2ac>)
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	4924      	ldr	r1, [pc, #144]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4920      	ldr	r1, [pc, #128]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	491a      	ldr	r1, [pc, #104]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60cb      	str	r3, [r1, #12]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4916      	ldr	r1, [pc, #88]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d025      	beq.n	8001848 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	4910      	ldr	r1, [pc, #64]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
 8001808:	e025      	b.n	8001856 <HAL_GPIO_Init+0x2da>
 800180a:	bf00      	nop
 800180c:	10320000 	.word	0x10320000
 8001810:	10310000 	.word	0x10310000
 8001814:	10220000 	.word	0x10220000
 8001818:	10210000 	.word	0x10210000
 800181c:	10120000 	.word	0x10120000
 8001820:	10110000 	.word	0x10110000
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000
 800182c:	40010800 	.word	0x40010800
 8001830:	40010c00 	.word	0x40010c00
 8001834:	40011000 	.word	0x40011000
 8001838:	40011400 	.word	0x40011400
 800183c:	40011800 	.word	0x40011800
 8001840:	40011c00 	.word	0x40011c00
 8001844:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_GPIO_Init+0x324>)
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	43db      	mvns	r3, r3
 8001850:	4913      	ldr	r1, [pc, #76]	; (80018a0 <HAL_GPIO_Init+0x324>)
 8001852:	4013      	ands	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_GPIO_Init+0x324>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_GPIO_Init+0x324>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_GPIO_Init+0x324>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	43db      	mvns	r3, r3
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <HAL_GPIO_Init+0x324>)
 800187a:	4013      	ands	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	3301      	adds	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	f47f ae7e 	bne.w	8001590 <HAL_GPIO_Init+0x14>
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	372c      	adds	r7, #44	; 0x2c
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e2:	787b      	ldrb	r3, [r7, #1]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e8:	887a      	ldrh	r2, [r7, #2]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018ee:	e003      	b.n	80018f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	041a      	lsls	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001914:	887a      	ldrh	r2, [r7, #2]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4013      	ands	r3, r2
 800191a:	041a      	lsls	r2, r3, #16
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43d9      	mvns	r1, r3
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	400b      	ands	r3, r1
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	611a      	str	r2, [r3, #16]
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe78 	bl	8000648 <HAL_GPIO_EXTI_Callback>
  }
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e034      	b.n	80019e0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800197e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f245 5255 	movw	r2, #21845	; 0x5555
 8001988:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6852      	ldr	r2, [r2, #4]
 8001992:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6892      	ldr	r2, [r2, #8]
 800199c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800199e:	f7ff fb6f 	bl	8001080 <HAL_GetTick>
 80019a2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80019a4:	e00f      	b.n	80019c6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80019a6:	f7ff fb6b 	bl	8001080 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b27      	cmp	r3, #39	; 0x27
 80019b2:	d908      	bls.n	80019c6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e00c      	b.n	80019e0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e8      	bne.n	80019a6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80019dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80019f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e272      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8087 	beq.w	8001b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a28:	4b92      	ldr	r3, [pc, #584]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d00c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a34:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d112      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
 8001a40:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d10b      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x12c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d168      	bne.n	8001b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e24c      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x76>
 8001a70:	4b80      	ldr	r3, [pc, #512]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a7f      	ldr	r2, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e02e      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7a      	ldr	r2, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a77      	ldr	r2, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e01d      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xbc>
 8001aaa:	4b72      	ldr	r3, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6a      	ldr	r2, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a67      	ldr	r2, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff facc 	bl	8001080 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fac8 	bl	8001080 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e200      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0xe4>
 8001b0a:	e014      	b.n	8001b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fab8 	bl	8001080 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fab4 	bl	8001080 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1ec      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x10c>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b4e:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d11c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x18c>
 8001b5a:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x176>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e1c0      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4939      	ldr	r1, [pc, #228]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	e03a      	b.n	8001c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fa6d 	bl	8001080 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff fa69 	bl	8001080 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e1a1      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4927      	ldr	r1, [pc, #156]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_RCC_OscConfig+0x270>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fa4c 	bl	8001080 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff fa48 	bl	8001080 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e180      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03a      	beq.n	8001c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d019      	beq.n	8001c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7ff fa2c 	bl	8001080 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fa28 	bl	8001080 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e160      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f000 face 	bl	80021ec <RCC_Delay>
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7ff fa12 	bl	8001080 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fa0e 	bl	8001080 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d908      	bls.n	8001c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e146      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	42420000 	.word	0x42420000
 8001c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b92      	ldr	r3, [pc, #584]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e9      	bne.n	8001c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a6 	beq.w	8001de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9e:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10d      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b88      	ldr	r3, [pc, #544]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a87      	ldr	r2, [pc, #540]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b85      	ldr	r3, [pc, #532]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b82      	ldr	r3, [pc, #520]	; (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd2:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7e      	ldr	r2, [pc, #504]	; (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cde:	f7ff f9cf 	bl	8001080 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7ff f9cb 	bl	8001080 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e103      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x312>
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a6e      	ldr	r2, [pc, #440]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	e02d      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d22:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a69      	ldr	r2, [pc, #420]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a66      	ldr	r2, [pc, #408]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	e01c      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d10c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x356>
 8001d44:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a60      	ldr	r2, [pc, #384]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a5d      	ldr	r2, [pc, #372]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	e00b      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a5a      	ldr	r2, [pc, #360]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d015      	beq.n	8001daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff f97f 	bl	8001080 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7ff f97b 	bl	8001080 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0b1      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ee      	beq.n	8001d86 <HAL_RCC_OscConfig+0x37e>
 8001da8:	e014      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff f969 	bl	8001080 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff f965 	bl	8001080 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e09b      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ee      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8087 	beq.w	8001efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df0:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d061      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d146      	bne.n	8001e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f939 	bl	8001080 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff f935 	bl	8001080 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e06d      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4921      	ldr	r1, [pc, #132]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a19      	ldr	r1, [r3, #32]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	491b      	ldr	r1, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f909 	bl	8001080 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff f905 	bl	8001080 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e03d      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x46a>
 8001e90:	e035      	b.n	8001efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff f8f2 	bl	8001080 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f8ee 	bl	8001080 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e026      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x498>
 8001ebe:	e01e      	b.n	8001efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e019      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_OscConfig+0x500>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7ff f840 	bl	8001080 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7ff f83c 	bl	8001080 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1cc>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff9e 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08004e6c 	.word	0x08004e6c
 80020d8:	20000004 	.word	0x20000004
 80020dc:	20000008 	.word	0x20000008

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_GetSysClockFreq+0x94>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x30>
 800210a:	2b08      	cmp	r3, #8
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x36>
 800210e:	e027      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002112:	613b      	str	r3, [r7, #16]
      break;
 8002114:	e027      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d010      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_RCC_GetSysClockFreq+0x94>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0c5b      	lsrs	r3, r3, #17
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002142:	fb03 f202 	mul.w	r2, r3, r2
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e004      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	613b      	str	r3, [r7, #16]
      break;
 800215e:	e002      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002162:	613b      	str	r3, [r7, #16]
      break;
 8002164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002166:	693b      	ldr	r3, [r7, #16]
}
 8002168:	4618      	mov	r0, r3
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	007a1200 	.word	0x007a1200
 800217c:	08004e84 	.word	0x08004e84
 8002180:	08004e94 	.word	0x08004e94
 8002184:	003d0900 	.word	0x003d0900

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_RCC_GetHCLKFreq+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000004 	.word	0x20000004

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a0:	f7ff fff2 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08004e7c 	.word	0x08004e7c

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c8:	f7ff ffde 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08004e7c 	.word	0x08004e7c

080021ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <RCC_Delay+0x34>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <RCC_Delay+0x38>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0a5b      	lsrs	r3, r3, #9
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002208:	bf00      	nop
  }
  while (Delay --);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	60fa      	str	r2, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <RCC_Delay+0x1c>
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	20000004 	.word	0x20000004
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e041      	b.n	80022be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fdf4 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 fa82 	bl	8002770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e044      	b.n	800236a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_TIM_Base_Start_IT+0xac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d018      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_TIM_Base_Start_IT+0xb0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d00e      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a18      	ldr	r2, [pc, #96]	; (800237c <HAL_TIM_Base_Start_IT+0xb4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_TIM_Base_Start_IT+0xb8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x6c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <HAL_TIM_Base_Start_IT+0xbc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d111      	bne.n	8002358 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d010      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002356:	e007      	b.n	8002368 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40013400 	.word	0x40013400
 800237c:	40000400 	.word	0x40000400
 8002380:	40000800 	.word	0x40000800
 8002384:	40000c00 	.word	0x40000c00

08002388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d122      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d11b      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0202 	mvn.w	r2, #2
 80023b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f9b4 	bl	8002738 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f9a7 	bl	8002726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f9b6 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d122      	bne.n	8002438 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d11b      	bne.n	8002438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0204 	mvn.w	r2, #4
 8002408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f98a 	bl	8002738 <HAL_TIM_IC_CaptureCallback>
 8002424:	e005      	b.n	8002432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f97d 	bl	8002726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f98c 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b08      	cmp	r3, #8
 8002444:	d122      	bne.n	800248c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b08      	cmp	r3, #8
 8002452:	d11b      	bne.n	800248c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0208 	mvn.w	r2, #8
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2204      	movs	r2, #4
 8002462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f960 	bl	8002738 <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f953 	bl	8002726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f962 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b10      	cmp	r3, #16
 8002498:	d122      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d11b      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0210 	mvn.w	r2, #16
 80024b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2208      	movs	r2, #8
 80024b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f936 	bl	8002738 <HAL_TIM_IC_CaptureCallback>
 80024cc:	e005      	b.n	80024da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f929 	bl	8002726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f938 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10e      	bne.n	800250c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0201 	mvn.w	r2, #1
 8002504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe f9fc 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002516:	2b80      	cmp	r3, #128	; 0x80
 8002518:	d10e      	bne.n	8002538 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002524:	2b80      	cmp	r3, #128	; 0x80
 8002526:	d107      	bne.n	8002538 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 faa1 	bl	8002a7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d10e      	bne.n	8002564 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d107      	bne.n	8002564 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800255c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8fc 	bl	800275c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b20      	cmp	r3, #32
 8002570:	d10e      	bne.n	8002590 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d107      	bne.n	8002590 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0220 	mvn.w	r2, #32
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa6c 	bl	8002a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIM_ConfigClockSource+0x1c>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e0b4      	b.n	800271e <HAL_TIM_ConfigClockSource+0x186>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ec:	d03e      	beq.n	800266c <HAL_TIM_ConfigClockSource+0xd4>
 80025ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f2:	f200 8087 	bhi.w	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fa:	f000 8086 	beq.w	800270a <HAL_TIM_ConfigClockSource+0x172>
 80025fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002602:	d87f      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b70      	cmp	r3, #112	; 0x70
 8002606:	d01a      	beq.n	800263e <HAL_TIM_ConfigClockSource+0xa6>
 8002608:	2b70      	cmp	r3, #112	; 0x70
 800260a:	d87b      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 800260c:	2b60      	cmp	r3, #96	; 0x60
 800260e:	d050      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002610:	2b60      	cmp	r3, #96	; 0x60
 8002612:	d877      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 8002614:	2b50      	cmp	r3, #80	; 0x50
 8002616:	d03c      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0xfa>
 8002618:	2b50      	cmp	r3, #80	; 0x50
 800261a:	d873      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 800261c:	2b40      	cmp	r3, #64	; 0x40
 800261e:	d058      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d86f      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 8002624:	2b30      	cmp	r3, #48	; 0x30
 8002626:	d064      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002628:	2b30      	cmp	r3, #48	; 0x30
 800262a:	d86b      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 800262c:	2b20      	cmp	r3, #32
 800262e:	d060      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002630:	2b20      	cmp	r3, #32
 8002632:	d867      	bhi.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05c      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002638:	2b10      	cmp	r3, #16
 800263a:	d05a      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x15a>
 800263c:	e062      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	f000 f980 	bl	8002952 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	609a      	str	r2, [r3, #8]
      break;
 800266a:	e04f      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	f000 f969 	bl	8002952 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800268e:	609a      	str	r2, [r3, #8]
      break;
 8002690:	e03c      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800269e:	461a      	mov	r2, r3
 80026a0:	f000 f8e0 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2150      	movs	r1, #80	; 0x50
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f937 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80026b0:	e02c      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026be:	461a      	mov	r2, r3
 80026c0:	f000 f8fe 	bl	80028c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2160      	movs	r1, #96	; 0x60
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f927 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80026d0:	e01c      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	461a      	mov	r2, r3
 80026e0:	f000 f8c0 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2140      	movs	r1, #64	; 0x40
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f917 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80026f0:	e00c      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f000 f90e 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 8002702:	e003      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      break;
 8002708:	e000      	b.n	800270c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800270a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
	...

08002770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a33      	ldr	r2, [pc, #204]	; (8002850 <TIM_Base_SetConfig+0xe0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <TIM_Base_SetConfig+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a32      	ldr	r2, [pc, #200]	; (8002854 <TIM_Base_SetConfig+0xe4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00f      	beq.n	80027b0 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002796:	d00b      	beq.n	80027b0 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a2f      	ldr	r2, [pc, #188]	; (8002858 <TIM_Base_SetConfig+0xe8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d007      	beq.n	80027b0 <TIM_Base_SetConfig+0x40>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a2e      	ldr	r2, [pc, #184]	; (800285c <TIM_Base_SetConfig+0xec>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d003      	beq.n	80027b0 <TIM_Base_SetConfig+0x40>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a2d      	ldr	r2, [pc, #180]	; (8002860 <TIM_Base_SetConfig+0xf0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d108      	bne.n	80027c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <TIM_Base_SetConfig+0xe0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <TIM_Base_SetConfig+0x82>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a21      	ldr	r2, [pc, #132]	; (8002854 <TIM_Base_SetConfig+0xe4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00f      	beq.n	80027f2 <TIM_Base_SetConfig+0x82>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d00b      	beq.n	80027f2 <TIM_Base_SetConfig+0x82>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <TIM_Base_SetConfig+0xe8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <TIM_Base_SetConfig+0x82>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	; (800285c <TIM_Base_SetConfig+0xec>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_Base_SetConfig+0x82>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <TIM_Base_SetConfig+0xf0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d108      	bne.n	8002804 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <TIM_Base_SetConfig+0xe0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_Base_SetConfig+0xc8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a08      	ldr	r2, [pc, #32]	; (8002854 <TIM_Base_SetConfig+0xe4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d103      	bne.n	8002840 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	615a      	str	r2, [r3, #20]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40013400 	.word	0x40013400
 8002858:	40000400 	.word	0x40000400
 800285c:	40000800 	.word	0x40000800
 8002860:	40000c00 	.word	0x40000c00

08002864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f023 030a 	bic.w	r3, r3, #10
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f023 0210 	bic.w	r2, r3, #16
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	031b      	lsls	r3, r3, #12
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	f043 0307 	orr.w	r3, r3, #7
 8002940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	609a      	str	r2, [r3, #8]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800296c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e050      	b.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d018      	beq.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fe:	d00e      	beq.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10c      	bne.n	8002a38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40013400 	.word	0x40013400
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00

08002a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e042      	b.n	8002b24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe fa12 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fdc5 	bl	8003660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d16d      	bne.n	8002c28 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_UART_Transmit+0x2c>
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e066      	b.n	8002c2a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2221      	movs	r2, #33	; 0x21
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fa89 	bl	8001080 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d108      	bne.n	8002b98 <HAL_UART_Transmit+0x6c>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e003      	b.n	8002ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba0:	e02a      	b.n	8002bf8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fb14 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e036      	b.n	8002c2a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10b      	bne.n	8002bda <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	e007      	b.n	8002bea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	3301      	adds	r3, #1
 8002be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1cf      	bne.n	8002ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fae4 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d112      	bne.n	8002c72 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_UART_Receive_IT+0x26>
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e00b      	b.n	8002c74 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	461a      	mov	r2, r3
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fb24 	bl	80032b6 <UART_Start_Receive_IT>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	e000      	b.n	8002c74 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b0ba      	sub	sp, #232	; 0xe8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x66>
 8002cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fc01 	bl	80034e2 <UART_Receive_IT>
      return;
 8002ce0:	e25b      	b.n	800319a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80de 	beq.w	8002ea8 <HAL_UART_IRQHandler+0x22c>
 8002cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80d1 	beq.w	8002ea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_UART_IRQHandler+0xae>
 8002d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_UART_IRQHandler+0xd2>
 8002d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_UART_IRQHandler+0xf6>
 8002d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f043 0204 	orr.w	r2, r3, #4
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d011      	beq.n	8002da2 <HAL_UART_IRQHandler+0x126>
 8002d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f043 0208 	orr.w	r2, r3, #8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 81f2 	beq.w	8003190 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_UART_IRQHandler+0x14e>
 8002db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fb8c 	bl	80034e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d103      	bne.n	8002df6 <HAL_UART_IRQHandler+0x17a>
 8002dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d04f      	beq.n	8002e96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa96 	bl	8003328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d041      	beq.n	8002e8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3314      	adds	r3, #20
 8002e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1d9      	bne.n	8002e0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d013      	beq.n	8002e86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	4a7e      	ldr	r2, [pc, #504]	; (800305c <HAL_UART_IRQHandler+0x3e0>)
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fa7e 	bl	800136c <HAL_DMA_Abort_IT>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e80:	4610      	mov	r0, r2
 8002e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	e00e      	b.n	8002ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f993 	bl	80031b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8c:	e00a      	b.n	8002ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f98f 	bl	80031b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	e006      	b.n	8002ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f98b 	bl	80031b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ea2:	e175      	b.n	8003190 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	bf00      	nop
    return;
 8002ea6:	e173      	b.n	8003190 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	f040 814f 	bne.w	8003150 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8148 	beq.w	8003150 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8141 	beq.w	8003150 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80b6 	beq.w	8003060 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8145 	beq.w	8003194 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f12:	429a      	cmp	r2, r3
 8002f14:	f080 813e 	bcs.w	8003194 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	f000 8088 	beq.w	800303c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1d9      	bne.n	8002f2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3314      	adds	r3, #20
 8002f7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f82:	e853 3f00 	ldrex	r3, [r3]
 8002f86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3314      	adds	r3, #20
 8002f98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e1      	bne.n	8002f78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3314      	adds	r3, #20
 8002fba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e3      	bne.n	8002fb4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	f023 0310 	bic.w	r3, r3, #16
 8003010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800301e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003020:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800302c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e3      	bne.n	8002ffa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe f95d 	bl	80012f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800304a:	b29b      	uxth	r3, r3
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8b6 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003058:	e09c      	b.n	8003194 <HAL_UART_IRQHandler+0x518>
 800305a:	bf00      	nop
 800305c:	080033ed 	.word	0x080033ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003068:	b29b      	uxth	r3, r3
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 808e 	beq.w	8003198 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800307c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8089 	beq.w	8003198 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800309c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030aa:	647a      	str	r2, [r7, #68]	; 0x44
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e3      	bne.n	8003086 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3314      	adds	r3, #20
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	623b      	str	r3, [r7, #32]
   return(result);
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3314      	adds	r3, #20
 80030de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030e2:	633a      	str	r2, [r7, #48]	; 0x30
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e3      	bne.n	80030be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	60fb      	str	r3, [r7, #12]
   return(result);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0310 	bic.w	r3, r3, #16
 800311a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003128:	61fa      	str	r2, [r7, #28]
 800312a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	617b      	str	r3, [r7, #20]
   return(result);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e3      	bne.n	8003104 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f83b 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800314e:	e023      	b.n	8003198 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_UART_IRQHandler+0x4f4>
 800315c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f953 	bl	8003414 <UART_Transmit_IT>
    return;
 800316e:	e014      	b.n	800319a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00e      	beq.n	800319a <HAL_UART_IRQHandler+0x51e>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f992 	bl	80034b2 <UART_EndTransmit_IT>
    return;
 800318e:	e004      	b.n	800319a <HAL_UART_IRQHandler+0x51e>
    return;
 8003190:	bf00      	nop
 8003192:	e002      	b.n	800319a <HAL_UART_IRQHandler+0x51e>
      return;
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <HAL_UART_IRQHandler+0x51e>
      return;
 8003198:	bf00      	nop
  }
}
 800319a:	37e8      	adds	r7, #232	; 0xe8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b090      	sub	sp, #64	; 0x40
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	e050      	b.n	800328e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f2:	d04c      	beq.n	800328e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0x30>
 80031fa:	f7fd ff41 	bl	8001080 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003206:	429a      	cmp	r2, r3
 8003208:	d241      	bcs.n	800328e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	330c      	adds	r3, #12
 8003228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800322a:	637a      	str	r2, [r7, #52]	; 0x34
 800322c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e5      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	613b      	str	r3, [r7, #16]
   return(result);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	63bb      	str	r3, [r7, #56]	; 0x38
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3314      	adds	r3, #20
 800325c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800325e:	623a      	str	r2, [r7, #32]
 8003260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	69f9      	ldr	r1, [r7, #28]
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	61bb      	str	r3, [r7, #24]
   return(result);
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e5      	bne.n	800323e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e00f      	b.n	80032ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d09f      	beq.n	80031ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3740      	adds	r7, #64	; 0x40
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	4613      	mov	r3, r2
 80032c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	88fa      	ldrh	r2, [r7, #6]
 80032ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2222      	movs	r2, #34	; 0x22
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b095      	sub	sp, #84	; 0x54
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003350:	643a      	str	r2, [r7, #64]	; 0x40
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e5      	bne.n	8003330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3314      	adds	r3, #20
 800336a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	61fb      	str	r3, [r7, #28]
   return(result);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	64bb      	str	r3, [r7, #72]	; 0x48
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3314      	adds	r3, #20
 8003382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e5      	bne.n	8003364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	2b01      	cmp	r3, #1
 800339e:	d119      	bne.n	80033d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f023 0310 	bic.w	r3, r3, #16
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c0:	61ba      	str	r2, [r7, #24]
 80033c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	613b      	str	r3, [r7, #16]
   return(result);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e5      	bne.n	80033a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033e2:	bf00      	nop
 80033e4:	3754      	adds	r7, #84	; 0x54
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff fed3 	bl	80031b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b21      	cmp	r3, #33	; 0x21
 8003426:	d13e      	bne.n	80034a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003430:	d114      	bne.n	800345c <UART_Transmit_IT+0x48>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d110      	bne.n	800345c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800344e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	1c9a      	adds	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	621a      	str	r2, [r3, #32]
 800345a:	e008      	b.n	800346e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	1c59      	adds	r1, r3, #1
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6211      	str	r1, [r2, #32]
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29b      	uxth	r3, r3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4619      	mov	r1, r3
 800347c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003490:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e000      	b.n	80034a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fe64 	bl	80031a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b08c      	sub	sp, #48	; 0x30
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b22      	cmp	r3, #34	; 0x22
 80034f4:	f040 80ae 	bne.w	8003654 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003500:	d117      	bne.n	8003532 <UART_Receive_IT+0x50>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d113      	bne.n	8003532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003520:	b29a      	uxth	r2, r3
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	1c9a      	adds	r2, r3, #2
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
 8003530:	e026      	b.n	8003580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003538:	2300      	movs	r3, #0
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d007      	beq.n	8003556 <UART_Receive_IT+0x74>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <UART_Receive_IT+0x82>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e008      	b.n	8003576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003570:	b2da      	uxtb	r2, r3
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4619      	mov	r1, r3
 800358e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003590:	2b00      	cmp	r3, #0
 8003592:	d15d      	bne.n	8003650 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0220 	bic.w	r2, r2, #32
 80035a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d135      	bne.n	8003646 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	613b      	str	r3, [r7, #16]
   return(result);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 0310 	bic.w	r3, r3, #16
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	623a      	str	r2, [r7, #32]
 8003602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	69f9      	ldr	r1, [r7, #28]
 8003606:	6a3a      	ldr	r2, [r7, #32]
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	61bb      	str	r3, [r7, #24]
   return(result);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b10      	cmp	r3, #16
 8003620:	d10a      	bne.n	8003638 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fdc0 	bl	80031c4 <HAL_UARTEx_RxEventCallback>
 8003644:	e002      	b.n	800364c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd f9f0 	bl	8000a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e002      	b.n	8003656 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3730      	adds	r7, #48	; 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800369a:	f023 030c 	bic.w	r3, r3, #12
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2c      	ldr	r2, [pc, #176]	; (8003774 <UART_SetConfig+0x114>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036c8:	f7fe fd7c 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	e002      	b.n	80036d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036d0:	f7fe fd64 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	4a22      	ldr	r2, [pc, #136]	; (8003778 <UART_SetConfig+0x118>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	0119      	lsls	r1, r3, #4
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009a      	lsls	r2, r3, #2
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	fbb2 f2f3 	udiv	r2, r2, r3
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <UART_SetConfig+0x118>)
 800370e:	fba3 0302 	umull	r0, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2064      	movs	r0, #100	; 0x64
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	3332      	adds	r3, #50	; 0x32
 8003720:	4a15      	ldr	r2, [pc, #84]	; (8003778 <UART_SetConfig+0x118>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800372c:	4419      	add	r1, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <UART_SetConfig+0x118>)
 8003746:	fba3 0302 	umull	r0, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2064      	movs	r0, #100	; 0x64
 800374e:	fb00 f303 	mul.w	r3, r0, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	3332      	adds	r3, #50	; 0x32
 8003758:	4a07      	ldr	r2, [pc, #28]	; (8003778 <UART_SetConfig+0x118>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	440a      	add	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40013800 	.word	0x40013800
 8003778:	51eb851f 	.word	0x51eb851f

0800377c <atoi>:
 800377c:	220a      	movs	r2, #10
 800377e:	2100      	movs	r1, #0
 8003780:	f000 b9b0 	b.w	8003ae4 <strtol>

08003784 <sniprintf>:
 8003784:	b40c      	push	{r2, r3}
 8003786:	b530      	push	{r4, r5, lr}
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <sniprintf+0x64>)
 800378a:	1e0c      	subs	r4, r1, #0
 800378c:	681d      	ldr	r5, [r3, #0]
 800378e:	b09d      	sub	sp, #116	; 0x74
 8003790:	da08      	bge.n	80037a4 <sniprintf+0x20>
 8003792:	238b      	movs	r3, #139	; 0x8b
 8003794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003798:	602b      	str	r3, [r5, #0]
 800379a:	b01d      	add	sp, #116	; 0x74
 800379c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037a0:	b002      	add	sp, #8
 80037a2:	4770      	bx	lr
 80037a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80037a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037ac:	bf0c      	ite	eq
 80037ae:	4623      	moveq	r3, r4
 80037b0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80037b4:	9304      	str	r3, [sp, #16]
 80037b6:	9307      	str	r3, [sp, #28]
 80037b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037bc:	9002      	str	r0, [sp, #8]
 80037be:	9006      	str	r0, [sp, #24]
 80037c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037c4:	4628      	mov	r0, r5
 80037c6:	ab21      	add	r3, sp, #132	; 0x84
 80037c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80037ca:	a902      	add	r1, sp, #8
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	f000 fa89 	bl	8003ce4 <_svfiprintf_r>
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	bfbc      	itt	lt
 80037d6:	238b      	movlt	r3, #139	; 0x8b
 80037d8:	602b      	strlt	r3, [r5, #0]
 80037da:	2c00      	cmp	r4, #0
 80037dc:	d0dd      	beq.n	800379a <sniprintf+0x16>
 80037de:	2200      	movs	r2, #0
 80037e0:	9b02      	ldr	r3, [sp, #8]
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e7d9      	b.n	800379a <sniprintf+0x16>
 80037e6:	bf00      	nop
 80037e8:	20000068 	.word	0x20000068

080037ec <srand>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <srand+0x44>)
 80037f0:	4604      	mov	r4, r0
 80037f2:	681d      	ldr	r5, [r3, #0]
 80037f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037f6:	b9b3      	cbnz	r3, 8003826 <srand+0x3a>
 80037f8:	2018      	movs	r0, #24
 80037fa:	f000 fb71 	bl	8003ee0 <malloc>
 80037fe:	4602      	mov	r2, r0
 8003800:	6328      	str	r0, [r5, #48]	; 0x30
 8003802:	b920      	cbnz	r0, 800380e <srand+0x22>
 8003804:	2146      	movs	r1, #70	; 0x46
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <srand+0x48>)
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <srand+0x4c>)
 800380a:	f000 f9f3 	bl	8003bf4 <__assert_func>
 800380e:	490b      	ldr	r1, [pc, #44]	; (800383c <srand+0x50>)
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <srand+0x54>)
 8003812:	e9c0 1300 	strd	r1, r3, [r0]
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <srand+0x58>)
 8003818:	2100      	movs	r1, #0
 800381a:	6083      	str	r3, [r0, #8]
 800381c:	230b      	movs	r3, #11
 800381e:	8183      	strh	r3, [r0, #12]
 8003820:	2001      	movs	r0, #1
 8003822:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003826:	2200      	movs	r2, #0
 8003828:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800382a:	611c      	str	r4, [r3, #16]
 800382c:	615a      	str	r2, [r3, #20]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	20000068 	.word	0x20000068
 8003834:	08004e96 	.word	0x08004e96
 8003838:	08004ead 	.word	0x08004ead
 800383c:	abcd330e 	.word	0xabcd330e
 8003840:	e66d1234 	.word	0xe66d1234
 8003844:	0005deec 	.word	0x0005deec

08003848 <rand>:
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <rand+0x5c>)
 800384a:	b510      	push	{r4, lr}
 800384c:	681c      	ldr	r4, [r3, #0]
 800384e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003850:	b9b3      	cbnz	r3, 8003880 <rand+0x38>
 8003852:	2018      	movs	r0, #24
 8003854:	f000 fb44 	bl	8003ee0 <malloc>
 8003858:	4602      	mov	r2, r0
 800385a:	6320      	str	r0, [r4, #48]	; 0x30
 800385c:	b920      	cbnz	r0, 8003868 <rand+0x20>
 800385e:	2152      	movs	r1, #82	; 0x52
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <rand+0x60>)
 8003862:	4812      	ldr	r0, [pc, #72]	; (80038ac <rand+0x64>)
 8003864:	f000 f9c6 	bl	8003bf4 <__assert_func>
 8003868:	4911      	ldr	r1, [pc, #68]	; (80038b0 <rand+0x68>)
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <rand+0x6c>)
 800386c:	e9c0 1300 	strd	r1, r3, [r0]
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <rand+0x70>)
 8003872:	2100      	movs	r1, #0
 8003874:	6083      	str	r3, [r0, #8]
 8003876:	230b      	movs	r3, #11
 8003878:	8183      	strh	r3, [r0, #12]
 800387a:	2001      	movs	r0, #1
 800387c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003880:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003882:	480e      	ldr	r0, [pc, #56]	; (80038bc <rand+0x74>)
 8003884:	690b      	ldr	r3, [r1, #16]
 8003886:	694c      	ldr	r4, [r1, #20]
 8003888:	4358      	muls	r0, r3
 800388a:	4a0d      	ldr	r2, [pc, #52]	; (80038c0 <rand+0x78>)
 800388c:	fb02 0004 	mla	r0, r2, r4, r0
 8003890:	fba3 3202 	umull	r3, r2, r3, r2
 8003894:	3301      	adds	r3, #1
 8003896:	eb40 0002 	adc.w	r0, r0, r2
 800389a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800389e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80038a2:	bd10      	pop	{r4, pc}
 80038a4:	20000068 	.word	0x20000068
 80038a8:	08004e96 	.word	0x08004e96
 80038ac:	08004ead 	.word	0x08004ead
 80038b0:	abcd330e 	.word	0xabcd330e
 80038b4:	e66d1234 	.word	0xe66d1234
 80038b8:	0005deec 	.word	0x0005deec
 80038bc:	5851f42d 	.word	0x5851f42d
 80038c0:	4c957f2d 	.word	0x4c957f2d

080038c4 <std>:
 80038c4:	2300      	movs	r3, #0
 80038c6:	b510      	push	{r4, lr}
 80038c8:	4604      	mov	r4, r0
 80038ca:	e9c0 3300 	strd	r3, r3, [r0]
 80038ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038d2:	6083      	str	r3, [r0, #8]
 80038d4:	8181      	strh	r1, [r0, #12]
 80038d6:	6643      	str	r3, [r0, #100]	; 0x64
 80038d8:	81c2      	strh	r2, [r0, #14]
 80038da:	6183      	str	r3, [r0, #24]
 80038dc:	4619      	mov	r1, r3
 80038de:	2208      	movs	r2, #8
 80038e0:	305c      	adds	r0, #92	; 0x5c
 80038e2:	f000 f927 	bl	8003b34 <memset>
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <std+0x38>)
 80038e8:	6224      	str	r4, [r4, #32]
 80038ea:	6263      	str	r3, [r4, #36]	; 0x24
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <std+0x3c>)
 80038ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <std+0x40>)
 80038f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <std+0x44>)
 80038f6:	6323      	str	r3, [r4, #48]	; 0x30
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	bf00      	nop
 80038fc:	080044c5 	.word	0x080044c5
 8003900:	080044e7 	.word	0x080044e7
 8003904:	0800451f 	.word	0x0800451f
 8003908:	08004543 	.word	0x08004543

0800390c <stdio_exit_handler>:
 800390c:	4a02      	ldr	r2, [pc, #8]	; (8003918 <stdio_exit_handler+0xc>)
 800390e:	4903      	ldr	r1, [pc, #12]	; (800391c <stdio_exit_handler+0x10>)
 8003910:	4803      	ldr	r0, [pc, #12]	; (8003920 <stdio_exit_handler+0x14>)
 8003912:	f000 b8f1 	b.w	8003af8 <_fwalk_sglue>
 8003916:	bf00      	nop
 8003918:	20000010 	.word	0x20000010
 800391c:	0800445d 	.word	0x0800445d
 8003920:	2000001c 	.word	0x2000001c

08003924 <cleanup_stdio>:
 8003924:	6841      	ldr	r1, [r0, #4]
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <cleanup_stdio+0x34>)
 8003928:	b510      	push	{r4, lr}
 800392a:	4299      	cmp	r1, r3
 800392c:	4604      	mov	r4, r0
 800392e:	d001      	beq.n	8003934 <cleanup_stdio+0x10>
 8003930:	f000 fd94 	bl	800445c <_fflush_r>
 8003934:	68a1      	ldr	r1, [r4, #8]
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <cleanup_stdio+0x38>)
 8003938:	4299      	cmp	r1, r3
 800393a:	d002      	beq.n	8003942 <cleanup_stdio+0x1e>
 800393c:	4620      	mov	r0, r4
 800393e:	f000 fd8d 	bl	800445c <_fflush_r>
 8003942:	68e1      	ldr	r1, [r4, #12]
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <cleanup_stdio+0x3c>)
 8003946:	4299      	cmp	r1, r3
 8003948:	d004      	beq.n	8003954 <cleanup_stdio+0x30>
 800394a:	4620      	mov	r0, r4
 800394c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003950:	f000 bd84 	b.w	800445c <_fflush_r>
 8003954:	bd10      	pop	{r4, pc}
 8003956:	bf00      	nop
 8003958:	20000574 	.word	0x20000574
 800395c:	200005dc 	.word	0x200005dc
 8003960:	20000644 	.word	0x20000644

08003964 <global_stdio_init.part.0>:
 8003964:	b510      	push	{r4, lr}
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <global_stdio_init.part.0+0x30>)
 8003968:	4c0b      	ldr	r4, [pc, #44]	; (8003998 <global_stdio_init.part.0+0x34>)
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <global_stdio_init.part.0+0x38>)
 800396c:	4620      	mov	r0, r4
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	2104      	movs	r1, #4
 8003972:	2200      	movs	r2, #0
 8003974:	f7ff ffa6 	bl	80038c4 <std>
 8003978:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800397c:	2201      	movs	r2, #1
 800397e:	2109      	movs	r1, #9
 8003980:	f7ff ffa0 	bl	80038c4 <std>
 8003984:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003988:	2202      	movs	r2, #2
 800398a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800398e:	2112      	movs	r1, #18
 8003990:	f7ff bf98 	b.w	80038c4 <std>
 8003994:	200006ac 	.word	0x200006ac
 8003998:	20000574 	.word	0x20000574
 800399c:	0800390d 	.word	0x0800390d

080039a0 <__sfp_lock_acquire>:
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <__sfp_lock_acquire+0x8>)
 80039a2:	f000 b925 	b.w	8003bf0 <__retarget_lock_acquire_recursive>
 80039a6:	bf00      	nop
 80039a8:	200006b1 	.word	0x200006b1

080039ac <__sfp_lock_release>:
 80039ac:	4801      	ldr	r0, [pc, #4]	; (80039b4 <__sfp_lock_release+0x8>)
 80039ae:	f000 b920 	b.w	8003bf2 <__retarget_lock_release_recursive>
 80039b2:	bf00      	nop
 80039b4:	200006b1 	.word	0x200006b1

080039b8 <__sinit>:
 80039b8:	b510      	push	{r4, lr}
 80039ba:	4604      	mov	r4, r0
 80039bc:	f7ff fff0 	bl	80039a0 <__sfp_lock_acquire>
 80039c0:	6a23      	ldr	r3, [r4, #32]
 80039c2:	b11b      	cbz	r3, 80039cc <__sinit+0x14>
 80039c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c8:	f7ff bff0 	b.w	80039ac <__sfp_lock_release>
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <__sinit+0x28>)
 80039ce:	6223      	str	r3, [r4, #32]
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <__sinit+0x2c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f5      	bne.n	80039c4 <__sinit+0xc>
 80039d8:	f7ff ffc4 	bl	8003964 <global_stdio_init.part.0>
 80039dc:	e7f2      	b.n	80039c4 <__sinit+0xc>
 80039de:	bf00      	nop
 80039e0:	08003925 	.word	0x08003925
 80039e4:	200006ac 	.word	0x200006ac

080039e8 <_strtol_l.constprop.0>:
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ee:	4686      	mov	lr, r0
 80039f0:	4690      	mov	r8, r2
 80039f2:	d001      	beq.n	80039f8 <_strtol_l.constprop.0+0x10>
 80039f4:	2b24      	cmp	r3, #36	; 0x24
 80039f6:	d906      	bls.n	8003a06 <_strtol_l.constprop.0+0x1e>
 80039f8:	f000 f8d0 	bl	8003b9c <__errno>
 80039fc:	2316      	movs	r3, #22
 80039fe:	6003      	str	r3, [r0, #0]
 8003a00:	2000      	movs	r0, #0
 8003a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a06:	460d      	mov	r5, r1
 8003a08:	4835      	ldr	r0, [pc, #212]	; (8003ae0 <_strtol_l.constprop.0+0xf8>)
 8003a0a:	462a      	mov	r2, r5
 8003a0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a10:	5d06      	ldrb	r6, [r0, r4]
 8003a12:	f016 0608 	ands.w	r6, r6, #8
 8003a16:	d1f8      	bne.n	8003a0a <_strtol_l.constprop.0+0x22>
 8003a18:	2c2d      	cmp	r4, #45	; 0x2d
 8003a1a:	d12e      	bne.n	8003a7a <_strtol_l.constprop.0+0x92>
 8003a1c:	2601      	movs	r6, #1
 8003a1e:	782c      	ldrb	r4, [r5, #0]
 8003a20:	1c95      	adds	r5, r2, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d057      	beq.n	8003ad6 <_strtol_l.constprop.0+0xee>
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d109      	bne.n	8003a3e <_strtol_l.constprop.0+0x56>
 8003a2a:	2c30      	cmp	r4, #48	; 0x30
 8003a2c:	d107      	bne.n	8003a3e <_strtol_l.constprop.0+0x56>
 8003a2e:	782a      	ldrb	r2, [r5, #0]
 8003a30:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003a34:	2a58      	cmp	r2, #88	; 0x58
 8003a36:	d149      	bne.n	8003acc <_strtol_l.constprop.0+0xe4>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	786c      	ldrb	r4, [r5, #1]
 8003a3c:	3502      	adds	r5, #2
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003a44:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8003a48:	fbbc f9f3 	udiv	r9, ip, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8003a52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003a56:	2f09      	cmp	r7, #9
 8003a58:	d814      	bhi.n	8003a84 <_strtol_l.constprop.0+0x9c>
 8003a5a:	463c      	mov	r4, r7
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	dd20      	ble.n	8003aa2 <_strtol_l.constprop.0+0xba>
 8003a60:	1c57      	adds	r7, r2, #1
 8003a62:	d007      	beq.n	8003a74 <_strtol_l.constprop.0+0x8c>
 8003a64:	4581      	cmp	r9, r0
 8003a66:	d319      	bcc.n	8003a9c <_strtol_l.constprop.0+0xb4>
 8003a68:	d101      	bne.n	8003a6e <_strtol_l.constprop.0+0x86>
 8003a6a:	45a2      	cmp	sl, r4
 8003a6c:	db16      	blt.n	8003a9c <_strtol_l.constprop.0+0xb4>
 8003a6e:	2201      	movs	r2, #1
 8003a70:	fb00 4003 	mla	r0, r0, r3, r4
 8003a74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a78:	e7eb      	b.n	8003a52 <_strtol_l.constprop.0+0x6a>
 8003a7a:	2c2b      	cmp	r4, #43	; 0x2b
 8003a7c:	bf04      	itt	eq
 8003a7e:	782c      	ldrbeq	r4, [r5, #0]
 8003a80:	1c95      	addeq	r5, r2, #2
 8003a82:	e7ce      	b.n	8003a22 <_strtol_l.constprop.0+0x3a>
 8003a84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003a88:	2f19      	cmp	r7, #25
 8003a8a:	d801      	bhi.n	8003a90 <_strtol_l.constprop.0+0xa8>
 8003a8c:	3c37      	subs	r4, #55	; 0x37
 8003a8e:	e7e5      	b.n	8003a5c <_strtol_l.constprop.0+0x74>
 8003a90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003a94:	2f19      	cmp	r7, #25
 8003a96:	d804      	bhi.n	8003aa2 <_strtol_l.constprop.0+0xba>
 8003a98:	3c57      	subs	r4, #87	; 0x57
 8003a9a:	e7df      	b.n	8003a5c <_strtol_l.constprop.0+0x74>
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003aa0:	e7e8      	b.n	8003a74 <_strtol_l.constprop.0+0x8c>
 8003aa2:	1c53      	adds	r3, r2, #1
 8003aa4:	d108      	bne.n	8003ab8 <_strtol_l.constprop.0+0xd0>
 8003aa6:	2322      	movs	r3, #34	; 0x22
 8003aa8:	4660      	mov	r0, ip
 8003aaa:	f8ce 3000 	str.w	r3, [lr]
 8003aae:	f1b8 0f00 	cmp.w	r8, #0
 8003ab2:	d0a6      	beq.n	8003a02 <_strtol_l.constprop.0+0x1a>
 8003ab4:	1e69      	subs	r1, r5, #1
 8003ab6:	e006      	b.n	8003ac6 <_strtol_l.constprop.0+0xde>
 8003ab8:	b106      	cbz	r6, 8003abc <_strtol_l.constprop.0+0xd4>
 8003aba:	4240      	negs	r0, r0
 8003abc:	f1b8 0f00 	cmp.w	r8, #0
 8003ac0:	d09f      	beq.n	8003a02 <_strtol_l.constprop.0+0x1a>
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d1f6      	bne.n	8003ab4 <_strtol_l.constprop.0+0xcc>
 8003ac6:	f8c8 1000 	str.w	r1, [r8]
 8003aca:	e79a      	b.n	8003a02 <_strtol_l.constprop.0+0x1a>
 8003acc:	2430      	movs	r4, #48	; 0x30
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1b5      	bne.n	8003a3e <_strtol_l.constprop.0+0x56>
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	e7b3      	b.n	8003a3e <_strtol_l.constprop.0+0x56>
 8003ad6:	2c30      	cmp	r4, #48	; 0x30
 8003ad8:	d0a9      	beq.n	8003a2e <_strtol_l.constprop.0+0x46>
 8003ada:	230a      	movs	r3, #10
 8003adc:	e7af      	b.n	8003a3e <_strtol_l.constprop.0+0x56>
 8003ade:	bf00      	nop
 8003ae0:	08004f06 	.word	0x08004f06

08003ae4 <strtol>:
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	4601      	mov	r1, r0
 8003aea:	4802      	ldr	r0, [pc, #8]	; (8003af4 <strtol+0x10>)
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	f7ff bf7b 	b.w	80039e8 <_strtol_l.constprop.0>
 8003af2:	bf00      	nop
 8003af4:	20000068 	.word	0x20000068

08003af8 <_fwalk_sglue>:
 8003af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003afc:	4607      	mov	r7, r0
 8003afe:	4688      	mov	r8, r1
 8003b00:	4614      	mov	r4, r2
 8003b02:	2600      	movs	r6, #0
 8003b04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b08:	f1b9 0901 	subs.w	r9, r9, #1
 8003b0c:	d505      	bpl.n	8003b1a <_fwalk_sglue+0x22>
 8003b0e:	6824      	ldr	r4, [r4, #0]
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	d1f7      	bne.n	8003b04 <_fwalk_sglue+0xc>
 8003b14:	4630      	mov	r0, r6
 8003b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1a:	89ab      	ldrh	r3, [r5, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d907      	bls.n	8003b30 <_fwalk_sglue+0x38>
 8003b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b24:	3301      	adds	r3, #1
 8003b26:	d003      	beq.n	8003b30 <_fwalk_sglue+0x38>
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	47c0      	blx	r8
 8003b2e:	4306      	orrs	r6, r0
 8003b30:	3568      	adds	r5, #104	; 0x68
 8003b32:	e7e9      	b.n	8003b08 <_fwalk_sglue+0x10>

08003b34 <memset>:
 8003b34:	4603      	mov	r3, r0
 8003b36:	4402      	add	r2, r0
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d100      	bne.n	8003b3e <memset+0xa>
 8003b3c:	4770      	bx	lr
 8003b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b42:	e7f9      	b.n	8003b38 <memset+0x4>

08003b44 <time>:
 8003b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <time+0x30>)
 8003b48:	4604      	mov	r4, r0
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4669      	mov	r1, sp
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	f000 f812 	bl	8003b78 <_gettimeofday_r>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	da05      	bge.n	8003b64 <time+0x20>
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b60:	e9cd 2300 	strd	r2, r3, [sp]
 8003b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b68:	b10c      	cbz	r4, 8003b6e <time+0x2a>
 8003b6a:	e9c4 0100 	strd	r0, r1, [r4]
 8003b6e:	b004      	add	sp, #16
 8003b70:	bd10      	pop	{r4, pc}
 8003b72:	bf00      	nop
 8003b74:	20000068 	.word	0x20000068

08003b78 <_gettimeofday_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	4d06      	ldr	r5, [pc, #24]	; (8003b98 <_gettimeofday_r+0x20>)
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	602b      	str	r3, [r5, #0]
 8003b86:	f001 f8a7 	bl	8004cd8 <_gettimeofday>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	d102      	bne.n	8003b94 <_gettimeofday_r+0x1c>
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	b103      	cbz	r3, 8003b94 <_gettimeofday_r+0x1c>
 8003b92:	6023      	str	r3, [r4, #0]
 8003b94:	bd38      	pop	{r3, r4, r5, pc}
 8003b96:	bf00      	nop
 8003b98:	200006bc 	.word	0x200006bc

08003b9c <__errno>:
 8003b9c:	4b01      	ldr	r3, [pc, #4]	; (8003ba4 <__errno+0x8>)
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000068 	.word	0x20000068

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	2600      	movs	r6, #0
 8003bac:	4d0c      	ldr	r5, [pc, #48]	; (8003be0 <__libc_init_array+0x38>)
 8003bae:	4c0d      	ldr	r4, [pc, #52]	; (8003be4 <__libc_init_array+0x3c>)
 8003bb0:	1b64      	subs	r4, r4, r5
 8003bb2:	10a4      	asrs	r4, r4, #2
 8003bb4:	42a6      	cmp	r6, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	f001 f896 	bl	8004ce8 <_init>
 8003bbc:	2600      	movs	r6, #0
 8003bbe:	4d0a      	ldr	r5, [pc, #40]	; (8003be8 <__libc_init_array+0x40>)
 8003bc0:	4c0a      	ldr	r4, [pc, #40]	; (8003bec <__libc_init_array+0x44>)
 8003bc2:	1b64      	subs	r4, r4, r5
 8003bc4:	10a4      	asrs	r4, r4, #2
 8003bc6:	42a6      	cmp	r6, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd0:	4798      	blx	r3
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bda:	4798      	blx	r3
 8003bdc:	3601      	adds	r6, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	08005078 	.word	0x08005078
 8003be4:	08005078 	.word	0x08005078
 8003be8:	08005078 	.word	0x08005078
 8003bec:	0800507c 	.word	0x0800507c

08003bf0 <__retarget_lock_acquire_recursive>:
 8003bf0:	4770      	bx	lr

08003bf2 <__retarget_lock_release_recursive>:
 8003bf2:	4770      	bx	lr

08003bf4 <__assert_func>:
 8003bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bf6:	4614      	mov	r4, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <__assert_func+0x2c>)
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68d8      	ldr	r0, [r3, #12]
 8003c02:	b14c      	cbz	r4, 8003c18 <__assert_func+0x24>
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <__assert_func+0x30>)
 8003c06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003c0a:	9100      	str	r1, [sp, #0]
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	4906      	ldr	r1, [pc, #24]	; (8003c28 <__assert_func+0x34>)
 8003c10:	f000 fc9c 	bl	800454c <fiprintf>
 8003c14:	f000 fd68 	bl	80046e8 <abort>
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <__assert_func+0x38>)
 8003c1a:	461c      	mov	r4, r3
 8003c1c:	e7f3      	b.n	8003c06 <__assert_func+0x12>
 8003c1e:	bf00      	nop
 8003c20:	20000068 	.word	0x20000068
 8003c24:	08005006 	.word	0x08005006
 8003c28:	08005013 	.word	0x08005013
 8003c2c:	08005041 	.word	0x08005041

08003c30 <__ssputs_r>:
 8003c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c34:	461f      	mov	r7, r3
 8003c36:	688e      	ldr	r6, [r1, #8]
 8003c38:	4682      	mov	sl, r0
 8003c3a:	42be      	cmp	r6, r7
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	4690      	mov	r8, r2
 8003c40:	680b      	ldr	r3, [r1, #0]
 8003c42:	d82c      	bhi.n	8003c9e <__ssputs_r+0x6e>
 8003c44:	898a      	ldrh	r2, [r1, #12]
 8003c46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c4a:	d026      	beq.n	8003c9a <__ssputs_r+0x6a>
 8003c4c:	6965      	ldr	r5, [r4, #20]
 8003c4e:	6909      	ldr	r1, [r1, #16]
 8003c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c54:	eba3 0901 	sub.w	r9, r3, r1
 8003c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c5c:	1c7b      	adds	r3, r7, #1
 8003c5e:	444b      	add	r3, r9
 8003c60:	106d      	asrs	r5, r5, #1
 8003c62:	429d      	cmp	r5, r3
 8003c64:	bf38      	it	cc
 8003c66:	461d      	movcc	r5, r3
 8003c68:	0553      	lsls	r3, r2, #21
 8003c6a:	d527      	bpl.n	8003cbc <__ssputs_r+0x8c>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	f000 f95f 	bl	8003f30 <_malloc_r>
 8003c72:	4606      	mov	r6, r0
 8003c74:	b360      	cbz	r0, 8003cd0 <__ssputs_r+0xa0>
 8003c76:	464a      	mov	r2, r9
 8003c78:	6921      	ldr	r1, [r4, #16]
 8003c7a:	f000 fd27 	bl	80046cc <memcpy>
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	6126      	str	r6, [r4, #16]
 8003c8c:	444e      	add	r6, r9
 8003c8e:	6026      	str	r6, [r4, #0]
 8003c90:	463e      	mov	r6, r7
 8003c92:	6165      	str	r5, [r4, #20]
 8003c94:	eba5 0509 	sub.w	r5, r5, r9
 8003c98:	60a5      	str	r5, [r4, #8]
 8003c9a:	42be      	cmp	r6, r7
 8003c9c:	d900      	bls.n	8003ca0 <__ssputs_r+0x70>
 8003c9e:	463e      	mov	r6, r7
 8003ca0:	4632      	mov	r2, r6
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	6820      	ldr	r0, [r4, #0]
 8003ca6:	f000 fc92 	bl	80045ce <memmove>
 8003caa:	2000      	movs	r0, #0
 8003cac:	68a3      	ldr	r3, [r4, #8]
 8003cae:	1b9b      	subs	r3, r3, r6
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	4433      	add	r3, r6
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cbc:	462a      	mov	r2, r5
 8003cbe:	f000 fc57 	bl	8004570 <_realloc_r>
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d1e0      	bne.n	8003c8a <__ssputs_r+0x5a>
 8003cc8:	4650      	mov	r0, sl
 8003cca:	6921      	ldr	r1, [r4, #16]
 8003ccc:	f000 fd14 	bl	80046f8 <_free_r>
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	f8ca 3000 	str.w	r3, [sl]
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce0:	81a3      	strh	r3, [r4, #12]
 8003ce2:	e7e9      	b.n	8003cb8 <__ssputs_r+0x88>

08003ce4 <_svfiprintf_r>:
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	4698      	mov	r8, r3
 8003cea:	898b      	ldrh	r3, [r1, #12]
 8003cec:	4607      	mov	r7, r0
 8003cee:	061b      	lsls	r3, r3, #24
 8003cf0:	460d      	mov	r5, r1
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	b09d      	sub	sp, #116	; 0x74
 8003cf6:	d50e      	bpl.n	8003d16 <_svfiprintf_r+0x32>
 8003cf8:	690b      	ldr	r3, [r1, #16]
 8003cfa:	b963      	cbnz	r3, 8003d16 <_svfiprintf_r+0x32>
 8003cfc:	2140      	movs	r1, #64	; 0x40
 8003cfe:	f000 f917 	bl	8003f30 <_malloc_r>
 8003d02:	6028      	str	r0, [r5, #0]
 8003d04:	6128      	str	r0, [r5, #16]
 8003d06:	b920      	cbnz	r0, 8003d12 <_svfiprintf_r+0x2e>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d10:	e0d0      	b.n	8003eb4 <_svfiprintf_r+0x1d0>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	616b      	str	r3, [r5, #20]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d20:	2330      	movs	r3, #48	; 0x30
 8003d22:	f04f 0901 	mov.w	r9, #1
 8003d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d2a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003ecc <_svfiprintf_r+0x1e8>
 8003d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d32:	4623      	mov	r3, r4
 8003d34:	469a      	mov	sl, r3
 8003d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d3a:	b10a      	cbz	r2, 8003d40 <_svfiprintf_r+0x5c>
 8003d3c:	2a25      	cmp	r2, #37	; 0x25
 8003d3e:	d1f9      	bne.n	8003d34 <_svfiprintf_r+0x50>
 8003d40:	ebba 0b04 	subs.w	fp, sl, r4
 8003d44:	d00b      	beq.n	8003d5e <_svfiprintf_r+0x7a>
 8003d46:	465b      	mov	r3, fp
 8003d48:	4622      	mov	r2, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f7ff ff6f 	bl	8003c30 <__ssputs_r>
 8003d52:	3001      	adds	r0, #1
 8003d54:	f000 80a9 	beq.w	8003eaa <_svfiprintf_r+0x1c6>
 8003d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d5a:	445a      	add	r2, fp
 8003d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80a1 	beq.w	8003eaa <_svfiprintf_r+0x1c6>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d72:	f10a 0a01 	add.w	sl, sl, #1
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	9307      	str	r3, [sp, #28]
 8003d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d80:	4654      	mov	r4, sl
 8003d82:	2205      	movs	r2, #5
 8003d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d88:	4850      	ldr	r0, [pc, #320]	; (8003ecc <_svfiprintf_r+0x1e8>)
 8003d8a:	f000 fc91 	bl	80046b0 <memchr>
 8003d8e:	9a04      	ldr	r2, [sp, #16]
 8003d90:	b9d8      	cbnz	r0, 8003dca <_svfiprintf_r+0xe6>
 8003d92:	06d0      	lsls	r0, r2, #27
 8003d94:	bf44      	itt	mi
 8003d96:	2320      	movmi	r3, #32
 8003d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d9c:	0711      	lsls	r1, r2, #28
 8003d9e:	bf44      	itt	mi
 8003da0:	232b      	movmi	r3, #43	; 0x2b
 8003da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da6:	f89a 3000 	ldrb.w	r3, [sl]
 8003daa:	2b2a      	cmp	r3, #42	; 0x2a
 8003dac:	d015      	beq.n	8003dda <_svfiprintf_r+0xf6>
 8003dae:	4654      	mov	r4, sl
 8003db0:	2000      	movs	r0, #0
 8003db2:	f04f 0c0a 	mov.w	ip, #10
 8003db6:	9a07      	ldr	r2, [sp, #28]
 8003db8:	4621      	mov	r1, r4
 8003dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dbe:	3b30      	subs	r3, #48	; 0x30
 8003dc0:	2b09      	cmp	r3, #9
 8003dc2:	d94d      	bls.n	8003e60 <_svfiprintf_r+0x17c>
 8003dc4:	b1b0      	cbz	r0, 8003df4 <_svfiprintf_r+0x110>
 8003dc6:	9207      	str	r2, [sp, #28]
 8003dc8:	e014      	b.n	8003df4 <_svfiprintf_r+0x110>
 8003dca:	eba0 0308 	sub.w	r3, r0, r8
 8003dce:	fa09 f303 	lsl.w	r3, r9, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	46a2      	mov	sl, r4
 8003dd6:	9304      	str	r3, [sp, #16]
 8003dd8:	e7d2      	b.n	8003d80 <_svfiprintf_r+0x9c>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	9103      	str	r1, [sp, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfbb      	ittet	lt
 8003de6:	425b      	neglt	r3, r3
 8003de8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dec:	9307      	strge	r3, [sp, #28]
 8003dee:	9307      	strlt	r3, [sp, #28]
 8003df0:	bfb8      	it	lt
 8003df2:	9204      	strlt	r2, [sp, #16]
 8003df4:	7823      	ldrb	r3, [r4, #0]
 8003df6:	2b2e      	cmp	r3, #46	; 0x2e
 8003df8:	d10c      	bne.n	8003e14 <_svfiprintf_r+0x130>
 8003dfa:	7863      	ldrb	r3, [r4, #1]
 8003dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dfe:	d134      	bne.n	8003e6a <_svfiprintf_r+0x186>
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	3402      	adds	r4, #2
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	9203      	str	r2, [sp, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bfb8      	it	lt
 8003e0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e12:	9305      	str	r3, [sp, #20]
 8003e14:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003ed0 <_svfiprintf_r+0x1ec>
 8003e18:	2203      	movs	r2, #3
 8003e1a:	4650      	mov	r0, sl
 8003e1c:	7821      	ldrb	r1, [r4, #0]
 8003e1e:	f000 fc47 	bl	80046b0 <memchr>
 8003e22:	b138      	cbz	r0, 8003e34 <_svfiprintf_r+0x150>
 8003e24:	2240      	movs	r2, #64	; 0x40
 8003e26:	9b04      	ldr	r3, [sp, #16]
 8003e28:	eba0 000a 	sub.w	r0, r0, sl
 8003e2c:	4082      	lsls	r2, r0
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	3401      	adds	r4, #1
 8003e32:	9304      	str	r3, [sp, #16]
 8003e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e38:	2206      	movs	r2, #6
 8003e3a:	4826      	ldr	r0, [pc, #152]	; (8003ed4 <_svfiprintf_r+0x1f0>)
 8003e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e40:	f000 fc36 	bl	80046b0 <memchr>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d038      	beq.n	8003eba <_svfiprintf_r+0x1d6>
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <_svfiprintf_r+0x1f4>)
 8003e4a:	bb1b      	cbnz	r3, 8003e94 <_svfiprintf_r+0x1b0>
 8003e4c:	9b03      	ldr	r3, [sp, #12]
 8003e4e:	3307      	adds	r3, #7
 8003e50:	f023 0307 	bic.w	r3, r3, #7
 8003e54:	3308      	adds	r3, #8
 8003e56:	9303      	str	r3, [sp, #12]
 8003e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5a:	4433      	add	r3, r6
 8003e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5e:	e768      	b.n	8003d32 <_svfiprintf_r+0x4e>
 8003e60:	460c      	mov	r4, r1
 8003e62:	2001      	movs	r0, #1
 8003e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e68:	e7a6      	b.n	8003db8 <_svfiprintf_r+0xd4>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f04f 0c0a 	mov.w	ip, #10
 8003e70:	4619      	mov	r1, r3
 8003e72:	3401      	adds	r4, #1
 8003e74:	9305      	str	r3, [sp, #20]
 8003e76:	4620      	mov	r0, r4
 8003e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e7c:	3a30      	subs	r2, #48	; 0x30
 8003e7e:	2a09      	cmp	r2, #9
 8003e80:	d903      	bls.n	8003e8a <_svfiprintf_r+0x1a6>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0c6      	beq.n	8003e14 <_svfiprintf_r+0x130>
 8003e86:	9105      	str	r1, [sp, #20]
 8003e88:	e7c4      	b.n	8003e14 <_svfiprintf_r+0x130>
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e92:	e7f0      	b.n	8003e76 <_svfiprintf_r+0x192>
 8003e94:	ab03      	add	r3, sp, #12
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	462a      	mov	r2, r5
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <_svfiprintf_r+0x1f8>)
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	f3af 8000 	nop.w
 8003ea4:	1c42      	adds	r2, r0, #1
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	d1d6      	bne.n	8003e58 <_svfiprintf_r+0x174>
 8003eaa:	89ab      	ldrh	r3, [r5, #12]
 8003eac:	065b      	lsls	r3, r3, #25
 8003eae:	f53f af2d 	bmi.w	8003d0c <_svfiprintf_r+0x28>
 8003eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eb4:	b01d      	add	sp, #116	; 0x74
 8003eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eba:	ab03      	add	r3, sp, #12
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	462a      	mov	r2, r5
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <_svfiprintf_r+0x1f8>)
 8003ec4:	a904      	add	r1, sp, #16
 8003ec6:	f000 f925 	bl	8004114 <_printf_i>
 8003eca:	e7eb      	b.n	8003ea4 <_svfiprintf_r+0x1c0>
 8003ecc:	08005042 	.word	0x08005042
 8003ed0:	08005048 	.word	0x08005048
 8003ed4:	0800504c 	.word	0x0800504c
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	08003c31 	.word	0x08003c31

08003ee0 <malloc>:
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <malloc+0xc>)
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f000 b823 	b.w	8003f30 <_malloc_r>
 8003eea:	bf00      	nop
 8003eec:	20000068 	.word	0x20000068

08003ef0 <sbrk_aligned>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	4e0e      	ldr	r6, [pc, #56]	; (8003f2c <sbrk_aligned+0x3c>)
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	6831      	ldr	r1, [r6, #0]
 8003ef8:	4605      	mov	r5, r0
 8003efa:	b911      	cbnz	r1, 8003f02 <sbrk_aligned+0x12>
 8003efc:	f000 fbb6 	bl	800466c <_sbrk_r>
 8003f00:	6030      	str	r0, [r6, #0]
 8003f02:	4621      	mov	r1, r4
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 fbb1 	bl	800466c <_sbrk_r>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	d00a      	beq.n	8003f24 <sbrk_aligned+0x34>
 8003f0e:	1cc4      	adds	r4, r0, #3
 8003f10:	f024 0403 	bic.w	r4, r4, #3
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d007      	beq.n	8003f28 <sbrk_aligned+0x38>
 8003f18:	1a21      	subs	r1, r4, r0
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f000 fba6 	bl	800466c <_sbrk_r>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d101      	bne.n	8003f28 <sbrk_aligned+0x38>
 8003f24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f28:	4620      	mov	r0, r4
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	200006b8 	.word	0x200006b8

08003f30 <_malloc_r>:
 8003f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f34:	1ccd      	adds	r5, r1, #3
 8003f36:	f025 0503 	bic.w	r5, r5, #3
 8003f3a:	3508      	adds	r5, #8
 8003f3c:	2d0c      	cmp	r5, #12
 8003f3e:	bf38      	it	cc
 8003f40:	250c      	movcc	r5, #12
 8003f42:	2d00      	cmp	r5, #0
 8003f44:	4607      	mov	r7, r0
 8003f46:	db01      	blt.n	8003f4c <_malloc_r+0x1c>
 8003f48:	42a9      	cmp	r1, r5
 8003f4a:	d905      	bls.n	8003f58 <_malloc_r+0x28>
 8003f4c:	230c      	movs	r3, #12
 8003f4e:	2600      	movs	r6, #0
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4630      	mov	r0, r6
 8003f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800402c <_malloc_r+0xfc>
 8003f5c:	f000 faa6 	bl	80044ac <__malloc_lock>
 8003f60:	f8d8 3000 	ldr.w	r3, [r8]
 8003f64:	461c      	mov	r4, r3
 8003f66:	bb5c      	cbnz	r4, 8003fc0 <_malloc_r+0x90>
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f7ff ffc0 	bl	8003ef0 <sbrk_aligned>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	4604      	mov	r4, r0
 8003f74:	d155      	bne.n	8004022 <_malloc_r+0xf2>
 8003f76:	f8d8 4000 	ldr.w	r4, [r8]
 8003f7a:	4626      	mov	r6, r4
 8003f7c:	2e00      	cmp	r6, #0
 8003f7e:	d145      	bne.n	800400c <_malloc_r+0xdc>
 8003f80:	2c00      	cmp	r4, #0
 8003f82:	d048      	beq.n	8004016 <_malloc_r+0xe6>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	4631      	mov	r1, r6
 8003f88:	4638      	mov	r0, r7
 8003f8a:	eb04 0903 	add.w	r9, r4, r3
 8003f8e:	f000 fb6d 	bl	800466c <_sbrk_r>
 8003f92:	4581      	cmp	r9, r0
 8003f94:	d13f      	bne.n	8004016 <_malloc_r+0xe6>
 8003f96:	6821      	ldr	r1, [r4, #0]
 8003f98:	4638      	mov	r0, r7
 8003f9a:	1a6d      	subs	r5, r5, r1
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	f7ff ffa7 	bl	8003ef0 <sbrk_aligned>
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d037      	beq.n	8004016 <_malloc_r+0xe6>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	442b      	add	r3, r5
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d038      	beq.n	8004026 <_malloc_r+0xf6>
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	42a2      	cmp	r2, r4
 8003fb8:	d12b      	bne.n	8004012 <_malloc_r+0xe2>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	e00f      	b.n	8003fe0 <_malloc_r+0xb0>
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	1b52      	subs	r2, r2, r5
 8003fc4:	d41f      	bmi.n	8004006 <_malloc_r+0xd6>
 8003fc6:	2a0b      	cmp	r2, #11
 8003fc8:	d917      	bls.n	8003ffa <_malloc_r+0xca>
 8003fca:	1961      	adds	r1, r4, r5
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	6025      	str	r5, [r4, #0]
 8003fd0:	bf18      	it	ne
 8003fd2:	6059      	strne	r1, [r3, #4]
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	bf08      	it	eq
 8003fd8:	f8c8 1000 	streq.w	r1, [r8]
 8003fdc:	5162      	str	r2, [r4, r5]
 8003fde:	604b      	str	r3, [r1, #4]
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f104 060b 	add.w	r6, r4, #11
 8003fe6:	f000 fa67 	bl	80044b8 <__malloc_unlock>
 8003fea:	f026 0607 	bic.w	r6, r6, #7
 8003fee:	1d23      	adds	r3, r4, #4
 8003ff0:	1af2      	subs	r2, r6, r3
 8003ff2:	d0ae      	beq.n	8003f52 <_malloc_r+0x22>
 8003ff4:	1b9b      	subs	r3, r3, r6
 8003ff6:	50a3      	str	r3, [r4, r2]
 8003ff8:	e7ab      	b.n	8003f52 <_malloc_r+0x22>
 8003ffa:	42a3      	cmp	r3, r4
 8003ffc:	6862      	ldr	r2, [r4, #4]
 8003ffe:	d1dd      	bne.n	8003fbc <_malloc_r+0x8c>
 8004000:	f8c8 2000 	str.w	r2, [r8]
 8004004:	e7ec      	b.n	8003fe0 <_malloc_r+0xb0>
 8004006:	4623      	mov	r3, r4
 8004008:	6864      	ldr	r4, [r4, #4]
 800400a:	e7ac      	b.n	8003f66 <_malloc_r+0x36>
 800400c:	4634      	mov	r4, r6
 800400e:	6876      	ldr	r6, [r6, #4]
 8004010:	e7b4      	b.n	8003f7c <_malloc_r+0x4c>
 8004012:	4613      	mov	r3, r2
 8004014:	e7cc      	b.n	8003fb0 <_malloc_r+0x80>
 8004016:	230c      	movs	r3, #12
 8004018:	4638      	mov	r0, r7
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	f000 fa4c 	bl	80044b8 <__malloc_unlock>
 8004020:	e797      	b.n	8003f52 <_malloc_r+0x22>
 8004022:	6025      	str	r5, [r4, #0]
 8004024:	e7dc      	b.n	8003fe0 <_malloc_r+0xb0>
 8004026:	605b      	str	r3, [r3, #4]
 8004028:	deff      	udf	#255	; 0xff
 800402a:	bf00      	nop
 800402c:	200006b4 	.word	0x200006b4

08004030 <_printf_common>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	4616      	mov	r6, r2
 8004036:	4699      	mov	r9, r3
 8004038:	688a      	ldr	r2, [r1, #8]
 800403a:	690b      	ldr	r3, [r1, #16]
 800403c:	4607      	mov	r7, r0
 800403e:	4293      	cmp	r3, r2
 8004040:	bfb8      	it	lt
 8004042:	4613      	movlt	r3, r2
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800404a:	460c      	mov	r4, r1
 800404c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004050:	b10a      	cbz	r2, 8004056 <_printf_common+0x26>
 8004052:	3301      	adds	r3, #1
 8004054:	6033      	str	r3, [r6, #0]
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	0699      	lsls	r1, r3, #26
 800405a:	bf42      	ittt	mi
 800405c:	6833      	ldrmi	r3, [r6, #0]
 800405e:	3302      	addmi	r3, #2
 8004060:	6033      	strmi	r3, [r6, #0]
 8004062:	6825      	ldr	r5, [r4, #0]
 8004064:	f015 0506 	ands.w	r5, r5, #6
 8004068:	d106      	bne.n	8004078 <_printf_common+0x48>
 800406a:	f104 0a19 	add.w	sl, r4, #25
 800406e:	68e3      	ldr	r3, [r4, #12]
 8004070:	6832      	ldr	r2, [r6, #0]
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	42ab      	cmp	r3, r5
 8004076:	dc2b      	bgt.n	80040d0 <_printf_common+0xa0>
 8004078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800407c:	1e13      	subs	r3, r2, #0
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	bf18      	it	ne
 8004082:	2301      	movne	r3, #1
 8004084:	0692      	lsls	r2, r2, #26
 8004086:	d430      	bmi.n	80040ea <_printf_common+0xba>
 8004088:	4649      	mov	r1, r9
 800408a:	4638      	mov	r0, r7
 800408c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004090:	47c0      	blx	r8
 8004092:	3001      	adds	r0, #1
 8004094:	d023      	beq.n	80040de <_printf_common+0xae>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	6922      	ldr	r2, [r4, #16]
 800409a:	f003 0306 	and.w	r3, r3, #6
 800409e:	2b04      	cmp	r3, #4
 80040a0:	bf14      	ite	ne
 80040a2:	2500      	movne	r5, #0
 80040a4:	6833      	ldreq	r3, [r6, #0]
 80040a6:	f04f 0600 	mov.w	r6, #0
 80040aa:	bf08      	it	eq
 80040ac:	68e5      	ldreq	r5, [r4, #12]
 80040ae:	f104 041a 	add.w	r4, r4, #26
 80040b2:	bf08      	it	eq
 80040b4:	1aed      	subeq	r5, r5, r3
 80040b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040ba:	bf08      	it	eq
 80040bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c0:	4293      	cmp	r3, r2
 80040c2:	bfc4      	itt	gt
 80040c4:	1a9b      	subgt	r3, r3, r2
 80040c6:	18ed      	addgt	r5, r5, r3
 80040c8:	42b5      	cmp	r5, r6
 80040ca:	d11a      	bne.n	8004102 <_printf_common+0xd2>
 80040cc:	2000      	movs	r0, #0
 80040ce:	e008      	b.n	80040e2 <_printf_common+0xb2>
 80040d0:	2301      	movs	r3, #1
 80040d2:	4652      	mov	r2, sl
 80040d4:	4649      	mov	r1, r9
 80040d6:	4638      	mov	r0, r7
 80040d8:	47c0      	blx	r8
 80040da:	3001      	adds	r0, #1
 80040dc:	d103      	bne.n	80040e6 <_printf_common+0xb6>
 80040de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e6:	3501      	adds	r5, #1
 80040e8:	e7c1      	b.n	800406e <_printf_common+0x3e>
 80040ea:	2030      	movs	r0, #48	; 0x30
 80040ec:	18e1      	adds	r1, r4, r3
 80040ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f8:	4422      	add	r2, r4
 80040fa:	3302      	adds	r3, #2
 80040fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004100:	e7c2      	b.n	8004088 <_printf_common+0x58>
 8004102:	2301      	movs	r3, #1
 8004104:	4622      	mov	r2, r4
 8004106:	4649      	mov	r1, r9
 8004108:	4638      	mov	r0, r7
 800410a:	47c0      	blx	r8
 800410c:	3001      	adds	r0, #1
 800410e:	d0e6      	beq.n	80040de <_printf_common+0xae>
 8004110:	3601      	adds	r6, #1
 8004112:	e7d9      	b.n	80040c8 <_printf_common+0x98>

08004114 <_printf_i>:
 8004114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	7e0f      	ldrb	r7, [r1, #24]
 800411a:	4691      	mov	r9, r2
 800411c:	2f78      	cmp	r7, #120	; 0x78
 800411e:	4680      	mov	r8, r0
 8004120:	460c      	mov	r4, r1
 8004122:	469a      	mov	sl, r3
 8004124:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800412a:	d807      	bhi.n	800413c <_printf_i+0x28>
 800412c:	2f62      	cmp	r7, #98	; 0x62
 800412e:	d80a      	bhi.n	8004146 <_printf_i+0x32>
 8004130:	2f00      	cmp	r7, #0
 8004132:	f000 80d5 	beq.w	80042e0 <_printf_i+0x1cc>
 8004136:	2f58      	cmp	r7, #88	; 0x58
 8004138:	f000 80c1 	beq.w	80042be <_printf_i+0x1aa>
 800413c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004144:	e03a      	b.n	80041bc <_printf_i+0xa8>
 8004146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800414a:	2b15      	cmp	r3, #21
 800414c:	d8f6      	bhi.n	800413c <_printf_i+0x28>
 800414e:	a101      	add	r1, pc, #4	; (adr r1, 8004154 <_printf_i+0x40>)
 8004150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004154:	080041ad 	.word	0x080041ad
 8004158:	080041c1 	.word	0x080041c1
 800415c:	0800413d 	.word	0x0800413d
 8004160:	0800413d 	.word	0x0800413d
 8004164:	0800413d 	.word	0x0800413d
 8004168:	0800413d 	.word	0x0800413d
 800416c:	080041c1 	.word	0x080041c1
 8004170:	0800413d 	.word	0x0800413d
 8004174:	0800413d 	.word	0x0800413d
 8004178:	0800413d 	.word	0x0800413d
 800417c:	0800413d 	.word	0x0800413d
 8004180:	080042c7 	.word	0x080042c7
 8004184:	080041ed 	.word	0x080041ed
 8004188:	08004281 	.word	0x08004281
 800418c:	0800413d 	.word	0x0800413d
 8004190:	0800413d 	.word	0x0800413d
 8004194:	080042e9 	.word	0x080042e9
 8004198:	0800413d 	.word	0x0800413d
 800419c:	080041ed 	.word	0x080041ed
 80041a0:	0800413d 	.word	0x0800413d
 80041a4:	0800413d 	.word	0x0800413d
 80041a8:	08004289 	.word	0x08004289
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	1d1a      	adds	r2, r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	602a      	str	r2, [r5, #0]
 80041b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041bc:	2301      	movs	r3, #1
 80041be:	e0a0      	b.n	8004302 <_printf_i+0x1ee>
 80041c0:	6820      	ldr	r0, [r4, #0]
 80041c2:	682b      	ldr	r3, [r5, #0]
 80041c4:	0607      	lsls	r7, r0, #24
 80041c6:	f103 0104 	add.w	r1, r3, #4
 80041ca:	6029      	str	r1, [r5, #0]
 80041cc:	d501      	bpl.n	80041d2 <_printf_i+0xbe>
 80041ce:	681e      	ldr	r6, [r3, #0]
 80041d0:	e003      	b.n	80041da <_printf_i+0xc6>
 80041d2:	0646      	lsls	r6, r0, #25
 80041d4:	d5fb      	bpl.n	80041ce <_printf_i+0xba>
 80041d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041da:	2e00      	cmp	r6, #0
 80041dc:	da03      	bge.n	80041e6 <_printf_i+0xd2>
 80041de:	232d      	movs	r3, #45	; 0x2d
 80041e0:	4276      	negs	r6, r6
 80041e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e6:	230a      	movs	r3, #10
 80041e8:	4859      	ldr	r0, [pc, #356]	; (8004350 <_printf_i+0x23c>)
 80041ea:	e012      	b.n	8004212 <_printf_i+0xfe>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	1d19      	adds	r1, r3, #4
 80041f2:	6029      	str	r1, [r5, #0]
 80041f4:	0605      	lsls	r5, r0, #24
 80041f6:	d501      	bpl.n	80041fc <_printf_i+0xe8>
 80041f8:	681e      	ldr	r6, [r3, #0]
 80041fa:	e002      	b.n	8004202 <_printf_i+0xee>
 80041fc:	0641      	lsls	r1, r0, #25
 80041fe:	d5fb      	bpl.n	80041f8 <_printf_i+0xe4>
 8004200:	881e      	ldrh	r6, [r3, #0]
 8004202:	2f6f      	cmp	r7, #111	; 0x6f
 8004204:	bf0c      	ite	eq
 8004206:	2308      	moveq	r3, #8
 8004208:	230a      	movne	r3, #10
 800420a:	4851      	ldr	r0, [pc, #324]	; (8004350 <_printf_i+0x23c>)
 800420c:	2100      	movs	r1, #0
 800420e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004212:	6865      	ldr	r5, [r4, #4]
 8004214:	2d00      	cmp	r5, #0
 8004216:	bfa8      	it	ge
 8004218:	6821      	ldrge	r1, [r4, #0]
 800421a:	60a5      	str	r5, [r4, #8]
 800421c:	bfa4      	itt	ge
 800421e:	f021 0104 	bicge.w	r1, r1, #4
 8004222:	6021      	strge	r1, [r4, #0]
 8004224:	b90e      	cbnz	r6, 800422a <_printf_i+0x116>
 8004226:	2d00      	cmp	r5, #0
 8004228:	d04b      	beq.n	80042c2 <_printf_i+0x1ae>
 800422a:	4615      	mov	r5, r2
 800422c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004230:	fb03 6711 	mls	r7, r3, r1, r6
 8004234:	5dc7      	ldrb	r7, [r0, r7]
 8004236:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800423a:	4637      	mov	r7, r6
 800423c:	42bb      	cmp	r3, r7
 800423e:	460e      	mov	r6, r1
 8004240:	d9f4      	bls.n	800422c <_printf_i+0x118>
 8004242:	2b08      	cmp	r3, #8
 8004244:	d10b      	bne.n	800425e <_printf_i+0x14a>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	07de      	lsls	r6, r3, #31
 800424a:	d508      	bpl.n	800425e <_printf_i+0x14a>
 800424c:	6923      	ldr	r3, [r4, #16]
 800424e:	6861      	ldr	r1, [r4, #4]
 8004250:	4299      	cmp	r1, r3
 8004252:	bfde      	ittt	le
 8004254:	2330      	movle	r3, #48	; 0x30
 8004256:	f805 3c01 	strble.w	r3, [r5, #-1]
 800425a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800425e:	1b52      	subs	r2, r2, r5
 8004260:	6122      	str	r2, [r4, #16]
 8004262:	464b      	mov	r3, r9
 8004264:	4621      	mov	r1, r4
 8004266:	4640      	mov	r0, r8
 8004268:	f8cd a000 	str.w	sl, [sp]
 800426c:	aa03      	add	r2, sp, #12
 800426e:	f7ff fedf 	bl	8004030 <_printf_common>
 8004272:	3001      	adds	r0, #1
 8004274:	d14a      	bne.n	800430c <_printf_i+0x1f8>
 8004276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800427a:	b004      	add	sp, #16
 800427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	2778      	movs	r7, #120	; 0x78
 800428a:	4832      	ldr	r0, [pc, #200]	; (8004354 <_printf_i+0x240>)
 800428c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	6829      	ldr	r1, [r5, #0]
 8004294:	061f      	lsls	r7, r3, #24
 8004296:	f851 6b04 	ldr.w	r6, [r1], #4
 800429a:	d402      	bmi.n	80042a2 <_printf_i+0x18e>
 800429c:	065f      	lsls	r7, r3, #25
 800429e:	bf48      	it	mi
 80042a0:	b2b6      	uxthmi	r6, r6
 80042a2:	07df      	lsls	r7, r3, #31
 80042a4:	bf48      	it	mi
 80042a6:	f043 0320 	orrmi.w	r3, r3, #32
 80042aa:	6029      	str	r1, [r5, #0]
 80042ac:	bf48      	it	mi
 80042ae:	6023      	strmi	r3, [r4, #0]
 80042b0:	b91e      	cbnz	r6, 80042ba <_printf_i+0x1a6>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	f023 0320 	bic.w	r3, r3, #32
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	2310      	movs	r3, #16
 80042bc:	e7a6      	b.n	800420c <_printf_i+0xf8>
 80042be:	4824      	ldr	r0, [pc, #144]	; (8004350 <_printf_i+0x23c>)
 80042c0:	e7e4      	b.n	800428c <_printf_i+0x178>
 80042c2:	4615      	mov	r5, r2
 80042c4:	e7bd      	b.n	8004242 <_printf_i+0x12e>
 80042c6:	682b      	ldr	r3, [r5, #0]
 80042c8:	6826      	ldr	r6, [r4, #0]
 80042ca:	1d18      	adds	r0, r3, #4
 80042cc:	6961      	ldr	r1, [r4, #20]
 80042ce:	6028      	str	r0, [r5, #0]
 80042d0:	0635      	lsls	r5, r6, #24
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	d501      	bpl.n	80042da <_printf_i+0x1c6>
 80042d6:	6019      	str	r1, [r3, #0]
 80042d8:	e002      	b.n	80042e0 <_printf_i+0x1cc>
 80042da:	0670      	lsls	r0, r6, #25
 80042dc:	d5fb      	bpl.n	80042d6 <_printf_i+0x1c2>
 80042de:	8019      	strh	r1, [r3, #0]
 80042e0:	2300      	movs	r3, #0
 80042e2:	4615      	mov	r5, r2
 80042e4:	6123      	str	r3, [r4, #16]
 80042e6:	e7bc      	b.n	8004262 <_printf_i+0x14e>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	2100      	movs	r1, #0
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	602a      	str	r2, [r5, #0]
 80042f0:	681d      	ldr	r5, [r3, #0]
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	4628      	mov	r0, r5
 80042f6:	f000 f9db 	bl	80046b0 <memchr>
 80042fa:	b108      	cbz	r0, 8004300 <_printf_i+0x1ec>
 80042fc:	1b40      	subs	r0, r0, r5
 80042fe:	6060      	str	r0, [r4, #4]
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	2300      	movs	r3, #0
 8004306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430a:	e7aa      	b.n	8004262 <_printf_i+0x14e>
 800430c:	462a      	mov	r2, r5
 800430e:	4649      	mov	r1, r9
 8004310:	4640      	mov	r0, r8
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	47d0      	blx	sl
 8004316:	3001      	adds	r0, #1
 8004318:	d0ad      	beq.n	8004276 <_printf_i+0x162>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	079b      	lsls	r3, r3, #30
 800431e:	d413      	bmi.n	8004348 <_printf_i+0x234>
 8004320:	68e0      	ldr	r0, [r4, #12]
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	4298      	cmp	r0, r3
 8004326:	bfb8      	it	lt
 8004328:	4618      	movlt	r0, r3
 800432a:	e7a6      	b.n	800427a <_printf_i+0x166>
 800432c:	2301      	movs	r3, #1
 800432e:	4632      	mov	r2, r6
 8004330:	4649      	mov	r1, r9
 8004332:	4640      	mov	r0, r8
 8004334:	47d0      	blx	sl
 8004336:	3001      	adds	r0, #1
 8004338:	d09d      	beq.n	8004276 <_printf_i+0x162>
 800433a:	3501      	adds	r5, #1
 800433c:	68e3      	ldr	r3, [r4, #12]
 800433e:	9903      	ldr	r1, [sp, #12]
 8004340:	1a5b      	subs	r3, r3, r1
 8004342:	42ab      	cmp	r3, r5
 8004344:	dcf2      	bgt.n	800432c <_printf_i+0x218>
 8004346:	e7eb      	b.n	8004320 <_printf_i+0x20c>
 8004348:	2500      	movs	r5, #0
 800434a:	f104 0619 	add.w	r6, r4, #25
 800434e:	e7f5      	b.n	800433c <_printf_i+0x228>
 8004350:	08005053 	.word	0x08005053
 8004354:	08005064 	.word	0x08005064

08004358 <__sflush_r>:
 8004358:	898a      	ldrh	r2, [r1, #12]
 800435a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435c:	4605      	mov	r5, r0
 800435e:	0710      	lsls	r0, r2, #28
 8004360:	460c      	mov	r4, r1
 8004362:	d457      	bmi.n	8004414 <__sflush_r+0xbc>
 8004364:	684b      	ldr	r3, [r1, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	dc04      	bgt.n	8004374 <__sflush_r+0x1c>
 800436a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	dc01      	bgt.n	8004374 <__sflush_r+0x1c>
 8004370:	2000      	movs	r0, #0
 8004372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004376:	2e00      	cmp	r6, #0
 8004378:	d0fa      	beq.n	8004370 <__sflush_r+0x18>
 800437a:	2300      	movs	r3, #0
 800437c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004380:	682f      	ldr	r7, [r5, #0]
 8004382:	6a21      	ldr	r1, [r4, #32]
 8004384:	602b      	str	r3, [r5, #0]
 8004386:	d032      	beq.n	80043ee <__sflush_r+0x96>
 8004388:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	075a      	lsls	r2, r3, #29
 800438e:	d505      	bpl.n	800439c <__sflush_r+0x44>
 8004390:	6863      	ldr	r3, [r4, #4]
 8004392:	1ac0      	subs	r0, r0, r3
 8004394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004396:	b10b      	cbz	r3, 800439c <__sflush_r+0x44>
 8004398:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800439a:	1ac0      	subs	r0, r0, r3
 800439c:	2300      	movs	r3, #0
 800439e:	4602      	mov	r2, r0
 80043a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043a2:	4628      	mov	r0, r5
 80043a4:	6a21      	ldr	r1, [r4, #32]
 80043a6:	47b0      	blx	r6
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	d106      	bne.n	80043bc <__sflush_r+0x64>
 80043ae:	6829      	ldr	r1, [r5, #0]
 80043b0:	291d      	cmp	r1, #29
 80043b2:	d82b      	bhi.n	800440c <__sflush_r+0xb4>
 80043b4:	4a28      	ldr	r2, [pc, #160]	; (8004458 <__sflush_r+0x100>)
 80043b6:	410a      	asrs	r2, r1
 80043b8:	07d6      	lsls	r6, r2, #31
 80043ba:	d427      	bmi.n	800440c <__sflush_r+0xb4>
 80043bc:	2200      	movs	r2, #0
 80043be:	6062      	str	r2, [r4, #4]
 80043c0:	6922      	ldr	r2, [r4, #16]
 80043c2:	04d9      	lsls	r1, r3, #19
 80043c4:	6022      	str	r2, [r4, #0]
 80043c6:	d504      	bpl.n	80043d2 <__sflush_r+0x7a>
 80043c8:	1c42      	adds	r2, r0, #1
 80043ca:	d101      	bne.n	80043d0 <__sflush_r+0x78>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	b903      	cbnz	r3, 80043d2 <__sflush_r+0x7a>
 80043d0:	6560      	str	r0, [r4, #84]	; 0x54
 80043d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043d4:	602f      	str	r7, [r5, #0]
 80043d6:	2900      	cmp	r1, #0
 80043d8:	d0ca      	beq.n	8004370 <__sflush_r+0x18>
 80043da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043de:	4299      	cmp	r1, r3
 80043e0:	d002      	beq.n	80043e8 <__sflush_r+0x90>
 80043e2:	4628      	mov	r0, r5
 80043e4:	f000 f988 	bl	80046f8 <_free_r>
 80043e8:	2000      	movs	r0, #0
 80043ea:	6360      	str	r0, [r4, #52]	; 0x34
 80043ec:	e7c1      	b.n	8004372 <__sflush_r+0x1a>
 80043ee:	2301      	movs	r3, #1
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b0      	blx	r6
 80043f4:	1c41      	adds	r1, r0, #1
 80043f6:	d1c8      	bne.n	800438a <__sflush_r+0x32>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0c5      	beq.n	800438a <__sflush_r+0x32>
 80043fe:	2b1d      	cmp	r3, #29
 8004400:	d001      	beq.n	8004406 <__sflush_r+0xae>
 8004402:	2b16      	cmp	r3, #22
 8004404:	d101      	bne.n	800440a <__sflush_r+0xb2>
 8004406:	602f      	str	r7, [r5, #0]
 8004408:	e7b2      	b.n	8004370 <__sflush_r+0x18>
 800440a:	89a3      	ldrh	r3, [r4, #12]
 800440c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	e7ae      	b.n	8004372 <__sflush_r+0x1a>
 8004414:	690f      	ldr	r7, [r1, #16]
 8004416:	2f00      	cmp	r7, #0
 8004418:	d0aa      	beq.n	8004370 <__sflush_r+0x18>
 800441a:	0793      	lsls	r3, r2, #30
 800441c:	bf18      	it	ne
 800441e:	2300      	movne	r3, #0
 8004420:	680e      	ldr	r6, [r1, #0]
 8004422:	bf08      	it	eq
 8004424:	694b      	ldreq	r3, [r1, #20]
 8004426:	1bf6      	subs	r6, r6, r7
 8004428:	600f      	str	r7, [r1, #0]
 800442a:	608b      	str	r3, [r1, #8]
 800442c:	2e00      	cmp	r6, #0
 800442e:	dd9f      	ble.n	8004370 <__sflush_r+0x18>
 8004430:	4633      	mov	r3, r6
 8004432:	463a      	mov	r2, r7
 8004434:	4628      	mov	r0, r5
 8004436:	6a21      	ldr	r1, [r4, #32]
 8004438:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800443c:	47e0      	blx	ip
 800443e:	2800      	cmp	r0, #0
 8004440:	dc06      	bgt.n	8004450 <__sflush_r+0xf8>
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	e790      	b.n	8004372 <__sflush_r+0x1a>
 8004450:	4407      	add	r7, r0
 8004452:	1a36      	subs	r6, r6, r0
 8004454:	e7ea      	b.n	800442c <__sflush_r+0xd4>
 8004456:	bf00      	nop
 8004458:	dfbffffe 	.word	0xdfbffffe

0800445c <_fflush_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	690b      	ldr	r3, [r1, #16]
 8004460:	4605      	mov	r5, r0
 8004462:	460c      	mov	r4, r1
 8004464:	b913      	cbnz	r3, 800446c <_fflush_r+0x10>
 8004466:	2500      	movs	r5, #0
 8004468:	4628      	mov	r0, r5
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	b118      	cbz	r0, 8004476 <_fflush_r+0x1a>
 800446e:	6a03      	ldr	r3, [r0, #32]
 8004470:	b90b      	cbnz	r3, 8004476 <_fflush_r+0x1a>
 8004472:	f7ff faa1 	bl	80039b8 <__sinit>
 8004476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f3      	beq.n	8004466 <_fflush_r+0xa>
 800447e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004480:	07d0      	lsls	r0, r2, #31
 8004482:	d404      	bmi.n	800448e <_fflush_r+0x32>
 8004484:	0599      	lsls	r1, r3, #22
 8004486:	d402      	bmi.n	800448e <_fflush_r+0x32>
 8004488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800448a:	f7ff fbb1 	bl	8003bf0 <__retarget_lock_acquire_recursive>
 800448e:	4628      	mov	r0, r5
 8004490:	4621      	mov	r1, r4
 8004492:	f7ff ff61 	bl	8004358 <__sflush_r>
 8004496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004498:	4605      	mov	r5, r0
 800449a:	07da      	lsls	r2, r3, #31
 800449c:	d4e4      	bmi.n	8004468 <_fflush_r+0xc>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	059b      	lsls	r3, r3, #22
 80044a2:	d4e1      	bmi.n	8004468 <_fflush_r+0xc>
 80044a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044a6:	f7ff fba4 	bl	8003bf2 <__retarget_lock_release_recursive>
 80044aa:	e7dd      	b.n	8004468 <_fflush_r+0xc>

080044ac <__malloc_lock>:
 80044ac:	4801      	ldr	r0, [pc, #4]	; (80044b4 <__malloc_lock+0x8>)
 80044ae:	f7ff bb9f 	b.w	8003bf0 <__retarget_lock_acquire_recursive>
 80044b2:	bf00      	nop
 80044b4:	200006b0 	.word	0x200006b0

080044b8 <__malloc_unlock>:
 80044b8:	4801      	ldr	r0, [pc, #4]	; (80044c0 <__malloc_unlock+0x8>)
 80044ba:	f7ff bb9a 	b.w	8003bf2 <__retarget_lock_release_recursive>
 80044be:	bf00      	nop
 80044c0:	200006b0 	.word	0x200006b0

080044c4 <__sread>:
 80044c4:	b510      	push	{r4, lr}
 80044c6:	460c      	mov	r4, r1
 80044c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044cc:	f000 f8bc 	bl	8004648 <_read_r>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	bfab      	itete	ge
 80044d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044d6:	89a3      	ldrhlt	r3, [r4, #12]
 80044d8:	181b      	addge	r3, r3, r0
 80044da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044de:	bfac      	ite	ge
 80044e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80044e2:	81a3      	strhlt	r3, [r4, #12]
 80044e4:	bd10      	pop	{r4, pc}

080044e6 <__swrite>:
 80044e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ea:	461f      	mov	r7, r3
 80044ec:	898b      	ldrh	r3, [r1, #12]
 80044ee:	4605      	mov	r5, r0
 80044f0:	05db      	lsls	r3, r3, #23
 80044f2:	460c      	mov	r4, r1
 80044f4:	4616      	mov	r6, r2
 80044f6:	d505      	bpl.n	8004504 <__swrite+0x1e>
 80044f8:	2302      	movs	r3, #2
 80044fa:	2200      	movs	r2, #0
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	f000 f890 	bl	8004624 <_lseek_r>
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	4632      	mov	r2, r6
 8004508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	4628      	mov	r0, r5
 8004510:	463b      	mov	r3, r7
 8004512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800451a:	f000 b8b7 	b.w	800468c <_write_r>

0800451e <__sseek>:
 800451e:	b510      	push	{r4, lr}
 8004520:	460c      	mov	r4, r1
 8004522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004526:	f000 f87d 	bl	8004624 <_lseek_r>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	bf15      	itete	ne
 8004530:	6560      	strne	r0, [r4, #84]	; 0x54
 8004532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800453a:	81a3      	strheq	r3, [r4, #12]
 800453c:	bf18      	it	ne
 800453e:	81a3      	strhne	r3, [r4, #12]
 8004540:	bd10      	pop	{r4, pc}

08004542 <__sclose>:
 8004542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004546:	f000 b85d 	b.w	8004604 <_close_r>
	...

0800454c <fiprintf>:
 800454c:	b40e      	push	{r1, r2, r3}
 800454e:	b503      	push	{r0, r1, lr}
 8004550:	4601      	mov	r1, r0
 8004552:	ab03      	add	r3, sp, #12
 8004554:	4805      	ldr	r0, [pc, #20]	; (800456c <fiprintf+0x20>)
 8004556:	f853 2b04 	ldr.w	r2, [r3], #4
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	f000 f93b 	bl	80047d8 <_vfiprintf_r>
 8004562:	b002      	add	sp, #8
 8004564:	f85d eb04 	ldr.w	lr, [sp], #4
 8004568:	b003      	add	sp, #12
 800456a:	4770      	bx	lr
 800456c:	20000068 	.word	0x20000068

08004570 <_realloc_r>:
 8004570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004574:	4680      	mov	r8, r0
 8004576:	4614      	mov	r4, r2
 8004578:	460e      	mov	r6, r1
 800457a:	b921      	cbnz	r1, 8004586 <_realloc_r+0x16>
 800457c:	4611      	mov	r1, r2
 800457e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004582:	f7ff bcd5 	b.w	8003f30 <_malloc_r>
 8004586:	b92a      	cbnz	r2, 8004594 <_realloc_r+0x24>
 8004588:	f000 f8b6 	bl	80046f8 <_free_r>
 800458c:	4625      	mov	r5, r4
 800458e:	4628      	mov	r0, r5
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	f000 fa3a 	bl	8004a0c <_malloc_usable_size_r>
 8004598:	4284      	cmp	r4, r0
 800459a:	4607      	mov	r7, r0
 800459c:	d802      	bhi.n	80045a4 <_realloc_r+0x34>
 800459e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045a2:	d812      	bhi.n	80045ca <_realloc_r+0x5a>
 80045a4:	4621      	mov	r1, r4
 80045a6:	4640      	mov	r0, r8
 80045a8:	f7ff fcc2 	bl	8003f30 <_malloc_r>
 80045ac:	4605      	mov	r5, r0
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d0ed      	beq.n	800458e <_realloc_r+0x1e>
 80045b2:	42bc      	cmp	r4, r7
 80045b4:	4622      	mov	r2, r4
 80045b6:	4631      	mov	r1, r6
 80045b8:	bf28      	it	cs
 80045ba:	463a      	movcs	r2, r7
 80045bc:	f000 f886 	bl	80046cc <memcpy>
 80045c0:	4631      	mov	r1, r6
 80045c2:	4640      	mov	r0, r8
 80045c4:	f000 f898 	bl	80046f8 <_free_r>
 80045c8:	e7e1      	b.n	800458e <_realloc_r+0x1e>
 80045ca:	4635      	mov	r5, r6
 80045cc:	e7df      	b.n	800458e <_realloc_r+0x1e>

080045ce <memmove>:
 80045ce:	4288      	cmp	r0, r1
 80045d0:	b510      	push	{r4, lr}
 80045d2:	eb01 0402 	add.w	r4, r1, r2
 80045d6:	d902      	bls.n	80045de <memmove+0x10>
 80045d8:	4284      	cmp	r4, r0
 80045da:	4623      	mov	r3, r4
 80045dc:	d807      	bhi.n	80045ee <memmove+0x20>
 80045de:	1e43      	subs	r3, r0, #1
 80045e0:	42a1      	cmp	r1, r4
 80045e2:	d008      	beq.n	80045f6 <memmove+0x28>
 80045e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045ec:	e7f8      	b.n	80045e0 <memmove+0x12>
 80045ee:	4601      	mov	r1, r0
 80045f0:	4402      	add	r2, r0
 80045f2:	428a      	cmp	r2, r1
 80045f4:	d100      	bne.n	80045f8 <memmove+0x2a>
 80045f6:	bd10      	pop	{r4, pc}
 80045f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004600:	e7f7      	b.n	80045f2 <memmove+0x24>
	...

08004604 <_close_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	2300      	movs	r3, #0
 8004608:	4d05      	ldr	r5, [pc, #20]	; (8004620 <_close_r+0x1c>)
 800460a:	4604      	mov	r4, r0
 800460c:	4608      	mov	r0, r1
 800460e:	602b      	str	r3, [r5, #0]
 8004610:	f7fc fb5a 	bl	8000cc8 <_close>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_close_r+0x1a>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	b103      	cbz	r3, 800461e <_close_r+0x1a>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	200006bc 	.word	0x200006bc

08004624 <_lseek_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	2200      	movs	r2, #0
 800462e:	4d05      	ldr	r5, [pc, #20]	; (8004644 <_lseek_r+0x20>)
 8004630:	602a      	str	r2, [r5, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	f7fc fb6c 	bl	8000d10 <_lseek>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_lseek_r+0x1e>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_lseek_r+0x1e>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	200006bc 	.word	0x200006bc

08004648 <_read_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4604      	mov	r4, r0
 800464c:	4608      	mov	r0, r1
 800464e:	4611      	mov	r1, r2
 8004650:	2200      	movs	r2, #0
 8004652:	4d05      	ldr	r5, [pc, #20]	; (8004668 <_read_r+0x20>)
 8004654:	602a      	str	r2, [r5, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f7fc fafd 	bl	8000c56 <_read>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_read_r+0x1e>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_read_r+0x1e>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	200006bc 	.word	0x200006bc

0800466c <_sbrk_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	2300      	movs	r3, #0
 8004670:	4d05      	ldr	r5, [pc, #20]	; (8004688 <_sbrk_r+0x1c>)
 8004672:	4604      	mov	r4, r0
 8004674:	4608      	mov	r0, r1
 8004676:	602b      	str	r3, [r5, #0]
 8004678:	f7fc fb56 	bl	8000d28 <_sbrk>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_sbrk_r+0x1a>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_sbrk_r+0x1a>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	200006bc 	.word	0x200006bc

0800468c <_write_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	2200      	movs	r2, #0
 8004696:	4d05      	ldr	r5, [pc, #20]	; (80046ac <_write_r+0x20>)
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f7fc faf8 	bl	8000c90 <_write>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_write_r+0x1e>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_write_r+0x1e>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	200006bc 	.word	0x200006bc

080046b0 <memchr>:
 80046b0:	4603      	mov	r3, r0
 80046b2:	b510      	push	{r4, lr}
 80046b4:	b2c9      	uxtb	r1, r1
 80046b6:	4402      	add	r2, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	d101      	bne.n	80046c2 <memchr+0x12>
 80046be:	2000      	movs	r0, #0
 80046c0:	e003      	b.n	80046ca <memchr+0x1a>
 80046c2:	7804      	ldrb	r4, [r0, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	428c      	cmp	r4, r1
 80046c8:	d1f6      	bne.n	80046b8 <memchr+0x8>
 80046ca:	bd10      	pop	{r4, pc}

080046cc <memcpy>:
 80046cc:	440a      	add	r2, r1
 80046ce:	4291      	cmp	r1, r2
 80046d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80046d4:	d100      	bne.n	80046d8 <memcpy+0xc>
 80046d6:	4770      	bx	lr
 80046d8:	b510      	push	{r4, lr}
 80046da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046de:	4291      	cmp	r1, r2
 80046e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e4:	d1f9      	bne.n	80046da <memcpy+0xe>
 80046e6:	bd10      	pop	{r4, pc}

080046e8 <abort>:
 80046e8:	2006      	movs	r0, #6
 80046ea:	b508      	push	{r3, lr}
 80046ec:	f000 fad8 	bl	8004ca0 <raise>
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7fc faa6 	bl	8000c42 <_exit>
	...

080046f8 <_free_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4605      	mov	r5, r0
 80046fc:	2900      	cmp	r1, #0
 80046fe:	d040      	beq.n	8004782 <_free_r+0x8a>
 8004700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004704:	1f0c      	subs	r4, r1, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	bfb8      	it	lt
 800470a:	18e4      	addlt	r4, r4, r3
 800470c:	f7ff fece 	bl	80044ac <__malloc_lock>
 8004710:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <_free_r+0x8c>)
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	b933      	cbnz	r3, 8004724 <_free_r+0x2c>
 8004716:	6063      	str	r3, [r4, #4]
 8004718:	6014      	str	r4, [r2, #0]
 800471a:	4628      	mov	r0, r5
 800471c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004720:	f7ff beca 	b.w	80044b8 <__malloc_unlock>
 8004724:	42a3      	cmp	r3, r4
 8004726:	d908      	bls.n	800473a <_free_r+0x42>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	1821      	adds	r1, r4, r0
 800472c:	428b      	cmp	r3, r1
 800472e:	bf01      	itttt	eq
 8004730:	6819      	ldreq	r1, [r3, #0]
 8004732:	685b      	ldreq	r3, [r3, #4]
 8004734:	1809      	addeq	r1, r1, r0
 8004736:	6021      	streq	r1, [r4, #0]
 8004738:	e7ed      	b.n	8004716 <_free_r+0x1e>
 800473a:	461a      	mov	r2, r3
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b10b      	cbz	r3, 8004744 <_free_r+0x4c>
 8004740:	42a3      	cmp	r3, r4
 8004742:	d9fa      	bls.n	800473a <_free_r+0x42>
 8004744:	6811      	ldr	r1, [r2, #0]
 8004746:	1850      	adds	r0, r2, r1
 8004748:	42a0      	cmp	r0, r4
 800474a:	d10b      	bne.n	8004764 <_free_r+0x6c>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	4401      	add	r1, r0
 8004750:	1850      	adds	r0, r2, r1
 8004752:	4283      	cmp	r3, r0
 8004754:	6011      	str	r1, [r2, #0]
 8004756:	d1e0      	bne.n	800471a <_free_r+0x22>
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4408      	add	r0, r1
 800475e:	6010      	str	r0, [r2, #0]
 8004760:	6053      	str	r3, [r2, #4]
 8004762:	e7da      	b.n	800471a <_free_r+0x22>
 8004764:	d902      	bls.n	800476c <_free_r+0x74>
 8004766:	230c      	movs	r3, #12
 8004768:	602b      	str	r3, [r5, #0]
 800476a:	e7d6      	b.n	800471a <_free_r+0x22>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	1821      	adds	r1, r4, r0
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1809      	addeq	r1, r1, r0
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	6054      	str	r4, [r2, #4]
 8004780:	e7cb      	b.n	800471a <_free_r+0x22>
 8004782:	bd38      	pop	{r3, r4, r5, pc}
 8004784:	200006b4 	.word	0x200006b4

08004788 <__sfputc_r>:
 8004788:	6893      	ldr	r3, [r2, #8]
 800478a:	b410      	push	{r4}
 800478c:	3b01      	subs	r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	6093      	str	r3, [r2, #8]
 8004792:	da07      	bge.n	80047a4 <__sfputc_r+0x1c>
 8004794:	6994      	ldr	r4, [r2, #24]
 8004796:	42a3      	cmp	r3, r4
 8004798:	db01      	blt.n	800479e <__sfputc_r+0x16>
 800479a:	290a      	cmp	r1, #10
 800479c:	d102      	bne.n	80047a4 <__sfputc_r+0x1c>
 800479e:	bc10      	pop	{r4}
 80047a0:	f000 b93c 	b.w	8004a1c <__swbuf_r>
 80047a4:	6813      	ldr	r3, [r2, #0]
 80047a6:	1c58      	adds	r0, r3, #1
 80047a8:	6010      	str	r0, [r2, #0]
 80047aa:	7019      	strb	r1, [r3, #0]
 80047ac:	4608      	mov	r0, r1
 80047ae:	bc10      	pop	{r4}
 80047b0:	4770      	bx	lr

080047b2 <__sfputs_r>:
 80047b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	18d5      	adds	r5, r2, r3
 80047bc:	42ac      	cmp	r4, r5
 80047be:	d101      	bne.n	80047c4 <__sfputs_r+0x12>
 80047c0:	2000      	movs	r0, #0
 80047c2:	e007      	b.n	80047d4 <__sfputs_r+0x22>
 80047c4:	463a      	mov	r2, r7
 80047c6:	4630      	mov	r0, r6
 80047c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047cc:	f7ff ffdc 	bl	8004788 <__sfputc_r>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d1f3      	bne.n	80047bc <__sfputs_r+0xa>
 80047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d8 <_vfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	460d      	mov	r5, r1
 80047de:	4614      	mov	r4, r2
 80047e0:	4698      	mov	r8, r3
 80047e2:	4606      	mov	r6, r0
 80047e4:	b09d      	sub	sp, #116	; 0x74
 80047e6:	b118      	cbz	r0, 80047f0 <_vfiprintf_r+0x18>
 80047e8:	6a03      	ldr	r3, [r0, #32]
 80047ea:	b90b      	cbnz	r3, 80047f0 <_vfiprintf_r+0x18>
 80047ec:	f7ff f8e4 	bl	80039b8 <__sinit>
 80047f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047f2:	07d9      	lsls	r1, r3, #31
 80047f4:	d405      	bmi.n	8004802 <_vfiprintf_r+0x2a>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	059a      	lsls	r2, r3, #22
 80047fa:	d402      	bmi.n	8004802 <_vfiprintf_r+0x2a>
 80047fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047fe:	f7ff f9f7 	bl	8003bf0 <__retarget_lock_acquire_recursive>
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	071b      	lsls	r3, r3, #28
 8004806:	d501      	bpl.n	800480c <_vfiprintf_r+0x34>
 8004808:	692b      	ldr	r3, [r5, #16]
 800480a:	b99b      	cbnz	r3, 8004834 <_vfiprintf_r+0x5c>
 800480c:	4629      	mov	r1, r5
 800480e:	4630      	mov	r0, r6
 8004810:	f000 f942 	bl	8004a98 <__swsetup_r>
 8004814:	b170      	cbz	r0, 8004834 <_vfiprintf_r+0x5c>
 8004816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004818:	07dc      	lsls	r4, r3, #31
 800481a:	d504      	bpl.n	8004826 <_vfiprintf_r+0x4e>
 800481c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004820:	b01d      	add	sp, #116	; 0x74
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004826:	89ab      	ldrh	r3, [r5, #12]
 8004828:	0598      	lsls	r0, r3, #22
 800482a:	d4f7      	bmi.n	800481c <_vfiprintf_r+0x44>
 800482c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800482e:	f7ff f9e0 	bl	8003bf2 <__retarget_lock_release_recursive>
 8004832:	e7f3      	b.n	800481c <_vfiprintf_r+0x44>
 8004834:	2300      	movs	r3, #0
 8004836:	9309      	str	r3, [sp, #36]	; 0x24
 8004838:	2320      	movs	r3, #32
 800483a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800483e:	2330      	movs	r3, #48	; 0x30
 8004840:	f04f 0901 	mov.w	r9, #1
 8004844:	f8cd 800c 	str.w	r8, [sp, #12]
 8004848:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80049f8 <_vfiprintf_r+0x220>
 800484c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004850:	4623      	mov	r3, r4
 8004852:	469a      	mov	sl, r3
 8004854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004858:	b10a      	cbz	r2, 800485e <_vfiprintf_r+0x86>
 800485a:	2a25      	cmp	r2, #37	; 0x25
 800485c:	d1f9      	bne.n	8004852 <_vfiprintf_r+0x7a>
 800485e:	ebba 0b04 	subs.w	fp, sl, r4
 8004862:	d00b      	beq.n	800487c <_vfiprintf_r+0xa4>
 8004864:	465b      	mov	r3, fp
 8004866:	4622      	mov	r2, r4
 8004868:	4629      	mov	r1, r5
 800486a:	4630      	mov	r0, r6
 800486c:	f7ff ffa1 	bl	80047b2 <__sfputs_r>
 8004870:	3001      	adds	r0, #1
 8004872:	f000 80a9 	beq.w	80049c8 <_vfiprintf_r+0x1f0>
 8004876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004878:	445a      	add	r2, fp
 800487a:	9209      	str	r2, [sp, #36]	; 0x24
 800487c:	f89a 3000 	ldrb.w	r3, [sl]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a1 	beq.w	80049c8 <_vfiprintf_r+0x1f0>
 8004886:	2300      	movs	r3, #0
 8004888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800488c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004890:	f10a 0a01 	add.w	sl, sl, #1
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	9307      	str	r3, [sp, #28]
 8004898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800489c:	931a      	str	r3, [sp, #104]	; 0x68
 800489e:	4654      	mov	r4, sl
 80048a0:	2205      	movs	r2, #5
 80048a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a6:	4854      	ldr	r0, [pc, #336]	; (80049f8 <_vfiprintf_r+0x220>)
 80048a8:	f7ff ff02 	bl	80046b0 <memchr>
 80048ac:	9a04      	ldr	r2, [sp, #16]
 80048ae:	b9d8      	cbnz	r0, 80048e8 <_vfiprintf_r+0x110>
 80048b0:	06d1      	lsls	r1, r2, #27
 80048b2:	bf44      	itt	mi
 80048b4:	2320      	movmi	r3, #32
 80048b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ba:	0713      	lsls	r3, r2, #28
 80048bc:	bf44      	itt	mi
 80048be:	232b      	movmi	r3, #43	; 0x2b
 80048c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048c4:	f89a 3000 	ldrb.w	r3, [sl]
 80048c8:	2b2a      	cmp	r3, #42	; 0x2a
 80048ca:	d015      	beq.n	80048f8 <_vfiprintf_r+0x120>
 80048cc:	4654      	mov	r4, sl
 80048ce:	2000      	movs	r0, #0
 80048d0:	f04f 0c0a 	mov.w	ip, #10
 80048d4:	9a07      	ldr	r2, [sp, #28]
 80048d6:	4621      	mov	r1, r4
 80048d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048dc:	3b30      	subs	r3, #48	; 0x30
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d94d      	bls.n	800497e <_vfiprintf_r+0x1a6>
 80048e2:	b1b0      	cbz	r0, 8004912 <_vfiprintf_r+0x13a>
 80048e4:	9207      	str	r2, [sp, #28]
 80048e6:	e014      	b.n	8004912 <_vfiprintf_r+0x13a>
 80048e8:	eba0 0308 	sub.w	r3, r0, r8
 80048ec:	fa09 f303 	lsl.w	r3, r9, r3
 80048f0:	4313      	orrs	r3, r2
 80048f2:	46a2      	mov	sl, r4
 80048f4:	9304      	str	r3, [sp, #16]
 80048f6:	e7d2      	b.n	800489e <_vfiprintf_r+0xc6>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	1d19      	adds	r1, r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	9103      	str	r1, [sp, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfbb      	ittet	lt
 8004904:	425b      	neglt	r3, r3
 8004906:	f042 0202 	orrlt.w	r2, r2, #2
 800490a:	9307      	strge	r3, [sp, #28]
 800490c:	9307      	strlt	r3, [sp, #28]
 800490e:	bfb8      	it	lt
 8004910:	9204      	strlt	r2, [sp, #16]
 8004912:	7823      	ldrb	r3, [r4, #0]
 8004914:	2b2e      	cmp	r3, #46	; 0x2e
 8004916:	d10c      	bne.n	8004932 <_vfiprintf_r+0x15a>
 8004918:	7863      	ldrb	r3, [r4, #1]
 800491a:	2b2a      	cmp	r3, #42	; 0x2a
 800491c:	d134      	bne.n	8004988 <_vfiprintf_r+0x1b0>
 800491e:	9b03      	ldr	r3, [sp, #12]
 8004920:	3402      	adds	r4, #2
 8004922:	1d1a      	adds	r2, r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	9203      	str	r2, [sp, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	bfb8      	it	lt
 800492c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049fc <_vfiprintf_r+0x224>
 8004936:	2203      	movs	r2, #3
 8004938:	4650      	mov	r0, sl
 800493a:	7821      	ldrb	r1, [r4, #0]
 800493c:	f7ff feb8 	bl	80046b0 <memchr>
 8004940:	b138      	cbz	r0, 8004952 <_vfiprintf_r+0x17a>
 8004942:	2240      	movs	r2, #64	; 0x40
 8004944:	9b04      	ldr	r3, [sp, #16]
 8004946:	eba0 000a 	sub.w	r0, r0, sl
 800494a:	4082      	lsls	r2, r0
 800494c:	4313      	orrs	r3, r2
 800494e:	3401      	adds	r4, #1
 8004950:	9304      	str	r3, [sp, #16]
 8004952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004956:	2206      	movs	r2, #6
 8004958:	4829      	ldr	r0, [pc, #164]	; (8004a00 <_vfiprintf_r+0x228>)
 800495a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800495e:	f7ff fea7 	bl	80046b0 <memchr>
 8004962:	2800      	cmp	r0, #0
 8004964:	d03f      	beq.n	80049e6 <_vfiprintf_r+0x20e>
 8004966:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <_vfiprintf_r+0x22c>)
 8004968:	bb1b      	cbnz	r3, 80049b2 <_vfiprintf_r+0x1da>
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	3307      	adds	r3, #7
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	3308      	adds	r3, #8
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004978:	443b      	add	r3, r7
 800497a:	9309      	str	r3, [sp, #36]	; 0x24
 800497c:	e768      	b.n	8004850 <_vfiprintf_r+0x78>
 800497e:	460c      	mov	r4, r1
 8004980:	2001      	movs	r0, #1
 8004982:	fb0c 3202 	mla	r2, ip, r2, r3
 8004986:	e7a6      	b.n	80048d6 <_vfiprintf_r+0xfe>
 8004988:	2300      	movs	r3, #0
 800498a:	f04f 0c0a 	mov.w	ip, #10
 800498e:	4619      	mov	r1, r3
 8004990:	3401      	adds	r4, #1
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	4620      	mov	r0, r4
 8004996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800499a:	3a30      	subs	r2, #48	; 0x30
 800499c:	2a09      	cmp	r2, #9
 800499e:	d903      	bls.n	80049a8 <_vfiprintf_r+0x1d0>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0c6      	beq.n	8004932 <_vfiprintf_r+0x15a>
 80049a4:	9105      	str	r1, [sp, #20]
 80049a6:	e7c4      	b.n	8004932 <_vfiprintf_r+0x15a>
 80049a8:	4604      	mov	r4, r0
 80049aa:	2301      	movs	r3, #1
 80049ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80049b0:	e7f0      	b.n	8004994 <_vfiprintf_r+0x1bc>
 80049b2:	ab03      	add	r3, sp, #12
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	462a      	mov	r2, r5
 80049b8:	4630      	mov	r0, r6
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <_vfiprintf_r+0x230>)
 80049bc:	a904      	add	r1, sp, #16
 80049be:	f3af 8000 	nop.w
 80049c2:	4607      	mov	r7, r0
 80049c4:	1c78      	adds	r0, r7, #1
 80049c6:	d1d6      	bne.n	8004976 <_vfiprintf_r+0x19e>
 80049c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049ca:	07d9      	lsls	r1, r3, #31
 80049cc:	d405      	bmi.n	80049da <_vfiprintf_r+0x202>
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	059a      	lsls	r2, r3, #22
 80049d2:	d402      	bmi.n	80049da <_vfiprintf_r+0x202>
 80049d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049d6:	f7ff f90c 	bl	8003bf2 <__retarget_lock_release_recursive>
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	065b      	lsls	r3, r3, #25
 80049de:	f53f af1d 	bmi.w	800481c <_vfiprintf_r+0x44>
 80049e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049e4:	e71c      	b.n	8004820 <_vfiprintf_r+0x48>
 80049e6:	ab03      	add	r3, sp, #12
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	462a      	mov	r2, r5
 80049ec:	4630      	mov	r0, r6
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <_vfiprintf_r+0x230>)
 80049f0:	a904      	add	r1, sp, #16
 80049f2:	f7ff fb8f 	bl	8004114 <_printf_i>
 80049f6:	e7e4      	b.n	80049c2 <_vfiprintf_r+0x1ea>
 80049f8:	08005042 	.word	0x08005042
 80049fc:	08005048 	.word	0x08005048
 8004a00:	0800504c 	.word	0x0800504c
 8004a04:	00000000 	.word	0x00000000
 8004a08:	080047b3 	.word	0x080047b3

08004a0c <_malloc_usable_size_r>:
 8004a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a10:	1f18      	subs	r0, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfbc      	itt	lt
 8004a16:	580b      	ldrlt	r3, [r1, r0]
 8004a18:	18c0      	addlt	r0, r0, r3
 8004a1a:	4770      	bx	lr

08004a1c <__swbuf_r>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	460e      	mov	r6, r1
 8004a20:	4614      	mov	r4, r2
 8004a22:	4605      	mov	r5, r0
 8004a24:	b118      	cbz	r0, 8004a2e <__swbuf_r+0x12>
 8004a26:	6a03      	ldr	r3, [r0, #32]
 8004a28:	b90b      	cbnz	r3, 8004a2e <__swbuf_r+0x12>
 8004a2a:	f7fe ffc5 	bl	80039b8 <__sinit>
 8004a2e:	69a3      	ldr	r3, [r4, #24]
 8004a30:	60a3      	str	r3, [r4, #8]
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	071a      	lsls	r2, r3, #28
 8004a36:	d525      	bpl.n	8004a84 <__swbuf_r+0x68>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	b31b      	cbz	r3, 8004a84 <__swbuf_r+0x68>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	6922      	ldr	r2, [r4, #16]
 8004a40:	b2f6      	uxtb	r6, r6
 8004a42:	1a98      	subs	r0, r3, r2
 8004a44:	6963      	ldr	r3, [r4, #20]
 8004a46:	4637      	mov	r7, r6
 8004a48:	4283      	cmp	r3, r0
 8004a4a:	dc04      	bgt.n	8004a56 <__swbuf_r+0x3a>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f7ff fd04 	bl	800445c <_fflush_r>
 8004a54:	b9e0      	cbnz	r0, 8004a90 <__swbuf_r+0x74>
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	60a3      	str	r3, [r4, #8]
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	701e      	strb	r6, [r3, #0]
 8004a64:	6962      	ldr	r2, [r4, #20]
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d004      	beq.n	8004a76 <__swbuf_r+0x5a>
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	07db      	lsls	r3, r3, #31
 8004a70:	d506      	bpl.n	8004a80 <__swbuf_r+0x64>
 8004a72:	2e0a      	cmp	r6, #10
 8004a74:	d104      	bne.n	8004a80 <__swbuf_r+0x64>
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7ff fcef 	bl	800445c <_fflush_r>
 8004a7e:	b938      	cbnz	r0, 8004a90 <__swbuf_r+0x74>
 8004a80:	4638      	mov	r0, r7
 8004a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a84:	4621      	mov	r1, r4
 8004a86:	4628      	mov	r0, r5
 8004a88:	f000 f806 	bl	8004a98 <__swsetup_r>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d0d5      	beq.n	8004a3c <__swbuf_r+0x20>
 8004a90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a94:	e7f4      	b.n	8004a80 <__swbuf_r+0x64>
	...

08004a98 <__swsetup_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4b2a      	ldr	r3, [pc, #168]	; (8004b44 <__swsetup_r+0xac>)
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	b118      	cbz	r0, 8004aac <__swsetup_r+0x14>
 8004aa4:	6a03      	ldr	r3, [r0, #32]
 8004aa6:	b90b      	cbnz	r3, 8004aac <__swsetup_r+0x14>
 8004aa8:	f7fe ff86 	bl	80039b8 <__sinit>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ab2:	0718      	lsls	r0, r3, #28
 8004ab4:	d422      	bmi.n	8004afc <__swsetup_r+0x64>
 8004ab6:	06d9      	lsls	r1, r3, #27
 8004ab8:	d407      	bmi.n	8004aca <__swsetup_r+0x32>
 8004aba:	2309      	movs	r3, #9
 8004abc:	602b      	str	r3, [r5, #0]
 8004abe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	e034      	b.n	8004b34 <__swsetup_r+0x9c>
 8004aca:	0758      	lsls	r0, r3, #29
 8004acc:	d512      	bpl.n	8004af4 <__swsetup_r+0x5c>
 8004ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ad0:	b141      	cbz	r1, 8004ae4 <__swsetup_r+0x4c>
 8004ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	d002      	beq.n	8004ae0 <__swsetup_r+0x48>
 8004ada:	4628      	mov	r0, r5
 8004adc:	f7ff fe0c 	bl	80046f8 <_free_r>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	2300      	movs	r3, #0
 8004aee:	6063      	str	r3, [r4, #4]
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	89a3      	ldrh	r3, [r4, #12]
 8004af6:	f043 0308 	orr.w	r3, r3, #8
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	b94b      	cbnz	r3, 8004b14 <__swsetup_r+0x7c>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b0a:	d003      	beq.n	8004b14 <__swsetup_r+0x7c>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 f83f 	bl	8004b92 <__smakebuf_r>
 8004b14:	89a0      	ldrh	r0, [r4, #12]
 8004b16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b1a:	f010 0301 	ands.w	r3, r0, #1
 8004b1e:	d00a      	beq.n	8004b36 <__swsetup_r+0x9e>
 8004b20:	2300      	movs	r3, #0
 8004b22:	60a3      	str	r3, [r4, #8]
 8004b24:	6963      	ldr	r3, [r4, #20]
 8004b26:	425b      	negs	r3, r3
 8004b28:	61a3      	str	r3, [r4, #24]
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	b943      	cbnz	r3, 8004b40 <__swsetup_r+0xa8>
 8004b2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b32:	d1c4      	bne.n	8004abe <__swsetup_r+0x26>
 8004b34:	bd38      	pop	{r3, r4, r5, pc}
 8004b36:	0781      	lsls	r1, r0, #30
 8004b38:	bf58      	it	pl
 8004b3a:	6963      	ldrpl	r3, [r4, #20]
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	e7f4      	b.n	8004b2a <__swsetup_r+0x92>
 8004b40:	2000      	movs	r0, #0
 8004b42:	e7f7      	b.n	8004b34 <__swsetup_r+0x9c>
 8004b44:	20000068 	.word	0x20000068

08004b48 <__swhatbuf_r>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b50:	4615      	mov	r5, r2
 8004b52:	2900      	cmp	r1, #0
 8004b54:	461e      	mov	r6, r3
 8004b56:	b096      	sub	sp, #88	; 0x58
 8004b58:	da0c      	bge.n	8004b74 <__swhatbuf_r+0x2c>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b62:	bf0c      	ite	eq
 8004b64:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b68:	2340      	movne	r3, #64	; 0x40
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	6031      	str	r1, [r6, #0]
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	b016      	add	sp, #88	; 0x58
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	466a      	mov	r2, sp
 8004b76:	f000 f849 	bl	8004c0c <_fstat_r>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	dbed      	blt.n	8004b5a <__swhatbuf_r+0x12>
 8004b7e:	9901      	ldr	r1, [sp, #4]
 8004b80:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b84:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b88:	4259      	negs	r1, r3
 8004b8a:	4159      	adcs	r1, r3
 8004b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b90:	e7eb      	b.n	8004b6a <__swhatbuf_r+0x22>

08004b92 <__smakebuf_r>:
 8004b92:	898b      	ldrh	r3, [r1, #12]
 8004b94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b96:	079d      	lsls	r5, r3, #30
 8004b98:	4606      	mov	r6, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	d507      	bpl.n	8004bae <__smakebuf_r+0x1c>
 8004b9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	6163      	str	r3, [r4, #20]
 8004baa:	b002      	add	sp, #8
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
 8004bae:	466a      	mov	r2, sp
 8004bb0:	ab01      	add	r3, sp, #4
 8004bb2:	f7ff ffc9 	bl	8004b48 <__swhatbuf_r>
 8004bb6:	9900      	ldr	r1, [sp, #0]
 8004bb8:	4605      	mov	r5, r0
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7ff f9b8 	bl	8003f30 <_malloc_r>
 8004bc0:	b948      	cbnz	r0, 8004bd6 <__smakebuf_r+0x44>
 8004bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc6:	059a      	lsls	r2, r3, #22
 8004bc8:	d4ef      	bmi.n	8004baa <__smakebuf_r+0x18>
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	e7e3      	b.n	8004b9e <__smakebuf_r+0xc>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	6020      	str	r0, [r4, #0]
 8004bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	9b00      	ldr	r3, [sp, #0]
 8004be2:	6120      	str	r0, [r4, #16]
 8004be4:	6163      	str	r3, [r4, #20]
 8004be6:	9b01      	ldr	r3, [sp, #4]
 8004be8:	b15b      	cbz	r3, 8004c02 <__smakebuf_r+0x70>
 8004bea:	4630      	mov	r0, r6
 8004bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf0:	f000 f81e 	bl	8004c30 <_isatty_r>
 8004bf4:	b128      	cbz	r0, 8004c02 <__smakebuf_r+0x70>
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	f023 0303 	bic.w	r3, r3, #3
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	81a3      	strh	r3, [r4, #12]
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	431d      	orrs	r5, r3
 8004c06:	81a5      	strh	r5, [r4, #12]
 8004c08:	e7cf      	b.n	8004baa <__smakebuf_r+0x18>
	...

08004c0c <_fstat_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4d06      	ldr	r5, [pc, #24]	; (8004c2c <_fstat_r+0x20>)
 8004c12:	4604      	mov	r4, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	f7fc f860 	bl	8000cde <_fstat>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	d102      	bne.n	8004c28 <_fstat_r+0x1c>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	b103      	cbz	r3, 8004c28 <_fstat_r+0x1c>
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200006bc 	.word	0x200006bc

08004c30 <_isatty_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	2300      	movs	r3, #0
 8004c34:	4d05      	ldr	r5, [pc, #20]	; (8004c4c <_isatty_r+0x1c>)
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fc f85e 	bl	8000cfc <_isatty>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_isatty_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_isatty_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	200006bc 	.word	0x200006bc

08004c50 <_raise_r>:
 8004c50:	291f      	cmp	r1, #31
 8004c52:	b538      	push	{r3, r4, r5, lr}
 8004c54:	4604      	mov	r4, r0
 8004c56:	460d      	mov	r5, r1
 8004c58:	d904      	bls.n	8004c64 <_raise_r+0x14>
 8004c5a:	2316      	movs	r3, #22
 8004c5c:	6003      	str	r3, [r0, #0]
 8004c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004c66:	b112      	cbz	r2, 8004c6e <_raise_r+0x1e>
 8004c68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c6c:	b94b      	cbnz	r3, 8004c82 <_raise_r+0x32>
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f000 f830 	bl	8004cd4 <_getpid_r>
 8004c74:	462a      	mov	r2, r5
 8004c76:	4601      	mov	r1, r0
 8004c78:	4620      	mov	r0, r4
 8004c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c7e:	f000 b817 	b.w	8004cb0 <_kill_r>
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d00a      	beq.n	8004c9c <_raise_r+0x4c>
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	d103      	bne.n	8004c92 <_raise_r+0x42>
 8004c8a:	2316      	movs	r3, #22
 8004c8c:	6003      	str	r3, [r0, #0]
 8004c8e:	2001      	movs	r0, #1
 8004c90:	e7e7      	b.n	8004c62 <_raise_r+0x12>
 8004c92:	2400      	movs	r4, #0
 8004c94:	4628      	mov	r0, r5
 8004c96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c9a:	4798      	blx	r3
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e7e0      	b.n	8004c62 <_raise_r+0x12>

08004ca0 <raise>:
 8004ca0:	4b02      	ldr	r3, [pc, #8]	; (8004cac <raise+0xc>)
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	f7ff bfd3 	b.w	8004c50 <_raise_r>
 8004caa:	bf00      	nop
 8004cac:	20000068 	.word	0x20000068

08004cb0 <_kill_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	4d06      	ldr	r5, [pc, #24]	; (8004cd0 <_kill_r+0x20>)
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	602b      	str	r3, [r5, #0]
 8004cbe:	f7fb ffb0 	bl	8000c22 <_kill>
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	d102      	bne.n	8004ccc <_kill_r+0x1c>
 8004cc6:	682b      	ldr	r3, [r5, #0]
 8004cc8:	b103      	cbz	r3, 8004ccc <_kill_r+0x1c>
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	bd38      	pop	{r3, r4, r5, pc}
 8004cce:	bf00      	nop
 8004cd0:	200006bc 	.word	0x200006bc

08004cd4 <_getpid_r>:
 8004cd4:	f7fb bf9e 	b.w	8000c14 <_getpid>

08004cd8 <_gettimeofday>:
 8004cd8:	2258      	movs	r2, #88	; 0x58
 8004cda:	4b02      	ldr	r3, [pc, #8]	; (8004ce4 <_gettimeofday+0xc>)
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	4770      	bx	lr
 8004ce4:	200006bc 	.word	0x200006bc

08004ce8 <_init>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	bf00      	nop
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr

08004cf4 <_fini>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr
