
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008348  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001840  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d70  08009d70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009d70  08009d70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d70  08009d70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  20000010  08009d88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08009d88  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008680  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b80  00000000  00000000  000286fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000618  00000000  00000000  0002aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190ff  00000000  00000000  0002b080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b07c  00000000  00000000  0004417f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090318  00000000  00000000  0004f1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f90  00000000  00000000  000df514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e14a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08008518 	.word	0x08008518

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08008518 	.word	0x08008518

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	; 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	; 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b46      	ldr	r3, [pc, #280]	; (8000974 <MX_GPIO_Init+0x130>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a45      	ldr	r2, [pc, #276]	; (8000974 <MX_GPIO_Init+0x130>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b43      	ldr	r3, [pc, #268]	; (8000974 <MX_GPIO_Init+0x130>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b40      	ldr	r3, [pc, #256]	; (8000974 <MX_GPIO_Init+0x130>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <MX_GPIO_Init+0x130>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_GPIO_Init+0x130>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <MX_GPIO_Init+0x130>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a39      	ldr	r2, [pc, #228]	; (8000974 <MX_GPIO_Init+0x130>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_GPIO_Init+0x130>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	4834      	ldr	r0, [pc, #208]	; (8000978 <MX_GPIO_Init+0x134>)
 80008a8:	f006 fb51 	bl	8006f4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	4832      	ldr	r0, [pc, #200]	; (800097c <MX_GPIO_Init+0x138>)
 80008b2:	f006 fb4c 	bl	8006f4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <MX_GPIO_Init+0x13c>)
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	482b      	ldr	r0, [pc, #172]	; (8000978 <MX_GPIO_Init+0x134>)
 80008ca:	f006 f995 	bl	8006bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008ce:	2320      	movs	r3, #32
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <MX_GPIO_Init+0x140>)
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <MX_GPIO_Init+0x144>)
 80008e2:	f006 f989 	bl	8006bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	481e      	ldr	r0, [pc, #120]	; (8000978 <MX_GPIO_Init+0x134>)
 8000900:	f006 f97a 	bl	8006bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_GPIO_Init+0x140>)
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	4817      	ldr	r0, [pc, #92]	; (8000978 <MX_GPIO_Init+0x134>)
 800091a:	f006 f96d 	bl	8006bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800091e:	2304      	movs	r3, #4
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_GPIO_Init+0x138>)
 8000936:	f006 f95f 	bl	8006bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	2006      	movs	r0, #6
 8000940:	f005 ffe1 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000944:	2006      	movs	r0, #6
 8000946:	f005 fffa 	bl	800693e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	2101      	movs	r1, #1
 800094e:	2017      	movs	r0, #23
 8000950:	f005 ffd9 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000954:	2017      	movs	r0, #23
 8000956:	f005 fff2 	bl	800693e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 800095a:	2202      	movs	r2, #2
 800095c:	2101      	movs	r1, #1
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f005 ffd1 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f005 ffea 	bl	800693e <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800
 800097c:	40011400 	.word	0x40011400
 8000980:	10110000 	.word	0x10110000
 8000984:	10210000 	.word	0x10210000
 8000988:	40011000 	.word	0x40011000

0800098c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <LCD_WR_REG+0x40>)
 8000998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LCD_WR_REG+0x40>)
 80009a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a4:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <LCD_WR_REG+0x44>)
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <LCD_WR_REG+0x40>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <LCD_WR_REG+0x40>)
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <LCD_WR_REG+0x40>)
 80009ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009be:	611a      	str	r2, [r3, #16]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <LCD_WR_DATAX+0x40>)
 80009e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <LCD_WR_DATAX+0x40>)
 80009e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ec:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LCD_WR_DATAX+0x44>)
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <LCD_WR_DATAX+0x40>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <LCD_WR_DATAX+0x40>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <LCD_WR_DATAX+0x40>)
 8000a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a06:	611a      	str	r2, [r3, #16]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40011000 	.word	0x40011000
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a24:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a28:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a2c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a30:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a3e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <LCD_RD_DATA+0x84>)
 8000a50:	889b      	ldrh	r3, [r3, #4]
 8000a52:	f648 1289 	movw	r2, #35209	; 0x8989
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d102      	bne.n	8000a60 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f005 fe58 	bl	8006710 <HAL_Delay>
	t = DATAIN
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a68:	2240      	movs	r2, #64	; 0x40
 8000a6a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LCD_RD_DATA+0x80>)
 8000a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a72:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a76:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a7a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a7e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a82:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <LCD_RD_DATA+0x7c>)
 8000a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8a:	60da      	str	r2, [r3, #12]
	return t;
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	20000030 	.word	0x20000030

08000aa4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	80fb      	strh	r3, [r7, #6]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff68 	bl	800098c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <LCD_WriteReg+0x50>)
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	60d3      	str	r3, [r2, #12]
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <LCD_WriteReg+0x4c>)
 8000ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae4:	611a      	str	r2, [r3, #16]
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40010c00 	.word	0x40010c00

08000af8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff41 	bl	800098c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000b0a:	f7ff ff87 	bl	8000a1c <LCD_RD_DATA>
 8000b0e:	4603      	mov	r3, r0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <LCD_WriteRAM_Prepare+0x14>)
 8000b1e:	891b      	ldrh	r3, [r3, #8]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff33 	bl	800098c <LCD_WR_REG>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000030 	.word	0x20000030

08000b30 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	80fb      	strh	r3, [r7, #6]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000b40:	4b73      	ldr	r3, [pc, #460]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000b42:	889b      	ldrh	r3, [r3, #4]
 8000b44:	f249 3241 	movw	r2, #37697	; 0x9341
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d005      	beq.n	8000b58 <LCD_SetCursor+0x28>
 8000b4c:	4b70      	ldr	r3, [pc, #448]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000b4e:	889b      	ldrh	r3, [r3, #4]
 8000b50:	f245 3210 	movw	r2, #21264	; 0x5310
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d164      	bne.n	8000c22 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000b58:	4b6d      	ldr	r3, [pc, #436]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000b5a:	895b      	ldrh	r3, [r3, #10]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff15 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b62:	4b6c      	ldr	r3, [pc, #432]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	4b6a      	ldr	r3, [pc, #424]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b67      	ldr	r3, [pc, #412]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	4b65      	ldr	r3, [pc, #404]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	4b64      	ldr	r3, [pc, #400]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	4b62      	ldr	r3, [pc, #392]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b90:	4b60      	ldr	r3, [pc, #384]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9e:	615a      	str	r2, [r3, #20]
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4a5d      	ldr	r2, [pc, #372]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	60d3      	str	r3, [r2, #12]
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	4b59      	ldr	r3, [pc, #356]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	4b57      	ldr	r3, [pc, #348]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000bbc:	4b54      	ldr	r3, [pc, #336]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000bbe:	899b      	ldrh	r3, [r3, #12]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fee3 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000bc6:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bcc:	611a      	str	r2, [r3, #16]
 8000bce:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	4b4b      	ldr	r3, [pc, #300]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	4b45      	ldr	r3, [pc, #276]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	60d3      	str	r3, [r2, #12]
 8000c0c:	4b41      	ldr	r3, [pc, #260]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000c20:	e248      	b.n	80010b4 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000c24:	889b      	ldrh	r3, [r3, #4]
 8000c26:	f646 0204 	movw	r2, #26628	; 0x6804
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d176      	bne.n	8000d1c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000c30:	799b      	ldrb	r3, [r3, #6]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d106      	bne.n	8000c44 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	3b01      	subs	r3, #1
 8000c42:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000c44:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000c46:	895b      	ldrh	r3, [r3, #10]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe9f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	611a      	str	r2, [r3, #16]
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	60d3      	str	r3, [r2, #12]
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <LCD_SetCursor+0x1e0>)
 8000caa:	899b      	ldrh	r3, [r3, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fe6d 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	615a      	str	r2, [r3, #20]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	88bb      	ldrh	r3, [r7, #4]
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <LCD_SetCursor+0x1e8>)
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	60d3      	str	r3, [r2, #12]
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <LCD_SetCursor+0x1e4>)
 8000d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0a:	611a      	str	r2, [r3, #16]
}
 8000d0c:	e1d2      	b.n	80010b4 <LCD_SetCursor+0x584>
 8000d0e:	bf00      	nop
 8000d10:	20000030 	.word	0x20000030
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000d1c:	4b99      	ldr	r3, [pc, #612]	; (8000f84 <LCD_SetCursor+0x454>)
 8000d1e:	889b      	ldrh	r3, [r3, #4]
 8000d20:	f641 1263 	movw	r2, #6499	; 0x1963
 8000d24:	4293      	cmp	r3, r2
 8000d26:	f040 8133 	bne.w	8000f90 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000d2a:	4b96      	ldr	r3, [pc, #600]	; (8000f84 <LCD_SetCursor+0x454>)
 8000d2c:	799b      	ldrb	r3, [r3, #6]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d163      	bne.n	8000dfa <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000d32:	4b94      	ldr	r3, [pc, #592]	; (8000f84 <LCD_SetCursor+0x454>)
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d40:	4b90      	ldr	r3, [pc, #576]	; (8000f84 <LCD_SetCursor+0x454>)
 8000d42:	895b      	ldrh	r3, [r3, #10]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fe21 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000d4a:	4b8f      	ldr	r3, [pc, #572]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	4b8d      	ldr	r3, [pc, #564]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b8c      	ldr	r3, [pc, #560]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	4b89      	ldr	r3, [pc, #548]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	4b88      	ldr	r3, [pc, #544]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	4b86      	ldr	r3, [pc, #536]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d72:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000d74:	4b84      	ldr	r3, [pc, #528]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	4b82      	ldr	r3, [pc, #520]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <LCD_SetCursor+0x458>)
 8000d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000d9e:	4b7a      	ldr	r3, [pc, #488]	; (8000f88 <LCD_SetCursor+0x458>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <LCD_SetCursor+0x458>)
 8000da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b75      	ldr	r3, [pc, #468]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	4b70      	ldr	r3, [pc, #448]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dca:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000dcc:	4b6e      	ldr	r3, [pc, #440]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	4b6c      	ldr	r3, [pc, #432]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dda:	615a      	str	r2, [r3, #20]
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4a6b      	ldr	r2, [pc, #428]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	60d3      	str	r3, [r2, #12]
 8000de4:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <LCD_SetCursor+0x458>)
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <LCD_SetCursor+0x458>)
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	4b65      	ldr	r3, [pc, #404]	; (8000f88 <LCD_SetCursor+0x458>)
 8000df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	e061      	b.n	8000ebe <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000dfa:	4b62      	ldr	r3, [pc, #392]	; (8000f84 <LCD_SetCursor+0x454>)
 8000dfc:	895b      	ldrh	r3, [r3, #10]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fdc4 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000e04:	4b60      	ldr	r3, [pc, #384]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b5c      	ldr	r3, [pc, #368]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	4b57      	ldr	r3, [pc, #348]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e30:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e32:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4a51      	ldr	r2, [pc, #324]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	60d3      	str	r3, [r2, #12]
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e64:	611a      	str	r2, [r3, #16]
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <LCD_SetCursor+0x454>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	121a      	asrs	r2, r3, #8
 8000e76:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <LCD_SetCursor+0x458>)
 8000e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <LCD_SetCursor+0x454>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	60d3      	str	r3, [r2, #12]
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ebc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <LCD_SetCursor+0x454>)
 8000ec0:	899b      	ldrh	r3, [r3, #12]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fd62 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <LCD_SetCursor+0x458>)
 8000ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <LCD_SetCursor+0x458>)
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <LCD_SetCursor+0x458>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <LCD_SetCursor+0x458>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <LCD_SetCursor+0x458>)
 8000ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	60d3      	str	r3, [r2, #12]
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <LCD_SetCursor+0x454>)
 8000f34:	885b      	ldrh	r3, [r3, #2]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	121a      	asrs	r2, r3, #8
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <LCD_SetCursor+0x454>)
 8000f64:	885b      	ldrh	r3, [r3, #2]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <LCD_SetCursor+0x45c>)
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	60d3      	str	r3, [r2, #12]
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <LCD_SetCursor+0x458>)
 8000f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f80:	611a      	str	r2, [r3, #16]
}
 8000f82:	e097      	b.n	80010b4 <LCD_SetCursor+0x584>
 8000f84:	20000030 	.word	0x20000030
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000f90:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <LCD_SetCursor+0x58c>)
 8000f92:	889b      	ldrh	r3, [r3, #4]
 8000f94:	f245 5210 	movw	r2, #21776	; 0x5510
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d172      	bne.n	8001082 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <LCD_SetCursor+0x58c>)
 8000f9e:	895b      	ldrh	r3, [r3, #10]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fcf3 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <LCD_SetCursor+0x594>)
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <LCD_SetCursor+0x58c>)
 8000fd6:	895b      	ldrh	r3, [r3, #10]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fcd5 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <LCD_SetCursor+0x590>)
 8000fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <LCD_SetCursor+0x594>)
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	60d3      	str	r3, [r2, #12]
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <LCD_SetCursor+0x590>)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <LCD_SetCursor+0x590>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <LCD_SetCursor+0x590>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <LCD_SetCursor+0x58c>)
 8001010:	899b      	ldrh	r3, [r3, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fcba 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001018:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <LCD_SetCursor+0x590>)
 800101a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <LCD_SetCursor+0x590>)
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <LCD_SetCursor+0x594>)
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <LCD_SetCursor+0x590>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <LCD_SetCursor+0x590>)
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <LCD_SetCursor+0x590>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <LCD_SetCursor+0x58c>)
 8001048:	899b      	ldrh	r3, [r3, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	b29b      	uxth	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fc9c 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <LCD_SetCursor+0x590>)
 8001056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <LCD_SetCursor+0x590>)
 800105e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <LCD_SetCursor+0x594>)
 8001068:	b2db      	uxtb	r3, r3
 800106a:	60d3      	str	r3, [r2, #12]
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <LCD_SetCursor+0x590>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <LCD_SetCursor+0x590>)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <LCD_SetCursor+0x590>)
 800107a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107e:	611a      	str	r2, [r3, #16]
}
 8001080:	e018      	b.n	80010b4 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <LCD_SetCursor+0x58c>)
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d106      	bne.n	8001098 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <LCD_SetCursor+0x58c>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	b29b      	uxth	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <LCD_SetCursor+0x58c>)
 800109a:	895b      	ldrh	r3, [r3, #10]
 800109c:	88fa      	ldrh	r2, [r7, #6]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fcff 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <LCD_SetCursor+0x58c>)
 80010a8:	899b      	ldrh	r3, [r3, #12]
 80010aa:	88ba      	ldrh	r2, [r7, #4]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fcf8 	bl	8000aa4 <LCD_WriteReg>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000030 	.word	0x20000030
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010c00 	.word	0x40010c00

080010c8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80010da:	4b78      	ldr	r3, [pc, #480]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80010dc:	799b      	ldrb	r3, [r3, #6]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d10b      	bne.n	80010fa <LCD_Scan_Dir+0x32>
 80010e2:	4b76      	ldr	r3, [pc, #472]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80010e4:	889b      	ldrh	r3, [r3, #4]
 80010e6:	f646 0204 	movw	r2, #26628	; 0x6804
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d005      	beq.n	80010fa <LCD_Scan_Dir+0x32>
 80010ee:	4b73      	ldr	r3, [pc, #460]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80010f0:	889b      	ldrh	r3, [r3, #4]
 80010f2:	f641 1263 	movw	r2, #6499	; 0x1963
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d109      	bne.n	800110e <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80010fa:	4b70      	ldr	r3, [pc, #448]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80010fc:	799b      	ldrb	r3, [r3, #6]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d134      	bne.n	800116c <LCD_Scan_Dir+0xa4>
 8001102:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001104:	889b      	ldrh	r3, [r3, #4]
 8001106:	f641 1263 	movw	r2, #6499	; 0x1963
 800110a:	4293      	cmp	r3, r2
 800110c:	d12e      	bne.n	800116c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b07      	cmp	r3, #7
 8001112:	d82b      	bhi.n	800116c <LCD_Scan_Dir+0xa4>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <LCD_Scan_Dir+0x54>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	0800113d 	.word	0x0800113d
 8001120:	08001143 	.word	0x08001143
 8001124:	08001149 	.word	0x08001149
 8001128:	0800114f 	.word	0x0800114f
 800112c:	08001155 	.word	0x08001155
 8001130:	0800115b 	.word	0x0800115b
 8001134:	08001161 	.word	0x08001161
 8001138:	08001167 	.word	0x08001167
		{
		case 0:
			dir = 6;
 800113c:	2306      	movs	r3, #6
 800113e:	71fb      	strb	r3, [r7, #7]
			break;
 8001140:	e014      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001142:	2307      	movs	r3, #7
 8001144:	71fb      	strb	r3, [r7, #7]
			break;
 8001146:	e011      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001148:	2304      	movs	r3, #4
 800114a:	71fb      	strb	r3, [r7, #7]
			break;
 800114c:	e00e      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800114e:	2305      	movs	r3, #5
 8001150:	71fb      	strb	r3, [r7, #7]
			break;
 8001152:	e00b      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	71fb      	strb	r3, [r7, #7]
			break;
 8001158:	e008      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
			break;
 800115e:	e005      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001160:	2303      	movs	r3, #3
 8001162:	71fb      	strb	r3, [r7, #7]
			break;
 8001164:	e002      	b.n	800116c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001166:	2302      	movs	r3, #2
 8001168:	71fb      	strb	r3, [r7, #7]
			break;
 800116a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800116e:	889b      	ldrh	r3, [r3, #4]
 8001170:	f249 3241 	movw	r2, #37697	; 0x9341
 8001174:	4293      	cmp	r3, r2
 8001176:	d018      	beq.n	80011aa <LCD_Scan_Dir+0xe2>
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001180:	4293      	cmp	r3, r2
 8001182:	d012      	beq.n	80011aa <LCD_Scan_Dir+0xe2>
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001186:	889b      	ldrh	r3, [r3, #4]
 8001188:	f245 3210 	movw	r2, #21264	; 0x5310
 800118c:	4293      	cmp	r3, r2
 800118e:	d00c      	beq.n	80011aa <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001190:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001192:	889b      	ldrh	r3, [r3, #4]
 8001194:	f245 5210 	movw	r2, #21776	; 0x5510
 8001198:	4293      	cmp	r3, r2
 800119a:	d006      	beq.n	80011aa <LCD_Scan_Dir+0xe2>
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	f641 1263 	movw	r2, #6499	; 0x1963
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f040 8250 	bne.w	800164a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d836      	bhi.n	800121e <LCD_Scan_Dir+0x156>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <LCD_Scan_Dir+0xf0>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	0800121f 	.word	0x0800121f
 80011bc:	080011d9 	.word	0x080011d9
 80011c0:	080011e3 	.word	0x080011e3
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	080011f7 	.word	0x080011f7
 80011cc:	08001201 	.word	0x08001201
 80011d0:	0800120b 	.word	0x0800120b
 80011d4:	08001215 	.word	0x08001215
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011de:	81fb      	strh	r3, [r7, #14]
			break;
 80011e0:	e01d      	b.n	800121e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e8:	81fb      	strh	r3, [r7, #14]
			break;
 80011ea:	e018      	b.n	800121e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011f2:	81fb      	strh	r3, [r7, #14]
			break;
 80011f4:	e013      	b.n	800121e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	81fb      	strh	r3, [r7, #14]
			break;
 80011fe:	e00e      	b.n	800121e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001206:	81fb      	strh	r3, [r7, #14]
			break;
 8001208:	e009      	b.n	800121e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001210:	81fb      	strh	r3, [r7, #14]
			break;
 8001212:	e004      	b.n	800121e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800121a:	81fb      	strh	r3, [r7, #14]
			break;
 800121c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001220:	889b      	ldrh	r3, [r3, #4]
 8001222:	f245 5210 	movw	r2, #21776	; 0x5510
 8001226:	4293      	cmp	r3, r2
 8001228:	d103      	bne.n	8001232 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800122a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800122e:	81bb      	strh	r3, [r7, #12]
 8001230:	e001      	b.n	8001236 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001232:	2336      	movs	r3, #54	; 0x36
 8001234:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	f245 3210 	movw	r2, #21264	; 0x5310
 800123e:	4293      	cmp	r3, r2
 8001240:	d00f      	beq.n	8001262 <LCD_Scan_Dir+0x19a>
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	f245 5210 	movw	r2, #21776	; 0x5510
 800124a:	4293      	cmp	r3, r2
 800124c:	d009      	beq.n	8001262 <LCD_Scan_Dir+0x19a>
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001250:	889b      	ldrh	r3, [r3, #4]
 8001252:	f641 1263 	movw	r2, #6499	; 0x1963
 8001256:	4293      	cmp	r3, r2
 8001258:	d003      	beq.n	8001262 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	f646 0204 	movw	r2, #26628	; 0x6804
 800126a:	4293      	cmp	r3, r2
 800126c:	d103      	bne.n	8001276 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001276:	89fa      	ldrh	r2, [r7, #14]
 8001278:	89bb      	ldrh	r3, [r7, #12]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fc11 	bl	8000aa4 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	f641 1263 	movw	r2, #6499	; 0x1963
 800128a:	4293      	cmp	r3, r2
 800128c:	d028      	beq.n	80012e0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 800129e:	885b      	ldrh	r3, [r3, #2]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d21d      	bcs.n	80012e0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80012ac:	885a      	ldrh	r2, [r3, #2]
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80012b0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012b2:	4a02      	ldr	r2, [pc, #8]	; (80012bc <LCD_Scan_Dir+0x1f4>)
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	8053      	strh	r3, [r2, #2]
 80012b8:	e012      	b.n	80012e0 <LCD_Scan_Dir+0x218>
 80012ba:	bf00      	nop
 80012bc:	20000030 	.word	0x20000030
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80012c0:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012c6:	885b      	ldrh	r3, [r3, #2]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d909      	bls.n	80012e0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012cc:	4b7c      	ldr	r3, [pc, #496]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012d2:	4b7b      	ldr	r3, [pc, #492]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012d4:	885a      	ldrh	r2, [r3, #2]
 80012d6:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012d8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012da:	4a79      	ldr	r2, [pc, #484]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012dc:	897b      	ldrh	r3, [r7, #10]
 80012de:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80012e0:	4b77      	ldr	r3, [pc, #476]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	f245 5210 	movw	r2, #21776	; 0x5510
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f040 80ef 	bne.w	80014cc <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80012ee:	4b74      	ldr	r3, [pc, #464]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80012f0:	895b      	ldrh	r3, [r3, #10]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fb4a 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012f8:	4b72      	ldr	r3, [pc, #456]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80012fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	4b70      	ldr	r3, [pc, #448]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <LCD_Scan_Dir+0x400>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	4b6b      	ldr	r3, [pc, #428]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800131c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001320:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001322:	4b67      	ldr	r3, [pc, #412]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 8001324:	895b      	ldrh	r3, [r3, #10]
 8001326:	3301      	adds	r3, #1
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb2e 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001330:	4b64      	ldr	r3, [pc, #400]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800133a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <LCD_Scan_Dir+0x400>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001358:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800135a:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 800135c:	895b      	ldrh	r3, [r3, #10]
 800135e:	3302      	adds	r3, #2
 8001360:	b29b      	uxth	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fb12 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800136a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	121a      	asrs	r2, r3, #8
 8001380:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <LCD_Scan_Dir+0x400>)
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001396:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001398:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 800139a:	895b      	ldrh	r3, [r3, #10]
 800139c:	3303      	adds	r3, #3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff faf3 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	4a42      	ldr	r2, [pc, #264]	; (80014c8 <LCD_Scan_Dir+0x400>)
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	60d3      	str	r3, [r2, #12]
 80013c2:	4b40      	ldr	r3, [pc, #256]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80013d8:	899b      	ldrh	r3, [r3, #12]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fad6 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <LCD_Scan_Dir+0x400>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff faba 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800141a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <LCD_Scan_Dir+0x400>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	615a      	str	r2, [r3, #20]
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800143c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001440:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 8001444:	899b      	ldrh	r3, [r3, #12]
 8001446:	3302      	adds	r3, #2
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fa9e 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001456:	611a      	str	r2, [r3, #16]
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 8001462:	885b      	ldrh	r3, [r3, #2]
 8001464:	3b01      	subs	r3, #1
 8001466:	121a      	asrs	r2, r3, #8
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <LCD_Scan_Dir+0x400>)
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 8001482:	899b      	ldrh	r3, [r3, #12]
 8001484:	3303      	adds	r3, #3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fa7f 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 8001498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <LCD_Scan_Dir+0x3f8>)
 80014a0:	885b      	ldrh	r3, [r3, #2]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <LCD_Scan_Dir+0x400>)
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	60d3      	str	r3, [r2, #12]
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <LCD_Scan_Dir+0x3fc>)
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80014be:	e10b      	b.n	80016d8 <LCD_Scan_Dir+0x610>
 80014c0:	20000030 	.word	0x20000030
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80014cc:	4b84      	ldr	r3, [pc, #528]	; (80016e0 <LCD_Scan_Dir+0x618>)
 80014ce:	895b      	ldrh	r3, [r3, #10]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fa5b 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014d6:	4b83      	ldr	r3, [pc, #524]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	4b80      	ldr	r3, [pc, #512]	; (80016e8 <LCD_Scan_Dir+0x620>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	4b7c      	ldr	r3, [pc, #496]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001500:	4b78      	ldr	r3, [pc, #480]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800150a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	4b75      	ldr	r3, [pc, #468]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	4b70      	ldr	r3, [pc, #448]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001528:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800152a:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800152c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	4b6c      	ldr	r3, [pc, #432]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	4b69      	ldr	r3, [pc, #420]	; (80016e0 <LCD_Scan_Dir+0x618>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	121a      	asrs	r2, r3, #8
 8001542:	4b69      	ldr	r3, [pc, #420]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001558:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800155a:	4b62      	ldr	r3, [pc, #392]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <LCD_Scan_Dir+0x618>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a5d      	ldr	r2, [pc, #372]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001572:	b2db      	uxtb	r3, r3
 8001574:	60d3      	str	r3, [r2, #12]
 8001576:	4b5b      	ldr	r3, [pc, #364]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001588:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800158a:	4b55      	ldr	r3, [pc, #340]	; (80016e0 <LCD_Scan_Dir+0x618>)
 800158c:	899b      	ldrh	r3, [r3, #12]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f9fc 	bl	800098c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800159e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <LCD_Scan_Dir+0x620>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	4b4e      	ldr	r3, [pc, #312]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015bc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <LCD_Scan_Dir+0x620>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015e8:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <LCD_Scan_Dir+0x618>)
 80015fa:	885b      	ldrh	r3, [r3, #2]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	121a      	asrs	r2, r3, #8
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001618:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800161a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <LCD_Scan_Dir+0x618>)
 800162a:	885b      	ldrh	r3, [r3, #2]
 800162c:	3b01      	subs	r3, #1
 800162e:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <LCD_Scan_Dir+0x620>)
 8001630:	b2db      	uxtb	r3, r3
 8001632:	60d3      	str	r3, [r2, #12]
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001636:	2280      	movs	r2, #128	; 0x80
 8001638:	615a      	str	r2, [r3, #20]
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <LCD_Scan_Dir+0x61c>)
 8001642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001646:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001648:	e046      	b.n	80016d8 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b07      	cmp	r3, #7
 800164e:	d836      	bhi.n	80016be <LCD_Scan_Dir+0x5f6>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <LCD_Scan_Dir+0x590>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	08001679 	.word	0x08001679
 800165c:	08001683 	.word	0x08001683
 8001660:	0800168d 	.word	0x0800168d
 8001664:	080016bf 	.word	0x080016bf
 8001668:	08001697 	.word	0x08001697
 800166c:	080016a1 	.word	0x080016a1
 8001670:	080016ab 	.word	0x080016ab
 8001674:	080016b5 	.word	0x080016b5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800167e:	81fb      	strh	r3, [r7, #14]
			break;
 8001680:	e01d      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001682:	89fb      	ldrh	r3, [r7, #14]
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	81fb      	strh	r3, [r7, #14]
			break;
 800168a:	e018      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	81fb      	strh	r3, [r7, #14]
			break;
 8001694:	e013      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800169c:	81fb      	strh	r3, [r7, #14]
			break;
 800169e:	e00e      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80016a6:	81fb      	strh	r3, [r7, #14]
			break;
 80016a8:	e009      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	f043 0318 	orr.w	r3, r3, #24
 80016b0:	81fb      	strh	r3, [r7, #14]
			break;
 80016b2:	e004      	b.n	80016be <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	81fb      	strh	r3, [r7, #14]
			break;
 80016bc:	bf00      	nop
		}
		dirreg = 0X03;
 80016be:	2303      	movs	r3, #3
 80016c0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80016ca:	89fa      	ldrh	r2, [r7, #14]
 80016cc:	89bb      	ldrh	r3, [r7, #12]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff f9e7 	bl	8000aa4 <LCD_WriteReg>
	}
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000030 	.word	0x20000030
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40010c00 	.word	0x40010c00

080016ec <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
 80016f6:	460b      	mov	r3, r1
 80016f8:	80bb      	strh	r3, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80016fe:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001700:	889b      	ldrh	r3, [r3, #4]
 8001702:	f249 3241 	movw	r2, #37697	; 0x9341
 8001706:	4293      	cmp	r3, r2
 8001708:	d005      	beq.n	8001716 <LCD_Fast_DrawPoint+0x2a>
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001712:	4293      	cmp	r3, r2
 8001714:	d164      	bne.n	80017e0 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001716:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001718:	895b      	ldrh	r3, [r3, #10]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f936 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001720:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800172a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b69      	ldr	r3, [pc, #420]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	615a      	str	r2, [r3, #20]
 8001740:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800174e:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	4b60      	ldr	r3, [pc, #384]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 8001762:	b2db      	uxtb	r3, r3
 8001764:	60d3      	str	r3, [r2, #12]
 8001766:	4b5c      	ldr	r3, [pc, #368]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001778:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 800177c:	899b      	ldrh	r3, [r3, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f904 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001784:	4b54      	ldr	r3, [pc, #336]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	611a      	str	r2, [r3, #16]
 800178c:	4b52      	ldr	r3, [pc, #328]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	88bb      	ldrh	r3, [r7, #4]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b50      	ldr	r3, [pc, #320]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	88bb      	ldrh	r3, [r7, #4]
 80017c4:	4a45      	ldr	r2, [pc, #276]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	60d3      	str	r3, [r2, #12]
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	611a      	str	r2, [r3, #16]
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	e1e6      	b.n	8001bae <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80017e0:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	f245 5210 	movw	r2, #21776	; 0x5510
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d179      	bne.n	80018e0 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 80017ee:	895b      	ldrh	r3, [r3, #10]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f8cb 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80017f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001812:	2280      	movs	r2, #128	; 0x80
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800181e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001822:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001826:	895b      	ldrh	r3, [r3, #10]
 8001828:	3301      	adds	r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f8ad 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800183c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	4a25      	ldr	r2, [pc, #148]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 8001846:	b2db      	uxtb	r3, r3
 8001848:	60d3      	str	r3, [r2, #12]
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001860:	899b      	ldrh	r3, [r3, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f892 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800186a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 8001890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001894:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <LCD_Fast_DrawPoint+0x1e8>)
 8001898:	899b      	ldrh	r3, [r3, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	b29b      	uxth	r3, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f874 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	88bb      	ldrh	r3, [r7, #4]
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <LCD_Fast_DrawPoint+0x1f0>)
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	60d3      	str	r3, [r2, #12]
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <LCD_Fast_DrawPoint+0x1ec>)
 80018ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	e16d      	b.n	8001bae <LCD_Fast_DrawPoint+0x4c2>
 80018d2:	bf00      	nop
 80018d4:	20000030 	.word	0x20000030
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	f641 1263 	movw	r2, #6499	; 0x1963
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f040 80d1 	bne.w	8001a90 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80018ee:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 80018f0:	799b      	ldrb	r3, [r3, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 80018f8:	881a      	ldrh	r2, [r3, #0]
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001904:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 8001906:	895b      	ldrh	r3, [r3, #10]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f83f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800190e:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800193c:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4a4f      	ldr	r2, [pc, #316]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001950:	b2db      	uxtb	r3, r3
 8001952:	60d3      	str	r3, [r2, #12]
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001966:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800196a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001994:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001996:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	60d3      	str	r3, [r2, #12]
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <LCD_Fast_DrawPoint+0x398>)
 80019c4:	899b      	ldrh	r3, [r3, #12]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe ffe0 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	88bb      	ldrh	r3, [r7, #4]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 80019fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	60d3      	str	r3, [r2, #12]
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a62:	615a      	str	r2, [r3, #20]
 8001a64:	88bb      	ldrh	r3, [r7, #4]
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <LCD_Fast_DrawPoint+0x3a0>)
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	60d3      	str	r3, [r2, #12]
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <LCD_Fast_DrawPoint+0x39c>)
 8001a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	e095      	b.n	8001bae <LCD_Fast_DrawPoint+0x4c2>
 8001a82:	bf00      	nop
 8001a84:	20000030 	.word	0x20000030
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001a90:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001a92:	889b      	ldrh	r3, [r3, #4]
 8001a94:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d16f      	bne.n	8001b7c <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001a9c:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001a9e:	799b      	ldrb	r3, [r3, #6]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001ab2:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001ab4:	895b      	ldrh	r3, [r3, #10]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe ff68 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001abc:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	60d3      	str	r3, [r2, #12]
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b14:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001b18:	899b      	ldrh	r3, [r3, #12]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe ff36 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	88bb      	ldrh	r3, [r7, #4]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	615a      	str	r2, [r3, #20]
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b54:	611a      	str	r2, [r3, #16]
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	88bb      	ldrh	r3, [r7, #4]
 8001b60:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	60d3      	str	r3, [r2, #12]
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	e018      	b.n	8001bae <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001b7e:	799b      	ldrb	r3, [r3, #6]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d106      	bne.n	8001b92 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001b94:	895b      	ldrh	r3, [r3, #10]
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe ff82 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001ba2:	899b      	ldrh	r3, [r3, #12]
 8001ba4:	88ba      	ldrh	r2, [r7, #4]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe ff7b 	bl	8000aa4 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb4:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbc:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <LCD_Fast_DrawPoint+0x520>)
 8001bc0:	891a      	ldrh	r2, [r3, #8]
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001bc4:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <LCD_Fast_DrawPoint+0x528>)
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	60d3      	str	r3, [r2, #12]
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <LCD_Fast_DrawPoint+0x524>)
 8001bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c02:	611a      	str	r2, [r3, #16]
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000030 	.word	0x20000030
 8001c10:	40011000 	.word	0x40011000
 8001c14:	40010c00 	.word	0x40010c00

08001c18 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001c22:	20be      	movs	r0, #190	; 0xbe
 8001c24:	f7fe feb2 	bl	800098c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001c28:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c50:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c60:	615a      	str	r2, [r3, #20]
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fd63 	bl	8000730 <__aeabi_i2d>
 8001c6a:	a339      	add	r3, pc, #228	; (adr r3, 8001d50 <LCD_SSD_BackLightSet+0x138>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fae2 	bl	8000238 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4c38      	ldr	r4, [pc, #224]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe fdc1 	bl	8000804 <__aeabi_d2uiz>
 8001c82:	4603      	mov	r3, r0
 8001c84:	60e3      	str	r3, [r4, #12]
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c98:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	615a      	str	r2, [r3, #20]
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001cd6:	22ff      	movs	r2, #255	; 0xff
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cec:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	615a      	str	r2, [r3, #20]
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d16:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LCD_SSD_BackLightSet+0x144>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <LCD_SSD_BackLightSet+0x140>)
 8001d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d40:	611a      	str	r2, [r3, #16]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	f3af 8000 	nop.w
 8001d50:	66666666 	.word	0x66666666
 8001d54:	40046666 	.word	0x40046666
 8001d58:	40011000 	.word	0x40011000
 8001d5c:	40010c00 	.word	0x40010c00

08001d60 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d177      	bne.n	8001e60 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001d70:	4b80      	ldr	r3, [pc, #512]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d78:	22f0      	movs	r2, #240	; 0xf0
 8001d7a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001d7c:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d82:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d84:	4b7b      	ldr	r3, [pc, #492]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d86:	889b      	ldrh	r3, [r3, #4]
 8001d88:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00b      	beq.n	8001da8 <LCD_Display_Dir+0x48>
 8001d90:	4b78      	ldr	r3, [pc, #480]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d92:	889b      	ldrh	r3, [r3, #4]
 8001d94:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d005      	beq.n	8001da8 <LCD_Display_Dir+0x48>
 8001d9c:	4b75      	ldr	r3, [pc, #468]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001d9e:	889b      	ldrh	r3, [r3, #4]
 8001da0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d11e      	bne.n	8001de6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001da8:	4b72      	ldr	r3, [pc, #456]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001daa:	222c      	movs	r2, #44	; 0x2c
 8001dac:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001dae:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001db0:	222a      	movs	r2, #42	; 0x2a
 8001db2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001db6:	222b      	movs	r2, #43	; 0x2b
 8001db8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001dba:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dbc:	889b      	ldrh	r3, [r3, #4]
 8001dbe:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d006      	beq.n	8001dd4 <LCD_Display_Dir+0x74>
 8001dc6:	4b6b      	ldr	r3, [pc, #428]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dc8:	889b      	ldrh	r3, [r3, #4]
 8001dca:	f245 3210 	movw	r2, #21264	; 0x5310
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f040 80c7 	bne.w	8001f62 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001dd4:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dda:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001ddc:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001de2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001de4:	e0bd      	b.n	8001f62 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001de8:	889b      	ldrh	r3, [r3, #4]
 8001dea:	f245 5210 	movw	r2, #21776	; 0x5510
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d114      	bne.n	8001e1c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001df2:	4b60      	ldr	r3, [pc, #384]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001df4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001df8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001dfc:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001e00:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e04:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001e08:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e0c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e10:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e14:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e18:	805a      	strh	r2, [r3, #2]
 8001e1a:	e0a3      	b.n	8001f64 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001e1c:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e28:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e2a:	222c      	movs	r2, #44	; 0x2c
 8001e2c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001e2e:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e30:	222b      	movs	r2, #43	; 0x2b
 8001e32:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001e34:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e36:	222a      	movs	r2, #42	; 0x2a
 8001e38:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001e3a:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e40:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001e42:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e48:	805a      	strh	r2, [r3, #2]
 8001e4a:	e08b      	b.n	8001f64 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001e4c:	4b49      	ldr	r3, [pc, #292]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e4e:	2222      	movs	r2, #34	; 0x22
 8001e50:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e54:	2220      	movs	r2, #32
 8001e56:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001e58:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e5a:	2221      	movs	r2, #33	; 0x21
 8001e5c:	819a      	strh	r2, [r3, #12]
 8001e5e:	e081      	b.n	8001f64 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001e60:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001e66:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e6c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e70:	22f0      	movs	r2, #240	; 0xf0
 8001e72:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e76:	889b      	ldrh	r3, [r3, #4]
 8001e78:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d005      	beq.n	8001e8c <LCD_Display_Dir+0x12c>
 8001e80:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e82:	889b      	ldrh	r3, [r3, #4]
 8001e84:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d109      	bne.n	8001ea0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e8e:	222c      	movs	r2, #44	; 0x2c
 8001e90:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e94:	222a      	movs	r2, #42	; 0x2a
 8001e96:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001e9a:	222b      	movs	r2, #43	; 0x2b
 8001e9c:	819a      	strh	r2, [r3, #12]
 8001e9e:	e04b      	b.n	8001f38 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001ea0:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ea2:	889b      	ldrh	r3, [r3, #4]
 8001ea4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d109      	bne.n	8001ec0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001eac:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001eae:	222c      	movs	r2, #44	; 0x2c
 8001eb0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001eb4:	222b      	movs	r2, #43	; 0x2b
 8001eb6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001eba:	222a      	movs	r2, #42	; 0x2a
 8001ebc:	819a      	strh	r2, [r3, #12]
 8001ebe:	e03b      	b.n	8001f38 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ec2:	889b      	ldrh	r3, [r3, #4]
 8001ec4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d114      	bne.n	8001ef6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ece:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001ed2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ed6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001eda:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ede:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001ee2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ee6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001eea:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001eee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ef2:	805a      	strh	r2, [r3, #2]
 8001ef4:	e020      	b.n	8001f38 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	f641 1263 	movw	r2, #6499	; 0x1963
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d111      	bne.n	8001f26 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f04:	222c      	movs	r2, #44	; 0x2c
 8001f06:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f0a:	222a      	movs	r2, #42	; 0x2a
 8001f0c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f10:	222b      	movs	r2, #43	; 0x2b
 8001f12:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f16:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f1a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f22:	805a      	strh	r2, [r3, #2]
 8001f24:	e008      	b.n	8001f38 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f28:	2222      	movs	r2, #34	; 0x22
 8001f2a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f2e:	2221      	movs	r2, #33	; 0x21
 8001f30:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f34:	2220      	movs	r2, #32
 8001f36:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d005      	beq.n	8001f50 <LCD_Display_Dir+0x1f0>
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f46:	889b      	ldrh	r3, [r3, #4]
 8001f48:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d109      	bne.n	8001f64 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f56:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <LCD_Display_Dir+0x214>)
 8001f5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f5e:	805a      	strh	r2, [r3, #2]
 8001f60:	e000      	b.n	8001f64 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f62:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff f8af 	bl	80010c8 <LCD_Scan_Dir>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000030 	.word	0x20000030

08001f78 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001f7e:	4b90      	ldr	r3, [pc, #576]	; (80021c0 <LCD_Init+0x248>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4a8f      	ldr	r2, [pc, #572]	; (80021c0 <LCD_Init+0x248>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6193      	str	r3, [r2, #24]
 8001f8a:	4b8d      	ldr	r3, [pc, #564]	; (80021c0 <LCD_Init+0x248>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001f96:	4b8a      	ldr	r3, [pc, #552]	; (80021c0 <LCD_Init+0x248>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a89      	ldr	r2, [pc, #548]	; (80021c0 <LCD_Init+0x248>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	6193      	str	r3, [r2, #24]
 8001fa2:	4b87      	ldr	r3, [pc, #540]	; (80021c0 <LCD_Init+0x248>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001fae:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001fb2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	487f      	ldr	r0, [pc, #508]	; (80021c4 <LCD_Init+0x24c>)
 8001fc8:	f004 fe16 	bl	8006bf8 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	487b      	ldr	r0, [pc, #492]	; (80021c8 <LCD_Init+0x250>)
 8001fda:	f004 fe0d 	bl	8006bf8 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001fde:	2032      	movs	r0, #50	; 0x32
 8001fe0:	f004 fb96 	bl	8006710 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7fe fd5c 	bl	8000aa4 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001fec:	2032      	movs	r0, #50	; 0x32
 8001fee:	f004 fb8f 	bl	8006710 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7fe fd80 	bl	8000af8 <LCD_ReadReg>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b73      	ldr	r3, [pc, #460]	; (80021cc <LCD_Init+0x254>)
 8001ffe:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002000:	4b72      	ldr	r3, [pc, #456]	; (80021cc <LCD_Init+0x254>)
 8002002:	889b      	ldrh	r3, [r3, #4]
 8002004:	2bfe      	cmp	r3, #254	; 0xfe
 8002006:	d90b      	bls.n	8002020 <LCD_Init+0xa8>
 8002008:	4b70      	ldr	r3, [pc, #448]	; (80021cc <LCD_Init+0x254>)
 800200a:	889b      	ldrh	r3, [r3, #4]
 800200c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002010:	4293      	cmp	r3, r2
 8002012:	d005      	beq.n	8002020 <LCD_Init+0xa8>
 8002014:	4b6d      	ldr	r3, [pc, #436]	; (80021cc <LCD_Init+0x254>)
 8002016:	889b      	ldrh	r3, [r3, #4]
 8002018:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800201c:	f040 80c8 	bne.w	80021b0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002020:	20d3      	movs	r0, #211	; 0xd3
 8002022:	f7fe fcb3 	bl	800098c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002026:	f7fe fcf9 	bl	8000a1c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800202a:	f7fe fcf7 	bl	8000a1c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800202e:	f7fe fcf5 	bl	8000a1c <LCD_RD_DATA>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <LCD_Init+0x254>)
 8002038:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800203a:	4b64      	ldr	r3, [pc, #400]	; (80021cc <LCD_Init+0x254>)
 800203c:	889b      	ldrh	r3, [r3, #4]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b62      	ldr	r3, [pc, #392]	; (80021cc <LCD_Init+0x254>)
 8002044:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8002046:	f7fe fce9 	bl	8000a1c <LCD_RD_DATA>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <LCD_Init+0x254>)
 8002050:	889b      	ldrh	r3, [r3, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b5d      	ldr	r3, [pc, #372]	; (80021cc <LCD_Init+0x254>)
 8002058:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800205a:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <LCD_Init+0x254>)
 800205c:	889b      	ldrh	r3, [r3, #4]
 800205e:	f249 3241 	movw	r2, #37697	; 0x9341
 8002062:	4293      	cmp	r3, r2
 8002064:	f000 80a4 	beq.w	80021b0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002068:	20bf      	movs	r0, #191	; 0xbf
 800206a:	f7fe fc8f 	bl	800098c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800206e:	f7fe fcd5 	bl	8000a1c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8002072:	f7fe fcd3 	bl	8000a1c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8002076:	f7fe fcd1 	bl	8000a1c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800207a:	f7fe fccf 	bl	8000a1c <LCD_RD_DATA>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	4b52      	ldr	r3, [pc, #328]	; (80021cc <LCD_Init+0x254>)
 8002084:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8002086:	4b51      	ldr	r3, [pc, #324]	; (80021cc <LCD_Init+0x254>)
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <LCD_Init+0x254>)
 8002090:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8002092:	f7fe fcc3 	bl	8000a1c <LCD_RD_DATA>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <LCD_Init+0x254>)
 800209c:	889b      	ldrh	r3, [r3, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <LCD_Init+0x254>)
 80020a4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <LCD_Init+0x254>)
 80020a8:	889b      	ldrh	r3, [r3, #4]
 80020aa:	f646 0204 	movw	r2, #26628	; 0x6804
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d07e      	beq.n	80021b0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80020b2:	20d4      	movs	r0, #212	; 0xd4
 80020b4:	f7fe fc6a 	bl	800098c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80020b8:	f7fe fcb0 	bl	8000a1c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80020bc:	f7fe fcae 	bl	8000a1c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80020c0:	f7fe fcac 	bl	8000a1c <LCD_RD_DATA>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b40      	ldr	r3, [pc, #256]	; (80021cc <LCD_Init+0x254>)
 80020ca:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80020cc:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <LCD_Init+0x254>)
 80020ce:	889b      	ldrh	r3, [r3, #4]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <LCD_Init+0x254>)
 80020d6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80020d8:	f7fe fca0 	bl	8000a1c <LCD_RD_DATA>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <LCD_Init+0x254>)
 80020e2:	889b      	ldrh	r3, [r3, #4]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b38      	ldr	r3, [pc, #224]	; (80021cc <LCD_Init+0x254>)
 80020ea:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80020ec:	4b37      	ldr	r3, [pc, #220]	; (80021cc <LCD_Init+0x254>)
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	f245 3210 	movw	r2, #21264	; 0x5310
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d05b      	beq.n	80021b0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80020f8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80020fc:	f7fe fc46 	bl	800098c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002100:	f7fe fc8c 	bl	8000a1c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8002104:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002108:	f7fe fc40 	bl	800098c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 800210c:	f7fe fc86 	bl	8000a1c <LCD_RD_DATA>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <LCD_Init+0x254>)
 8002116:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <LCD_Init+0x254>)
 800211a:	889b      	ldrh	r3, [r3, #4]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <LCD_Init+0x254>)
 8002122:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002124:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002128:	f7fe fc30 	bl	800098c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800212c:	f7fe fc76 	bl	8000a1c <LCD_RD_DATA>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <LCD_Init+0x254>)
 8002136:	889b      	ldrh	r3, [r3, #4]
 8002138:	4313      	orrs	r3, r2
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <LCD_Init+0x254>)
 800213e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002140:	4b22      	ldr	r3, [pc, #136]	; (80021cc <LCD_Init+0x254>)
 8002142:	889b      	ldrh	r3, [r3, #4]
 8002144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002148:	d103      	bne.n	8002152 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <LCD_Init+0x254>)
 800214c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002150:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <LCD_Init+0x254>)
 8002154:	889b      	ldrh	r3, [r3, #4]
 8002156:	f245 5210 	movw	r2, #21776	; 0x5510
 800215a:	4293      	cmp	r3, r2
 800215c:	d028      	beq.n	80021b0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800215e:	20a1      	movs	r0, #161	; 0xa1
 8002160:	f7fe fc14 	bl	800098c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002164:	f7fe fc5a 	bl	8000a1c <LCD_RD_DATA>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <LCD_Init+0x254>)
 800216e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002170:	f7fe fc54 	bl	8000a1c <LCD_RD_DATA>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <LCD_Init+0x254>)
 800217a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <LCD_Init+0x254>)
 800217e:	889b      	ldrh	r3, [r3, #4]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <LCD_Init+0x254>)
 8002186:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002188:	f7fe fc48 	bl	8000a1c <LCD_RD_DATA>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <LCD_Init+0x254>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <LCD_Init+0x254>)
 800219a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <LCD_Init+0x254>)
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	f245 7261 	movw	r2, #22369	; 0x5761
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d103      	bne.n	80021b0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <LCD_Init+0x254>)
 80021aa:	f641 1263 	movw	r2, #6499	; 0x1963
 80021ae:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <LCD_Init+0x254>)
 80021b2:	889b      	ldrh	r3, [r3, #4]
 80021b4:	f249 3241 	movw	r2, #37697	; 0x9341
 80021b8:	4293      	cmp	r3, r2
 80021ba:	f040 811f 	bne.w	80023fc <LCD_Init+0x484>
 80021be:	e007      	b.n	80021d0 <LCD_Init+0x258>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40011000 	.word	0x40011000
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	20000030 	.word	0x20000030
			{
		LCD_WR_REG(0xCF);
 80021d0:	20cf      	movs	r0, #207	; 0xcf
 80021d2:	f7fe fbdb 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fbfc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80021dc:	20c1      	movs	r0, #193	; 0xc1
 80021de:	f7fe fbf9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80021e2:	2030      	movs	r0, #48	; 0x30
 80021e4:	f7fe fbf6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80021e8:	20ed      	movs	r0, #237	; 0xed
 80021ea:	f7fe fbcf 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80021ee:	2064      	movs	r0, #100	; 0x64
 80021f0:	f7fe fbf0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f7fe fbed 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80021fa:	2012      	movs	r0, #18
 80021fc:	f7fe fbea 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002200:	2081      	movs	r0, #129	; 0x81
 8002202:	f7fe fbe7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8002206:	20e8      	movs	r0, #232	; 0xe8
 8002208:	f7fe fbc0 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 800220c:	2085      	movs	r0, #133	; 0x85
 800220e:	f7fe fbe1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002212:	2010      	movs	r0, #16
 8002214:	f7fe fbde 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002218:	207a      	movs	r0, #122	; 0x7a
 800221a:	f7fe fbdb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800221e:	20cb      	movs	r0, #203	; 0xcb
 8002220:	f7fe fbb4 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002224:	2039      	movs	r0, #57	; 0x39
 8002226:	f7fe fbd5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800222a:	202c      	movs	r0, #44	; 0x2c
 800222c:	f7fe fbd2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002230:	2000      	movs	r0, #0
 8002232:	f7fe fbcf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002236:	2034      	movs	r0, #52	; 0x34
 8002238:	f7fe fbcc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800223c:	2002      	movs	r0, #2
 800223e:	f7fe fbc9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002242:	20f7      	movs	r0, #247	; 0xf7
 8002244:	f7fe fba2 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002248:	2020      	movs	r0, #32
 800224a:	f7fe fbc3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800224e:	20ea      	movs	r0, #234	; 0xea
 8002250:	f7fe fb9c 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002254:	2000      	movs	r0, #0
 8002256:	f7fe fbbd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fbba 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002260:	20c0      	movs	r0, #192	; 0xc0
 8002262:	f7fe fb93 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002266:	201b      	movs	r0, #27
 8002268:	f7fe fbb4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800226c:	20c1      	movs	r0, #193	; 0xc1
 800226e:	f7fe fb8d 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002272:	2001      	movs	r0, #1
 8002274:	f7fe fbae 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002278:	20c5      	movs	r0, #197	; 0xc5
 800227a:	f7fe fb87 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800227e:	2030      	movs	r0, #48	; 0x30
 8002280:	f7fe fba8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002284:	2030      	movs	r0, #48	; 0x30
 8002286:	f7fe fba5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800228a:	20c7      	movs	r0, #199	; 0xc7
 800228c:	f7fe fb7e 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002290:	20b7      	movs	r0, #183	; 0xb7
 8002292:	f7fe fb9f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002296:	2036      	movs	r0, #54	; 0x36
 8002298:	f7fe fb78 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800229c:	2048      	movs	r0, #72	; 0x48
 800229e:	f7fe fb99 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80022a2:	203a      	movs	r0, #58	; 0x3a
 80022a4:	f7fe fb72 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80022a8:	2055      	movs	r0, #85	; 0x55
 80022aa:	f7fe fb93 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80022ae:	20b1      	movs	r0, #177	; 0xb1
 80022b0:	f7fe fb6c 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe fb8d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80022ba:	201a      	movs	r0, #26
 80022bc:	f7fe fb8a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80022c0:	20b6      	movs	r0, #182	; 0xb6
 80022c2:	f7fe fb63 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80022c6:	200a      	movs	r0, #10
 80022c8:	f7fe fb84 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80022cc:	20a2      	movs	r0, #162	; 0xa2
 80022ce:	f7fe fb81 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80022d2:	20f2      	movs	r0, #242	; 0xf2
 80022d4:	f7fe fb5a 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022d8:	2000      	movs	r0, #0
 80022da:	f7fe fb7b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80022de:	2026      	movs	r0, #38	; 0x26
 80022e0:	f7fe fb54 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7fe fb75 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80022ea:	20e0      	movs	r0, #224	; 0xe0
 80022ec:	f7fe fb4e 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80022f0:	200f      	movs	r0, #15
 80022f2:	f7fe fb6f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80022f6:	202a      	movs	r0, #42	; 0x2a
 80022f8:	f7fe fb6c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80022fc:	2028      	movs	r0, #40	; 0x28
 80022fe:	f7fe fb69 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002302:	2008      	movs	r0, #8
 8002304:	f7fe fb66 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002308:	200e      	movs	r0, #14
 800230a:	f7fe fb63 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800230e:	2008      	movs	r0, #8
 8002310:	f7fe fb60 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002314:	2054      	movs	r0, #84	; 0x54
 8002316:	f7fe fb5d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800231a:	20a9      	movs	r0, #169	; 0xa9
 800231c:	f7fe fb5a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002320:	2043      	movs	r0, #67	; 0x43
 8002322:	f7fe fb57 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002326:	200a      	movs	r0, #10
 8002328:	f7fe fb54 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800232c:	200f      	movs	r0, #15
 800232e:	f7fe fb51 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe fb4e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fb4b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800233e:	2000      	movs	r0, #0
 8002340:	f7fe fb48 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fb45 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800234a:	20e1      	movs	r0, #225	; 0xe1
 800234c:	f7fe fb1e 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fb3f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002356:	2015      	movs	r0, #21
 8002358:	f7fe fb3c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800235c:	2017      	movs	r0, #23
 800235e:	f7fe fb39 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002362:	2007      	movs	r0, #7
 8002364:	f7fe fb36 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002368:	2011      	movs	r0, #17
 800236a:	f7fe fb33 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800236e:	2006      	movs	r0, #6
 8002370:	f7fe fb30 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002374:	202b      	movs	r0, #43	; 0x2b
 8002376:	f7fe fb2d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800237a:	2056      	movs	r0, #86	; 0x56
 800237c:	f7fe fb2a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002380:	203c      	movs	r0, #60	; 0x3c
 8002382:	f7fe fb27 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002386:	2005      	movs	r0, #5
 8002388:	f7fe fb24 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800238c:	2010      	movs	r0, #16
 800238e:	f7fe fb21 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002392:	200f      	movs	r0, #15
 8002394:	f7fe fb1e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002398:	203f      	movs	r0, #63	; 0x3f
 800239a:	f7fe fb1b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800239e:	203f      	movs	r0, #63	; 0x3f
 80023a0:	f7fe fb18 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80023a4:	200f      	movs	r0, #15
 80023a6:	f7fe fb15 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80023aa:	202b      	movs	r0, #43	; 0x2b
 80023ac:	f7fe faee 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe fb0f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7fe fb0c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7fe fb09 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80023c2:	203f      	movs	r0, #63	; 0x3f
 80023c4:	f7fe fb06 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80023c8:	202a      	movs	r0, #42	; 0x2a
 80023ca:	f7fe fadf 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fe fb00 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe fafd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe fafa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80023e0:	20ef      	movs	r0, #239	; 0xef
 80023e2:	f7fe faf7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80023e6:	2011      	movs	r0, #17
 80023e8:	f7fe fad0 	bl	800098c <LCD_WR_REG>
		HAL_Delay(120);
 80023ec:	2078      	movs	r0, #120	; 0x78
 80023ee:	f004 f98f 	bl	8006710 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80023f2:	2029      	movs	r0, #41	; 0x29
 80023f4:	f7fe faca 	bl	800098c <LCD_WR_REG>
 80023f8:	f003 bcd8 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80023fc:	4b58      	ldr	r3, [pc, #352]	; (8002560 <LCD_Init+0x5e8>)
 80023fe:	889b      	ldrh	r3, [r3, #4]
 8002400:	f646 0204 	movw	r2, #26628	; 0x6804
 8002404:	4293      	cmp	r3, r2
 8002406:	f040 80ad 	bne.w	8002564 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800240a:	2011      	movs	r0, #17
 800240c:	f7fe fabe 	bl	800098c <LCD_WR_REG>
		HAL_Delay(20);
 8002410:	2014      	movs	r0, #20
 8002412:	f004 f97d 	bl	8006710 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002416:	20d0      	movs	r0, #208	; 0xd0
 8002418:	f7fe fab8 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800241c:	2007      	movs	r0, #7
 800241e:	f7fe fad9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002422:	2042      	movs	r0, #66	; 0x42
 8002424:	f7fe fad6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002428:	201d      	movs	r0, #29
 800242a:	f7fe fad3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800242e:	20d1      	movs	r0, #209	; 0xd1
 8002430:	f7fe faac 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe facd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800243a:	201a      	movs	r0, #26
 800243c:	f7fe faca 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002440:	2009      	movs	r0, #9
 8002442:	f7fe fac7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002446:	20d2      	movs	r0, #210	; 0xd2
 8002448:	f7fe faa0 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800244c:	2001      	movs	r0, #1
 800244e:	f7fe fac1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002452:	2022      	movs	r0, #34	; 0x22
 8002454:	f7fe fabe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002458:	20c0      	movs	r0, #192	; 0xc0
 800245a:	f7fe fa97 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800245e:	2010      	movs	r0, #16
 8002460:	f7fe fab8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002464:	203b      	movs	r0, #59	; 0x3b
 8002466:	f7fe fab5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800246a:	2000      	movs	r0, #0
 800246c:	f7fe fab2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002470:	2002      	movs	r0, #2
 8002472:	f7fe faaf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002476:	2011      	movs	r0, #17
 8002478:	f7fe faac 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800247c:	20c5      	movs	r0, #197	; 0xc5
 800247e:	f7fe fa85 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002482:	2003      	movs	r0, #3
 8002484:	f7fe faa6 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002488:	20c8      	movs	r0, #200	; 0xc8
 800248a:	f7fe fa7f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe faa0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002494:	2025      	movs	r0, #37	; 0x25
 8002496:	f7fe fa9d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800249a:	2021      	movs	r0, #33	; 0x21
 800249c:	f7fe fa9a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80024a0:	2005      	movs	r0, #5
 80024a2:	f7fe fa97 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fa94 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80024ac:	200a      	movs	r0, #10
 80024ae:	f7fe fa91 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80024b2:	2065      	movs	r0, #101	; 0x65
 80024b4:	f7fe fa8e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80024b8:	2025      	movs	r0, #37	; 0x25
 80024ba:	f7fe fa8b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80024be:	2077      	movs	r0, #119	; 0x77
 80024c0:	f7fe fa88 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80024c4:	2050      	movs	r0, #80	; 0x50
 80024c6:	f7fe fa85 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80024ca:	200f      	movs	r0, #15
 80024cc:	f7fe fa82 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fa7f 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80024d6:	20f8      	movs	r0, #248	; 0xf8
 80024d8:	f7fe fa58 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80024dc:	2001      	movs	r0, #1
 80024de:	f7fe fa79 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80024e2:	20fe      	movs	r0, #254	; 0xfe
 80024e4:	f7fe fa52 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7fe fa73 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80024ee:	2002      	movs	r0, #2
 80024f0:	f7fe fa70 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80024f4:	2020      	movs	r0, #32
 80024f6:	f7fe fa49 	bl	800098c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80024fa:	2036      	movs	r0, #54	; 0x36
 80024fc:	f7fe fa46 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002500:	2008      	movs	r0, #8
 8002502:	f7fe fa67 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002506:	203a      	movs	r0, #58	; 0x3a
 8002508:	f7fe fa40 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800250c:	2055      	movs	r0, #85	; 0x55
 800250e:	f7fe fa61 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002512:	202b      	movs	r0, #43	; 0x2b
 8002514:	f7fe fa3a 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002518:	2000      	movs	r0, #0
 800251a:	f7fe fa5b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800251e:	2000      	movs	r0, #0
 8002520:	f7fe fa58 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002524:	2001      	movs	r0, #1
 8002526:	f7fe fa55 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800252a:	203f      	movs	r0, #63	; 0x3f
 800252c:	f7fe fa52 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002530:	202a      	movs	r0, #42	; 0x2a
 8002532:	f7fe fa2b 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe fa4c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800253c:	2000      	movs	r0, #0
 800253e:	f7fe fa49 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002542:	2001      	movs	r0, #1
 8002544:	f7fe fa46 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002548:	20df      	movs	r0, #223	; 0xdf
 800254a:	f7fe fa43 	bl	80009d4 <LCD_WR_DATAX>
		HAL_Delay(120);
 800254e:	2078      	movs	r0, #120	; 0x78
 8002550:	f004 f8de 	bl	8006710 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002554:	2029      	movs	r0, #41	; 0x29
 8002556:	f7fe fa19 	bl	800098c <LCD_WR_REG>
 800255a:	f003 bc27 	b.w	8005dac <LCD_Init+0x3e34>
 800255e:	bf00      	nop
 8002560:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5310) {
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <LCD_Init+0x5fc>)
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	f245 3210 	movw	r2, #21264	; 0x5310
 800256c:	4293      	cmp	r3, r2
 800256e:	f040 877c 	bne.w	800346a <LCD_Init+0x14f2>
 8002572:	e001      	b.n	8002578 <LCD_Init+0x600>
 8002574:	20000030 	.word	0x20000030
		LCD_WR_REG(0xED);
 8002578:	20ed      	movs	r0, #237	; 0xed
 800257a:	f7fe fa07 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800257e:	2001      	movs	r0, #1
 8002580:	f7fe fa28 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002584:	20fe      	movs	r0, #254	; 0xfe
 8002586:	f7fe fa25 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800258a:	20ee      	movs	r0, #238	; 0xee
 800258c:	f7fe f9fe 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002590:	20de      	movs	r0, #222	; 0xde
 8002592:	f7fe fa1f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002596:	2021      	movs	r0, #33	; 0x21
 8002598:	f7fe fa1c 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800259c:	20f1      	movs	r0, #241	; 0xf1
 800259e:	f7fe f9f5 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7fe fa16 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80025a8:	20df      	movs	r0, #223	; 0xdf
 80025aa:	f7fe f9ef 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80025ae:	2010      	movs	r0, #16
 80025b0:	f7fe fa10 	bl	80009d4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80025b4:	20c4      	movs	r0, #196	; 0xc4
 80025b6:	f7fe f9e9 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80025ba:	208f      	movs	r0, #143	; 0x8f
 80025bc:	f7fe fa0a 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80025c0:	20c6      	movs	r0, #198	; 0xc6
 80025c2:	f7fe f9e3 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe fa04 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025cc:	20e2      	movs	r0, #226	; 0xe2
 80025ce:	f7fe fa01 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025d2:	20e2      	movs	r0, #226	; 0xe2
 80025d4:	f7fe f9fe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025d8:	20e2      	movs	r0, #226	; 0xe2
 80025da:	f7fe f9fb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80025de:	20bf      	movs	r0, #191	; 0xbf
 80025e0:	f7fe f9d4 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80025e4:	20aa      	movs	r0, #170	; 0xaa
 80025e6:	f7fe f9f5 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80025ea:	20b0      	movs	r0, #176	; 0xb0
 80025ec:	f7fe f9ce 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80025f0:	200d      	movs	r0, #13
 80025f2:	f7fe f9ef 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe f9ec 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80025fc:	200d      	movs	r0, #13
 80025fe:	f7fe f9e9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe f9e6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002608:	2011      	movs	r0, #17
 800260a:	f7fe f9e3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe f9e0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002614:	2019      	movs	r0, #25
 8002616:	f7fe f9dd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe f9da 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002620:	2021      	movs	r0, #33	; 0x21
 8002622:	f7fe f9d7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe f9d4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800262c:	202d      	movs	r0, #45	; 0x2d
 800262e:	f7fe f9d1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f7fe f9ce 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002638:	203d      	movs	r0, #61	; 0x3d
 800263a:	f7fe f9cb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe f9c8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002644:	205d      	movs	r0, #93	; 0x5d
 8002646:	f7fe f9c5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264a:	2000      	movs	r0, #0
 800264c:	f7fe f9c2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002650:	205d      	movs	r0, #93	; 0x5d
 8002652:	f7fe f9bf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe f9bc 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800265c:	20b1      	movs	r0, #177	; 0xb1
 800265e:	f7fe f995 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002662:	2080      	movs	r0, #128	; 0x80
 8002664:	f7fe f9b6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe f9b3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800266e:	208b      	movs	r0, #139	; 0x8b
 8002670:	f7fe f9b0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe f9ad 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800267a:	2096      	movs	r0, #150	; 0x96
 800267c:	f7fe f9aa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe f9a7 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002686:	20b2      	movs	r0, #178	; 0xb2
 8002688:	f7fe f980 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe f9a1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002692:	2000      	movs	r0, #0
 8002694:	f7fe f99e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002698:	2002      	movs	r0, #2
 800269a:	f7fe f99b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe f998 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80026a4:	2003      	movs	r0, #3
 80026a6:	f7fe f995 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7fe f992 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80026b0:	20b3      	movs	r0, #179	; 0xb3
 80026b2:	f7fe f96b 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe f98c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe f989 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe f986 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe f983 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe f980 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe f97d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe f97a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7fe f977 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe f974 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe f971 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe f96e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe f96b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe f968 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe f965 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270a:	2000      	movs	r0, #0
 800270c:	f7fe f962 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002710:	2000      	movs	r0, #0
 8002712:	f7fe f95f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe f95c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271c:	2000      	movs	r0, #0
 800271e:	f7fe f959 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe f956 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe f953 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe f950 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe f94d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273a:	2000      	movs	r0, #0
 800273c:	f7fe f94a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe f947 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002746:	20b4      	movs	r0, #180	; 0xb4
 8002748:	f7fe f920 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800274c:	208b      	movs	r0, #139	; 0x8b
 800274e:	f7fe f941 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe f93e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002758:	2096      	movs	r0, #150	; 0x96
 800275a:	f7fe f93b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe f938 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002764:	20a1      	movs	r0, #161	; 0xa1
 8002766:	f7fe f935 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe f932 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002770:	20b5      	movs	r0, #181	; 0xb5
 8002772:	f7fe f90b 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002776:	2002      	movs	r0, #2
 8002778:	f7fe f92c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f7fe f929 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002782:	2003      	movs	r0, #3
 8002784:	f7fe f926 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe f923 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800278e:	2004      	movs	r0, #4
 8002790:	f7fe f920 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe f91d 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800279a:	20b6      	movs	r0, #182	; 0xb6
 800279c:	f7fe f8f6 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe f917 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe f914 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80027ac:	20b7      	movs	r0, #183	; 0xb7
 80027ae:	f7fe f8ed 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe f90e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe f90b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80027be:	203f      	movs	r0, #63	; 0x3f
 80027c0:	f7fe f908 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe f905 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80027ca:	205e      	movs	r0, #94	; 0x5e
 80027cc:	f7fe f902 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe f8ff 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80027d6:	2064      	movs	r0, #100	; 0x64
 80027d8:	f7fe f8fc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe f8f9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80027e2:	208c      	movs	r0, #140	; 0x8c
 80027e4:	f7fe f8f6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe f8f3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80027ee:	20ac      	movs	r0, #172	; 0xac
 80027f0:	f7fe f8f0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe f8ed 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80027fa:	20dc      	movs	r0, #220	; 0xdc
 80027fc:	f7fe f8ea 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe f8e7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002806:	2070      	movs	r0, #112	; 0x70
 8002808:	f7fe f8e4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe f8e1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002812:	2090      	movs	r0, #144	; 0x90
 8002814:	f7fe f8de 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe f8db 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800281e:	20eb      	movs	r0, #235	; 0xeb
 8002820:	f7fe f8d8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe f8d5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800282a:	20dc      	movs	r0, #220	; 0xdc
 800282c:	f7fe f8d2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe f8cf 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002836:	20b8      	movs	r0, #184	; 0xb8
 8002838:	f7fe f8a8 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe f8c9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe f8c6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe f8c3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe f8c0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe f8bd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe f8ba 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe f8b7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe f8b4 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800286c:	20ba      	movs	r0, #186	; 0xba
 800286e:	f7fe f88d 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002872:	2024      	movs	r0, #36	; 0x24
 8002874:	f7fe f8ae 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe f8ab 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe f8a8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe f8a5 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800288a:	20c1      	movs	r0, #193	; 0xc1
 800288c:	f7fe f87e 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002890:	2020      	movs	r0, #32
 8002892:	f7fe f89f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe f89c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800289c:	2054      	movs	r0, #84	; 0x54
 800289e:	f7fe f899 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe f896 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80028a8:	20ff      	movs	r0, #255	; 0xff
 80028aa:	f7fe f893 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe f890 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80028b4:	20c2      	movs	r0, #194	; 0xc2
 80028b6:	f7fe f869 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80028ba:	200a      	movs	r0, #10
 80028bc:	f7fe f88a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe f887 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80028c6:	2004      	movs	r0, #4
 80028c8:	f7fe f884 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7fe f881 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80028d2:	20c3      	movs	r0, #195	; 0xc3
 80028d4:	f7fe f85a 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80028d8:	203c      	movs	r0, #60	; 0x3c
 80028da:	f7fe f87b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe f878 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80028e4:	203a      	movs	r0, #58	; 0x3a
 80028e6:	f7fe f875 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe f872 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80028f0:	2039      	movs	r0, #57	; 0x39
 80028f2:	f7fe f86f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe f86c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80028fc:	2037      	movs	r0, #55	; 0x37
 80028fe:	f7fe f869 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f866 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002908:	203c      	movs	r0, #60	; 0x3c
 800290a:	f7fe f863 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe f860 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002914:	2036      	movs	r0, #54	; 0x36
 8002916:	f7fe f85d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe f85a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002920:	2032      	movs	r0, #50	; 0x32
 8002922:	f7fe f857 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe f854 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800292c:	202f      	movs	r0, #47	; 0x2f
 800292e:	f7fe f851 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe f84e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002938:	202c      	movs	r0, #44	; 0x2c
 800293a:	f7fe f84b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe f848 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002944:	2029      	movs	r0, #41	; 0x29
 8002946:	f7fe f845 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe f842 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002950:	2026      	movs	r0, #38	; 0x26
 8002952:	f7fe f83f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe f83c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800295c:	2024      	movs	r0, #36	; 0x24
 800295e:	f7fe f839 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fe f836 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002968:	2024      	movs	r0, #36	; 0x24
 800296a:	f7fe f833 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe f830 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002974:	2023      	movs	r0, #35	; 0x23
 8002976:	f7fe f82d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe f82a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002980:	203c      	movs	r0, #60	; 0x3c
 8002982:	f7fe f827 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002986:	2000      	movs	r0, #0
 8002988:	f7fe f824 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800298c:	2036      	movs	r0, #54	; 0x36
 800298e:	f7fe f821 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002992:	2000      	movs	r0, #0
 8002994:	f7fe f81e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002998:	2032      	movs	r0, #50	; 0x32
 800299a:	f7fe f81b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299e:	2000      	movs	r0, #0
 80029a0:	f7fe f818 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80029a4:	202f      	movs	r0, #47	; 0x2f
 80029a6:	f7fe f815 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe f812 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80029b0:	202c      	movs	r0, #44	; 0x2c
 80029b2:	f7fe f80f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe f80c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80029bc:	2029      	movs	r0, #41	; 0x29
 80029be:	f7fe f809 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe f806 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80029c8:	2026      	movs	r0, #38	; 0x26
 80029ca:	f7fe f803 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe f800 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029d4:	2024      	movs	r0, #36	; 0x24
 80029d6:	f7fd fffd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fd fffa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029e0:	2024      	movs	r0, #36	; 0x24
 80029e2:	f7fd fff7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fd fff4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80029ec:	2023      	movs	r0, #35	; 0x23
 80029ee:	f7fd fff1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fd ffee 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80029f8:	20c4      	movs	r0, #196	; 0xc4
 80029fa:	f7fd ffc7 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80029fe:	2062      	movs	r0, #98	; 0x62
 8002a00:	f7fd ffe8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fd ffe5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002a0a:	2005      	movs	r0, #5
 8002a0c:	f7fd ffe2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fd ffdf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002a16:	2084      	movs	r0, #132	; 0x84
 8002a18:	f7fd ffdc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fd ffd9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002a22:	20f0      	movs	r0, #240	; 0xf0
 8002a24:	f7fd ffd6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fd ffd3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a2e:	2018      	movs	r0, #24
 8002a30:	f7fd ffd0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7fd ffcd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002a3a:	20a4      	movs	r0, #164	; 0xa4
 8002a3c:	f7fd ffca 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fd ffc7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a46:	2018      	movs	r0, #24
 8002a48:	f7fd ffc4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fd ffc1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002a52:	2050      	movs	r0, #80	; 0x50
 8002a54:	f7fd ffbe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fd ffbb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002a5e:	200c      	movs	r0, #12
 8002a60:	f7fd ffb8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fd ffb5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002a6a:	2017      	movs	r0, #23
 8002a6c:	f7fd ffb2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fd ffaf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002a76:	2095      	movs	r0, #149	; 0x95
 8002a78:	f7fd ffac 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fd ffa9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002a82:	20f3      	movs	r0, #243	; 0xf3
 8002a84:	f7fd ffa6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fd ffa3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002a8e:	20e6      	movs	r0, #230	; 0xe6
 8002a90:	f7fd ffa0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fd ff9d 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002a9a:	20c5      	movs	r0, #197	; 0xc5
 8002a9c:	f7fd ff76 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002aa0:	2032      	movs	r0, #50	; 0x32
 8002aa2:	f7fd ff97 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fd ff94 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002aac:	2044      	movs	r0, #68	; 0x44
 8002aae:	f7fd ff91 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fd ff8e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002ab8:	2065      	movs	r0, #101	; 0x65
 8002aba:	f7fd ff8b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fd ff88 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002ac4:	2076      	movs	r0, #118	; 0x76
 8002ac6:	f7fd ff85 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fd ff82 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ad0:	2088      	movs	r0, #136	; 0x88
 8002ad2:	f7fd ff7f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fd ff7c 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002adc:	20c6      	movs	r0, #198	; 0xc6
 8002ade:	f7fd ff55 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002ae2:	2020      	movs	r0, #32
 8002ae4:	f7fd ff76 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fd ff73 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002aee:	2017      	movs	r0, #23
 8002af0:	f7fd ff70 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fd ff6d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002afa:	2001      	movs	r0, #1
 8002afc:	f7fd ff6a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fd ff67 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002b06:	20c7      	movs	r0, #199	; 0xc7
 8002b08:	f7fd ff40 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fd ff61 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fd ff5e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fd ff5b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fd ff58 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002b24:	20c8      	movs	r0, #200	; 0xc8
 8002b26:	f7fd ff31 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fd ff52 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fd ff4f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fd ff4c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fd ff49 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002b42:	20c9      	movs	r0, #201	; 0xc9
 8002b44:	f7fd ff22 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fd ff43 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fd ff40 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7fd ff3d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fd ff3a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fd ff37 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fd ff34 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fd ff31 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fd ff2e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fd ff2b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fd ff28 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fd ff25 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7fd ff22 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fd ff1f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fd ff1c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fd ff19 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fd ff16 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002ba8:	20e0      	movs	r0, #224	; 0xe0
 8002baa:	f7fd feef 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002bae:	2016      	movs	r0, #22
 8002bb0:	f7fd ff10 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fd ff0d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002bba:	201c      	movs	r0, #28
 8002bbc:	f7fd ff0a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fd ff07 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002bc6:	2021      	movs	r0, #33	; 0x21
 8002bc8:	f7fd ff04 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd ff01 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002bd2:	2036      	movs	r0, #54	; 0x36
 8002bd4:	f7fd fefe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fd fefb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002bde:	2046      	movs	r0, #70	; 0x46
 8002be0:	f7fd fef8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd fef5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002bea:	2052      	movs	r0, #82	; 0x52
 8002bec:	f7fd fef2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fd feef 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002bf6:	2064      	movs	r0, #100	; 0x64
 8002bf8:	f7fd feec 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fd fee9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002c02:	207a      	movs	r0, #122	; 0x7a
 8002c04:	f7fd fee6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fd fee3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002c0e:	208b      	movs	r0, #139	; 0x8b
 8002c10:	f7fd fee0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fd fedd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c1a:	2099      	movs	r0, #153	; 0x99
 8002c1c:	f7fd feda 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fd fed7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002c26:	20a8      	movs	r0, #168	; 0xa8
 8002c28:	f7fd fed4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fd fed1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c32:	20b9      	movs	r0, #185	; 0xb9
 8002c34:	f7fd fece 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7fd fecb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c3e:	20c4      	movs	r0, #196	; 0xc4
 8002c40:	f7fd fec8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7fd fec5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c4a:	20ca      	movs	r0, #202	; 0xca
 8002c4c:	f7fd fec2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fd febf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c56:	20d2      	movs	r0, #210	; 0xd2
 8002c58:	f7fd febc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7fd feb9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002c62:	20d9      	movs	r0, #217	; 0xd9
 8002c64:	f7fd feb6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fd feb3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c6e:	20e0      	movs	r0, #224	; 0xe0
 8002c70:	f7fd feb0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fd fead 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c7a:	20f3      	movs	r0, #243	; 0xf3
 8002c7c:	f7fd feaa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fd fea7 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002c86:	20e1      	movs	r0, #225	; 0xe1
 8002c88:	f7fd fe80 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002c8c:	2016      	movs	r0, #22
 8002c8e:	f7fd fea1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fd fe9e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002c98:	201c      	movs	r0, #28
 8002c9a:	f7fd fe9b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fd fe98 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002ca4:	2022      	movs	r0, #34	; 0x22
 8002ca6:	f7fd fe95 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fd fe92 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002cb0:	2036      	movs	r0, #54	; 0x36
 8002cb2:	f7fd fe8f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fd fe8c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002cbc:	2045      	movs	r0, #69	; 0x45
 8002cbe:	f7fd fe89 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fd fe86 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002cc8:	2052      	movs	r0, #82	; 0x52
 8002cca:	f7fd fe83 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fd fe80 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002cd4:	2064      	movs	r0, #100	; 0x64
 8002cd6:	f7fd fe7d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fd fe7a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002ce0:	207a      	movs	r0, #122	; 0x7a
 8002ce2:	f7fd fe77 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fd fe74 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002cec:	208b      	movs	r0, #139	; 0x8b
 8002cee:	f7fd fe71 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fd fe6e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cf8:	2099      	movs	r0, #153	; 0x99
 8002cfa:	f7fd fe6b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fd fe68 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002d04:	20a8      	movs	r0, #168	; 0xa8
 8002d06:	f7fd fe65 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fd fe62 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002d10:	20b9      	movs	r0, #185	; 0xb9
 8002d12:	f7fd fe5f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fd fe5c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002d1c:	20c4      	movs	r0, #196	; 0xc4
 8002d1e:	f7fd fe59 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fd fe56 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002d28:	20ca      	movs	r0, #202	; 0xca
 8002d2a:	f7fd fe53 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fd fe50 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002d34:	20d2      	movs	r0, #210	; 0xd2
 8002d36:	f7fd fe4d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7fd fe4a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002d40:	20d8      	movs	r0, #216	; 0xd8
 8002d42:	f7fd fe47 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7fd fe44 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002d4c:	20e0      	movs	r0, #224	; 0xe0
 8002d4e:	f7fd fe41 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fd fe3e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d58:	20f3      	movs	r0, #243	; 0xf3
 8002d5a:	f7fd fe3b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fd fe38 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002d64:	20e2      	movs	r0, #226	; 0xe2
 8002d66:	f7fd fe11 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d6a:	2005      	movs	r0, #5
 8002d6c:	f7fd fe32 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd fe2f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002d76:	200b      	movs	r0, #11
 8002d78:	f7fd fe2c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd fe29 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002d82:	201b      	movs	r0, #27
 8002d84:	f7fd fe26 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fd fe23 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002d8e:	2034      	movs	r0, #52	; 0x34
 8002d90:	f7fd fe20 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fd fe1d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d9a:	2044      	movs	r0, #68	; 0x44
 8002d9c:	f7fd fe1a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fd fe17 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002da6:	204f      	movs	r0, #79	; 0x4f
 8002da8:	f7fd fe14 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fd fe11 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002db2:	2061      	movs	r0, #97	; 0x61
 8002db4:	f7fd fe0e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fd fe0b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002dbe:	2079      	movs	r0, #121	; 0x79
 8002dc0:	f7fd fe08 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fd fe05 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002dca:	2088      	movs	r0, #136	; 0x88
 8002dcc:	f7fd fe02 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fd fdff 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002dd6:	2097      	movs	r0, #151	; 0x97
 8002dd8:	f7fd fdfc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fd fdf9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002de2:	20a6      	movs	r0, #166	; 0xa6
 8002de4:	f7fd fdf6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fd fdf3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002dee:	20b7      	movs	r0, #183	; 0xb7
 8002df0:	f7fd fdf0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd fded 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002dfa:	20c2      	movs	r0, #194	; 0xc2
 8002dfc:	f7fd fdea 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fd fde7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002e06:	20c7      	movs	r0, #199	; 0xc7
 8002e08:	f7fd fde4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fd fde1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002e12:	20d1      	movs	r0, #209	; 0xd1
 8002e14:	f7fd fdde 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fd fddb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002e1e:	20d6      	movs	r0, #214	; 0xd6
 8002e20:	f7fd fdd8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fd fdd5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e2a:	20dd      	movs	r0, #221	; 0xdd
 8002e2c:	f7fd fdd2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7fd fdcf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e36:	20f3      	movs	r0, #243	; 0xf3
 8002e38:	f7fd fdcc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fd fdc9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002e42:	20e3      	movs	r0, #227	; 0xe3
 8002e44:	f7fd fda2 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002e48:	2005      	movs	r0, #5
 8002e4a:	f7fd fdc3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fd fdc0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002e54:	200a      	movs	r0, #10
 8002e56:	f7fd fdbd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fd fdba 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e60:	201c      	movs	r0, #28
 8002e62:	f7fd fdb7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fd fdb4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002e6c:	2033      	movs	r0, #51	; 0x33
 8002e6e:	f7fd fdb1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd fdae 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e78:	2044      	movs	r0, #68	; 0x44
 8002e7a:	f7fd fdab 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd fda8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002e84:	2050      	movs	r0, #80	; 0x50
 8002e86:	f7fd fda5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fda2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002e90:	2062      	movs	r0, #98	; 0x62
 8002e92:	f7fd fd9f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fd fd9c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002e9c:	2078      	movs	r0, #120	; 0x78
 8002e9e:	f7fd fd99 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fd fd96 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ea8:	2088      	movs	r0, #136	; 0x88
 8002eaa:	f7fd fd93 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fd fd90 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002eb4:	2097      	movs	r0, #151	; 0x97
 8002eb6:	f7fd fd8d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fd8a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002ec0:	20a6      	movs	r0, #166	; 0xa6
 8002ec2:	f7fd fd87 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7fd fd84 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002ecc:	20b7      	movs	r0, #183	; 0xb7
 8002ece:	f7fd fd81 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fd fd7e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002ed8:	20c2      	movs	r0, #194	; 0xc2
 8002eda:	f7fd fd7b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fd fd78 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002ee4:	20c7      	movs	r0, #199	; 0xc7
 8002ee6:	f7fd fd75 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fd fd72 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002ef0:	20d1      	movs	r0, #209	; 0xd1
 8002ef2:	f7fd fd6f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fd fd6c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002efc:	20d5      	movs	r0, #213	; 0xd5
 8002efe:	f7fd fd69 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fd fd66 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002f08:	20dd      	movs	r0, #221	; 0xdd
 8002f0a:	f7fd fd63 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fd fd60 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f14:	20f3      	movs	r0, #243	; 0xf3
 8002f16:	f7fd fd5d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7fd fd5a 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002f20:	20e4      	movs	r0, #228	; 0xe4
 8002f22:	f7fd fd33 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002f26:	2001      	movs	r0, #1
 8002f28:	f7fd fd54 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd fd51 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002f32:	2001      	movs	r0, #1
 8002f34:	f7fd fd4e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fd fd4b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f7fd fd48 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fd fd45 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002f4a:	202a      	movs	r0, #42	; 0x2a
 8002f4c:	f7fd fd42 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd fd3f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f56:	203c      	movs	r0, #60	; 0x3c
 8002f58:	f7fd fd3c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd fd39 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f62:	204b      	movs	r0, #75	; 0x4b
 8002f64:	f7fd fd36 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fd33 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f6e:	205d      	movs	r0, #93	; 0x5d
 8002f70:	f7fd fd30 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fd fd2d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f7a:	2074      	movs	r0, #116	; 0x74
 8002f7c:	f7fd fd2a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd fd27 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f86:	2084      	movs	r0, #132	; 0x84
 8002f88:	f7fd fd24 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd fd21 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002f92:	2093      	movs	r0, #147	; 0x93
 8002f94:	f7fd fd1e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fd fd1b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002f9e:	20a2      	movs	r0, #162	; 0xa2
 8002fa0:	f7fd fd18 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fd fd15 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002faa:	20b3      	movs	r0, #179	; 0xb3
 8002fac:	f7fd fd12 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fd fd0f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002fb6:	20be      	movs	r0, #190	; 0xbe
 8002fb8:	f7fd fd0c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fd fd09 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002fc2:	20c4      	movs	r0, #196	; 0xc4
 8002fc4:	f7fd fd06 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fd fd03 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002fce:	20cd      	movs	r0, #205	; 0xcd
 8002fd0:	f7fd fd00 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fd fcfd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002fda:	20d3      	movs	r0, #211	; 0xd3
 8002fdc:	f7fd fcfa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fd fcf7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002fe6:	20dd      	movs	r0, #221	; 0xdd
 8002fe8:	f7fd fcf4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7fd fcf1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ff2:	20f3      	movs	r0, #243	; 0xf3
 8002ff4:	f7fd fcee 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fd fceb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002ffe:	20e5      	movs	r0, #229	; 0xe5
 8003000:	f7fd fcc4 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003004:	2000      	movs	r0, #0
 8003006:	f7fd fce5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd fce2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fd fcdf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd fcdc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800301c:	2002      	movs	r0, #2
 800301e:	f7fd fcd9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fd fcd6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003028:	2029      	movs	r0, #41	; 0x29
 800302a:	f7fd fcd3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fd fcd0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003034:	203c      	movs	r0, #60	; 0x3c
 8003036:	f7fd fccd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f7fd fcca 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003040:	204b      	movs	r0, #75	; 0x4b
 8003042:	f7fd fcc7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fd fcc4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800304c:	205d      	movs	r0, #93	; 0x5d
 800304e:	f7fd fcc1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003052:	2000      	movs	r0, #0
 8003054:	f7fd fcbe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003058:	2074      	movs	r0, #116	; 0x74
 800305a:	f7fd fcbb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305e:	2000      	movs	r0, #0
 8003060:	f7fd fcb8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003064:	2084      	movs	r0, #132	; 0x84
 8003066:	f7fd fcb5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7fd fcb2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003070:	2093      	movs	r0, #147	; 0x93
 8003072:	f7fd fcaf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fd fcac 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800307c:	20a2      	movs	r0, #162	; 0xa2
 800307e:	f7fd fca9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fd fca6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003088:	20b3      	movs	r0, #179	; 0xb3
 800308a:	f7fd fca3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f7fd fca0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003094:	20be      	movs	r0, #190	; 0xbe
 8003096:	f7fd fc9d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fd fc9a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80030a0:	20c4      	movs	r0, #196	; 0xc4
 80030a2:	f7fd fc97 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7fd fc94 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80030ac:	20cd      	movs	r0, #205	; 0xcd
 80030ae:	f7fd fc91 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fd fc8e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80030b8:	20d3      	movs	r0, #211	; 0xd3
 80030ba:	f7fd fc8b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fd fc88 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80030c4:	20dc      	movs	r0, #220	; 0xdc
 80030c6:	f7fd fc85 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7fd fc82 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80030d0:	20f3      	movs	r0, #243	; 0xf3
 80030d2:	f7fd fc7f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7fd fc7c 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80030dc:	20e6      	movs	r0, #230	; 0xe6
 80030de:	f7fd fc55 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80030e2:	2011      	movs	r0, #17
 80030e4:	f7fd fc76 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fd fc73 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80030ee:	2034      	movs	r0, #52	; 0x34
 80030f0:	f7fd fc70 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fc6d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80030fa:	2056      	movs	r0, #86	; 0x56
 80030fc:	f7fd fc6a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fd fc67 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003106:	2076      	movs	r0, #118	; 0x76
 8003108:	f7fd fc64 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fd fc61 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003112:	2077      	movs	r0, #119	; 0x77
 8003114:	f7fd fc5e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003118:	2000      	movs	r0, #0
 800311a:	f7fd fc5b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800311e:	2066      	movs	r0, #102	; 0x66
 8003120:	f7fd fc58 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fd fc55 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800312a:	2088      	movs	r0, #136	; 0x88
 800312c:	f7fd fc52 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fd fc4f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003136:	2099      	movs	r0, #153	; 0x99
 8003138:	f7fd fc4c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fd fc49 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003142:	20bb      	movs	r0, #187	; 0xbb
 8003144:	f7fd fc46 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fd fc43 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800314e:	2099      	movs	r0, #153	; 0x99
 8003150:	f7fd fc40 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fd fc3d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800315a:	2066      	movs	r0, #102	; 0x66
 800315c:	f7fd fc3a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fd fc37 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003166:	2055      	movs	r0, #85	; 0x55
 8003168:	f7fd fc34 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fd fc31 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003172:	2055      	movs	r0, #85	; 0x55
 8003174:	f7fd fc2e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fd fc2b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800317e:	2045      	movs	r0, #69	; 0x45
 8003180:	f7fd fc28 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fd fc25 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800318a:	2043      	movs	r0, #67	; 0x43
 800318c:	f7fd fc22 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fd fc1f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003196:	2044      	movs	r0, #68	; 0x44
 8003198:	f7fd fc1c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800319c:	2000      	movs	r0, #0
 800319e:	f7fd fc19 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80031a2:	20e7      	movs	r0, #231	; 0xe7
 80031a4:	f7fd fbf2 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80031a8:	2032      	movs	r0, #50	; 0x32
 80031aa:	f7fd fc13 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7fd fc10 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031b4:	2055      	movs	r0, #85	; 0x55
 80031b6:	f7fd fc0d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd fc0a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80031c0:	2076      	movs	r0, #118	; 0x76
 80031c2:	f7fd fc07 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fd fc04 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031cc:	2066      	movs	r0, #102	; 0x66
 80031ce:	f7fd fc01 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fd fbfe 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031d8:	2067      	movs	r0, #103	; 0x67
 80031da:	f7fd fbfb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fd fbf8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031e4:	2067      	movs	r0, #103	; 0x67
 80031e6:	f7fd fbf5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fd fbf2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80031f0:	2087      	movs	r0, #135	; 0x87
 80031f2:	f7fd fbef 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fd fbec 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031fc:	2099      	movs	r0, #153	; 0x99
 80031fe:	f7fd fbe9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd fbe6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003208:	20bb      	movs	r0, #187	; 0xbb
 800320a:	f7fd fbe3 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7fd fbe0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003214:	2099      	movs	r0, #153	; 0x99
 8003216:	f7fd fbdd 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fd fbda 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003220:	2077      	movs	r0, #119	; 0x77
 8003222:	f7fd fbd7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd fbd4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800322c:	2044      	movs	r0, #68	; 0x44
 800322e:	f7fd fbd1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fd fbce 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003238:	2056      	movs	r0, #86	; 0x56
 800323a:	f7fd fbcb 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7fd fbc8 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003244:	2023      	movs	r0, #35	; 0x23
 8003246:	f7fd fbc5 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7fd fbc2 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003250:	2033      	movs	r0, #51	; 0x33
 8003252:	f7fd fbbf 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003256:	2000      	movs	r0, #0
 8003258:	f7fd fbbc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800325c:	2045      	movs	r0, #69	; 0x45
 800325e:	f7fd fbb9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003262:	2000      	movs	r0, #0
 8003264:	f7fd fbb6 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003268:	20e8      	movs	r0, #232	; 0xe8
 800326a:	f7fd fb8f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800326e:	2000      	movs	r0, #0
 8003270:	f7fd fbb0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fd fbad 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800327a:	2099      	movs	r0, #153	; 0x99
 800327c:	f7fd fbaa 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fd fba7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003286:	2087      	movs	r0, #135	; 0x87
 8003288:	f7fd fba4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd fba1 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003292:	2088      	movs	r0, #136	; 0x88
 8003294:	f7fd fb9e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fd fb9b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800329e:	2077      	movs	r0, #119	; 0x77
 80032a0:	f7fd fb98 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fd fb95 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032aa:	2066      	movs	r0, #102	; 0x66
 80032ac:	f7fd fb92 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd fb8f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80032b6:	2088      	movs	r0, #136	; 0x88
 80032b8:	f7fd fb8c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fb89 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80032c2:	20aa      	movs	r0, #170	; 0xaa
 80032c4:	f7fd fb86 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd fb83 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80032ce:	20bb      	movs	r0, #187	; 0xbb
 80032d0:	f7fd fb80 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd fb7d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032da:	2099      	movs	r0, #153	; 0x99
 80032dc:	f7fd fb7a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fd fb77 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032e6:	2066      	movs	r0, #102	; 0x66
 80032e8:	f7fd fb74 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd fb71 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032f2:	2055      	movs	r0, #85	; 0x55
 80032f4:	f7fd fb6e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fd fb6b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032fe:	2055      	movs	r0, #85	; 0x55
 8003300:	f7fd fb68 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fd fb65 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800330a:	2044      	movs	r0, #68	; 0x44
 800330c:	f7fd fb62 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd fb5f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003316:	2044      	movs	r0, #68	; 0x44
 8003318:	f7fd fb5c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fd fb59 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003322:	2055      	movs	r0, #85	; 0x55
 8003324:	f7fd fb56 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fd fb53 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800332e:	20e9      	movs	r0, #233	; 0xe9
 8003330:	f7fd fb2c 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003334:	20aa      	movs	r0, #170	; 0xaa
 8003336:	f7fd fb4d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fd fb4a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003340:	2000      	movs	r0, #0
 8003342:	f7fd fb47 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fd fb44 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fd fb1d 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003352:	20aa      	movs	r0, #170	; 0xaa
 8003354:	f7fd fb3e 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003358:	20cf      	movs	r0, #207	; 0xcf
 800335a:	f7fd fb17 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd fb38 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fd fb35 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fd fb32 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f7fd fb2f 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f7fd fb2c 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fd fb29 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fd fb26 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd fb23 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fd fb20 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f7fd fb1d 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd fb1a 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fd fb17 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd fb14 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7fd fb11 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fb0e 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fd fb0b 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fb08 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80033c4:	20f0      	movs	r0, #240	; 0xf0
 80033c6:	f7fd fae1 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fb02 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80033d0:	2050      	movs	r0, #80	; 0x50
 80033d2:	f7fd faff 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd fafc 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fd faf9 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd faf6 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80033e8:	20f3      	movs	r0, #243	; 0xf3
 80033ea:	f7fd facf 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fd faf0 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80033f4:	20f9      	movs	r0, #249	; 0xf9
 80033f6:	f7fd fac9 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80033fa:	2006      	movs	r0, #6
 80033fc:	f7fd faea 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003400:	2010      	movs	r0, #16
 8003402:	f7fd fae7 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003406:	2029      	movs	r0, #41	; 0x29
 8003408:	f7fd fae4 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd fae1 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003412:	203a      	movs	r0, #58	; 0x3a
 8003414:	f7fd faba 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003418:	2055      	movs	r0, #85	; 0x55
 800341a:	f7fd fadb 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800341e:	2011      	movs	r0, #17
 8003420:	f7fd fab4 	bl	800098c <LCD_WR_REG>
		HAL_Delay(100);
 8003424:	2064      	movs	r0, #100	; 0x64
 8003426:	f003 f973 	bl	8006710 <HAL_Delay>
		LCD_WR_REG(0x29);
 800342a:	2029      	movs	r0, #41	; 0x29
 800342c:	f7fd faae 	bl	800098c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003430:	2035      	movs	r0, #53	; 0x35
 8003432:	f7fd faab 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003436:	2000      	movs	r0, #0
 8003438:	f7fd facc 	bl	80009d4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800343c:	2051      	movs	r0, #81	; 0x51
 800343e:	f7fd faa5 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003442:	20ff      	movs	r0, #255	; 0xff
 8003444:	f7fd fac6 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003448:	2053      	movs	r0, #83	; 0x53
 800344a:	f7fd fa9f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800344e:	202c      	movs	r0, #44	; 0x2c
 8003450:	f7fd fac0 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003454:	2055      	movs	r0, #85	; 0x55
 8003456:	f7fd fa99 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800345a:	2082      	movs	r0, #130	; 0x82
 800345c:	f7fd faba 	bl	80009d4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003460:	202c      	movs	r0, #44	; 0x2c
 8003462:	f7fd fa93 	bl	800098c <LCD_WR_REG>
 8003466:	f002 bca1 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <LCD_Init+0x1504>)
 800346c:	889b      	ldrh	r3, [r3, #4]
 800346e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003472:	4293      	cmp	r3, r2
 8003474:	f040 8782 	bne.w	800437c <LCD_Init+0x2404>
 8003478:	e002      	b.n	8003480 <LCD_Init+0x1508>
 800347a:	bf00      	nop
 800347c:	20000030 	.word	0x20000030
		LCD_WriteReg(0xF000, 0x55);
 8003480:	2155      	movs	r1, #85	; 0x55
 8003482:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003486:	f7fd fb0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800348a:	21aa      	movs	r1, #170	; 0xaa
 800348c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003490:	f7fd fb08 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003494:	2152      	movs	r1, #82	; 0x52
 8003496:	f24f 0002 	movw	r0, #61442	; 0xf002
 800349a:	f7fd fb03 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800349e:	2108      	movs	r1, #8
 80034a0:	f24f 0003 	movw	r0, #61443	; 0xf003
 80034a4:	f7fd fafe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80034a8:	2101      	movs	r1, #1
 80034aa:	f24f 0004 	movw	r0, #61444	; 0xf004
 80034ae:	f7fd faf9 	bl	8000aa4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80034b2:	210d      	movs	r1, #13
 80034b4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80034b8:	f7fd faf4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80034bc:	210d      	movs	r1, #13
 80034be:	f24b 0001 	movw	r0, #45057	; 0xb001
 80034c2:	f7fd faef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80034c6:	210d      	movs	r1, #13
 80034c8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80034cc:	f7fd faea 	bl	8000aa4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80034d0:	2134      	movs	r1, #52	; 0x34
 80034d2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80034d6:	f7fd fae5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80034da:	2134      	movs	r1, #52	; 0x34
 80034dc:	f24b 6001 	movw	r0, #46593	; 0xb601
 80034e0:	f7fd fae0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80034e4:	2134      	movs	r1, #52	; 0x34
 80034e6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80034ea:	f7fd fadb 	bl	8000aa4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80034ee:	210d      	movs	r1, #13
 80034f0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80034f4:	f7fd fad6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80034f8:	210d      	movs	r1, #13
 80034fa:	f24b 1001 	movw	r0, #45313	; 0xb101
 80034fe:	f7fd fad1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003502:	210d      	movs	r1, #13
 8003504:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003508:	f7fd facc 	bl	8000aa4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800350c:	2134      	movs	r1, #52	; 0x34
 800350e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003512:	f7fd fac7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003516:	2134      	movs	r1, #52	; 0x34
 8003518:	f24b 7001 	movw	r0, #46849	; 0xb701
 800351c:	f7fd fac2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003520:	2134      	movs	r1, #52	; 0x34
 8003522:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003526:	f7fd fabd 	bl	8000aa4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800352a:	2100      	movs	r1, #0
 800352c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003530:	f7fd fab8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003534:	2100      	movs	r1, #0
 8003536:	f24b 2001 	movw	r0, #45569	; 0xb201
 800353a:	f7fd fab3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800353e:	2100      	movs	r1, #0
 8003540:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003544:	f7fd faae 	bl	8000aa4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003548:	2124      	movs	r1, #36	; 0x24
 800354a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800354e:	f7fd faa9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003552:	2124      	movs	r1, #36	; 0x24
 8003554:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003558:	f7fd faa4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800355c:	2124      	movs	r1, #36	; 0x24
 800355e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003562:	f7fd fa9f 	bl	8000aa4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003566:	2101      	movs	r1, #1
 8003568:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800356c:	f7fd fa9a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003570:	210f      	movs	r1, #15
 8003572:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003576:	f7fd fa95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800357a:	210f      	movs	r1, #15
 800357c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003580:	f7fd fa90 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003584:	210f      	movs	r1, #15
 8003586:	f24b 3002 	movw	r0, #45826	; 0xb302
 800358a:	f7fd fa8b 	bl	8000aa4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800358e:	2134      	movs	r1, #52	; 0x34
 8003590:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003594:	f7fd fa86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003598:	2134      	movs	r1, #52	; 0x34
 800359a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800359e:	f7fd fa81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80035a2:	2134      	movs	r1, #52	; 0x34
 80035a4:	f64b 1002 	movw	r0, #47362	; 0xb902
 80035a8:	f7fd fa7c 	bl	8000aa4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80035ac:	2108      	movs	r1, #8
 80035ae:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80035b2:	f7fd fa77 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80035b6:	2108      	movs	r1, #8
 80035b8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80035bc:	f7fd fa72 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80035c0:	2108      	movs	r1, #8
 80035c2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80035c6:	f7fd fa6d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80035ca:	2103      	movs	r1, #3
 80035cc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80035d0:	f7fd fa68 	bl	8000aa4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80035d4:	2124      	movs	r1, #36	; 0x24
 80035d6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80035da:	f7fd fa63 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80035de:	2124      	movs	r1, #36	; 0x24
 80035e0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80035e4:	f7fd fa5e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80035e8:	2124      	movs	r1, #36	; 0x24
 80035ea:	f64b 2002 	movw	r0, #47618	; 0xba02
 80035ee:	f7fd fa59 	bl	8000aa4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80035f2:	2100      	movs	r1, #0
 80035f4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80035f8:	f7fd fa54 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80035fc:	2178      	movs	r1, #120	; 0x78
 80035fe:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003602:	f7fd fa4f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003606:	2100      	movs	r1, #0
 8003608:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800360c:	f7fd fa4a 	bl	8000aa4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003610:	2100      	movs	r1, #0
 8003612:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003616:	f7fd fa45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800361a:	2178      	movs	r1, #120	; 0x78
 800361c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003620:	f7fd fa40 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003624:	2100      	movs	r1, #0
 8003626:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800362a:	f7fd fa3b 	bl	8000aa4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800362e:	2100      	movs	r1, #0
 8003630:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003634:	f7fd fa36 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003638:	2164      	movs	r1, #100	; 0x64
 800363a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800363e:	f7fd fa31 	bl	8000aa4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003642:	2100      	movs	r1, #0
 8003644:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003648:	f7fd fa2c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800364c:	2133      	movs	r1, #51	; 0x33
 800364e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003652:	f7fd fa27 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003656:	2100      	movs	r1, #0
 8003658:	f24d 1002 	movw	r0, #53506	; 0xd102
 800365c:	f7fd fa22 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003660:	2134      	movs	r1, #52	; 0x34
 8003662:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003666:	f7fd fa1d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800366a:	2100      	movs	r1, #0
 800366c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003670:	f7fd fa18 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003674:	213a      	movs	r1, #58	; 0x3a
 8003676:	f24d 1005 	movw	r0, #53509	; 0xd105
 800367a:	f7fd fa13 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800367e:	2100      	movs	r1, #0
 8003680:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003684:	f7fd fa0e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003688:	214a      	movs	r1, #74	; 0x4a
 800368a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800368e:	f7fd fa09 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003692:	2100      	movs	r1, #0
 8003694:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003698:	f7fd fa04 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800369c:	215c      	movs	r1, #92	; 0x5c
 800369e:	f24d 1009 	movw	r0, #53513	; 0xd109
 80036a2:	f7fd f9ff 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80036ac:	f7fd f9fa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80036b0:	2181      	movs	r1, #129	; 0x81
 80036b2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80036b6:	f7fd f9f5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80036c0:	f7fd f9f0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80036c4:	21a6      	movs	r1, #166	; 0xa6
 80036c6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80036ca:	f7fd f9eb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80036ce:	2100      	movs	r1, #0
 80036d0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80036d4:	f7fd f9e6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80036d8:	21e5      	movs	r1, #229	; 0xe5
 80036da:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80036de:	f7fd f9e1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80036e2:	2101      	movs	r1, #1
 80036e4:	f24d 1010 	movw	r0, #53520	; 0xd110
 80036e8:	f7fd f9dc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80036ec:	2113      	movs	r1, #19
 80036ee:	f24d 1011 	movw	r0, #53521	; 0xd111
 80036f2:	f7fd f9d7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80036f6:	2101      	movs	r1, #1
 80036f8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80036fc:	f7fd f9d2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003700:	2154      	movs	r1, #84	; 0x54
 8003702:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003706:	f7fd f9cd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800370a:	2101      	movs	r1, #1
 800370c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003710:	f7fd f9c8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003714:	2182      	movs	r1, #130	; 0x82
 8003716:	f24d 1015 	movw	r0, #53525	; 0xd115
 800371a:	f7fd f9c3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800371e:	2101      	movs	r1, #1
 8003720:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003724:	f7fd f9be 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003728:	21ca      	movs	r1, #202	; 0xca
 800372a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800372e:	f7fd f9b9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003732:	2102      	movs	r1, #2
 8003734:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003738:	f7fd f9b4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800373c:	2100      	movs	r1, #0
 800373e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003742:	f7fd f9af 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003746:	2102      	movs	r1, #2
 8003748:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800374c:	f7fd f9aa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003750:	2101      	movs	r1, #1
 8003752:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003756:	f7fd f9a5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800375a:	2102      	movs	r1, #2
 800375c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003760:	f7fd f9a0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003764:	2134      	movs	r1, #52	; 0x34
 8003766:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800376a:	f7fd f99b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800376e:	2102      	movs	r1, #2
 8003770:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003774:	f7fd f996 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003778:	2167      	movs	r1, #103	; 0x67
 800377a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800377e:	f7fd f991 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003782:	2102      	movs	r1, #2
 8003784:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003788:	f7fd f98c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800378c:	2184      	movs	r1, #132	; 0x84
 800378e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003792:	f7fd f987 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003796:	2102      	movs	r1, #2
 8003798:	f24d 1022 	movw	r0, #53538	; 0xd122
 800379c:	f7fd f982 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80037a0:	21a4      	movs	r1, #164	; 0xa4
 80037a2:	f24d 1023 	movw	r0, #53539	; 0xd123
 80037a6:	f7fd f97d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80037aa:	2102      	movs	r1, #2
 80037ac:	f24d 1024 	movw	r0, #53540	; 0xd124
 80037b0:	f7fd f978 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80037b4:	21b7      	movs	r1, #183	; 0xb7
 80037b6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80037ba:	f7fd f973 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80037be:	2102      	movs	r1, #2
 80037c0:	f24d 1026 	movw	r0, #53542	; 0xd126
 80037c4:	f7fd f96e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80037c8:	21cf      	movs	r1, #207	; 0xcf
 80037ca:	f24d 1027 	movw	r0, #53543	; 0xd127
 80037ce:	f7fd f969 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80037d2:	2102      	movs	r1, #2
 80037d4:	f24d 1028 	movw	r0, #53544	; 0xd128
 80037d8:	f7fd f964 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80037dc:	21de      	movs	r1, #222	; 0xde
 80037de:	f24d 1029 	movw	r0, #53545	; 0xd129
 80037e2:	f7fd f95f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80037e6:	2102      	movs	r1, #2
 80037e8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80037ec:	f7fd f95a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80037f0:	21f2      	movs	r1, #242	; 0xf2
 80037f2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80037f6:	f7fd f955 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80037fa:	2102      	movs	r1, #2
 80037fc:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003800:	f7fd f950 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003804:	21fe      	movs	r1, #254	; 0xfe
 8003806:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800380a:	f7fd f94b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800380e:	2103      	movs	r1, #3
 8003810:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003814:	f7fd f946 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003818:	2110      	movs	r1, #16
 800381a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800381e:	f7fd f941 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003822:	2103      	movs	r1, #3
 8003824:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003828:	f7fd f93c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800382c:	2133      	movs	r1, #51	; 0x33
 800382e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003832:	f7fd f937 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003836:	2103      	movs	r1, #3
 8003838:	f24d 1032 	movw	r0, #53554	; 0xd132
 800383c:	f7fd f932 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003840:	216d      	movs	r1, #109	; 0x6d
 8003842:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003846:	f7fd f92d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800384a:	2100      	movs	r1, #0
 800384c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003850:	f7fd f928 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003854:	2133      	movs	r1, #51	; 0x33
 8003856:	f24d 2001 	movw	r0, #53761	; 0xd201
 800385a:	f7fd f923 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800385e:	2100      	movs	r1, #0
 8003860:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003864:	f7fd f91e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003868:	2134      	movs	r1, #52	; 0x34
 800386a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800386e:	f7fd f919 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003872:	2100      	movs	r1, #0
 8003874:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003878:	f7fd f914 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 800387c:	213a      	movs	r1, #58	; 0x3a
 800387e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003882:	f7fd f90f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003886:	2100      	movs	r1, #0
 8003888:	f24d 2006 	movw	r0, #53766	; 0xd206
 800388c:	f7fd f90a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003890:	214a      	movs	r1, #74	; 0x4a
 8003892:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003896:	f7fd f905 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800389a:	2100      	movs	r1, #0
 800389c:	f24d 2008 	movw	r0, #53768	; 0xd208
 80038a0:	f7fd f900 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80038a4:	215c      	movs	r1, #92	; 0x5c
 80038a6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80038aa:	f7fd f8fb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80038ae:	2100      	movs	r1, #0
 80038b0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80038b4:	f7fd f8f6 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80038b8:	2181      	movs	r1, #129	; 0x81
 80038ba:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80038be:	f7fd f8f1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80038c2:	2100      	movs	r1, #0
 80038c4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80038c8:	f7fd f8ec 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80038cc:	21a6      	movs	r1, #166	; 0xa6
 80038ce:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80038d2:	f7fd f8e7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80038d6:	2100      	movs	r1, #0
 80038d8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80038dc:	f7fd f8e2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80038e0:	21e5      	movs	r1, #229	; 0xe5
 80038e2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80038e6:	f7fd f8dd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80038ea:	2101      	movs	r1, #1
 80038ec:	f24d 2010 	movw	r0, #53776	; 0xd210
 80038f0:	f7fd f8d8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80038f4:	2113      	movs	r1, #19
 80038f6:	f24d 2011 	movw	r0, #53777	; 0xd211
 80038fa:	f7fd f8d3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80038fe:	2101      	movs	r1, #1
 8003900:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003904:	f7fd f8ce 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003908:	2154      	movs	r1, #84	; 0x54
 800390a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800390e:	f7fd f8c9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003912:	2101      	movs	r1, #1
 8003914:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003918:	f7fd f8c4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800391c:	2182      	movs	r1, #130	; 0x82
 800391e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003922:	f7fd f8bf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003926:	2101      	movs	r1, #1
 8003928:	f24d 2016 	movw	r0, #53782	; 0xd216
 800392c:	f7fd f8ba 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003930:	21ca      	movs	r1, #202	; 0xca
 8003932:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003936:	f7fd f8b5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800393a:	2102      	movs	r1, #2
 800393c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003940:	f7fd f8b0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003944:	2100      	movs	r1, #0
 8003946:	f24d 2019 	movw	r0, #53785	; 0xd219
 800394a:	f7fd f8ab 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800394e:	2102      	movs	r1, #2
 8003950:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003954:	f7fd f8a6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003958:	2101      	movs	r1, #1
 800395a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800395e:	f7fd f8a1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003962:	2102      	movs	r1, #2
 8003964:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003968:	f7fd f89c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800396c:	2134      	movs	r1, #52	; 0x34
 800396e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003972:	f7fd f897 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003976:	2102      	movs	r1, #2
 8003978:	f24d 201e 	movw	r0, #53790	; 0xd21e
 800397c:	f7fd f892 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003980:	2167      	movs	r1, #103	; 0x67
 8003982:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003986:	f7fd f88d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800398a:	2102      	movs	r1, #2
 800398c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003990:	f7fd f888 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003994:	2184      	movs	r1, #132	; 0x84
 8003996:	f24d 2021 	movw	r0, #53793	; 0xd221
 800399a:	f7fd f883 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800399e:	2102      	movs	r1, #2
 80039a0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80039a4:	f7fd f87e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80039a8:	21a4      	movs	r1, #164	; 0xa4
 80039aa:	f24d 2023 	movw	r0, #53795	; 0xd223
 80039ae:	f7fd f879 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80039b2:	2102      	movs	r1, #2
 80039b4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80039b8:	f7fd f874 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80039bc:	21b7      	movs	r1, #183	; 0xb7
 80039be:	f24d 2025 	movw	r0, #53797	; 0xd225
 80039c2:	f7fd f86f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f24d 2026 	movw	r0, #53798	; 0xd226
 80039cc:	f7fd f86a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80039d0:	21cf      	movs	r1, #207	; 0xcf
 80039d2:	f24d 2027 	movw	r0, #53799	; 0xd227
 80039d6:	f7fd f865 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80039da:	2102      	movs	r1, #2
 80039dc:	f24d 2028 	movw	r0, #53800	; 0xd228
 80039e0:	f7fd f860 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80039e4:	21de      	movs	r1, #222	; 0xde
 80039e6:	f24d 2029 	movw	r0, #53801	; 0xd229
 80039ea:	f7fd f85b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80039ee:	2102      	movs	r1, #2
 80039f0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80039f4:	f7fd f856 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80039f8:	21f2      	movs	r1, #242	; 0xf2
 80039fa:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80039fe:	f7fd f851 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003a02:	2102      	movs	r1, #2
 8003a04:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003a08:	f7fd f84c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003a0c:	21fe      	movs	r1, #254	; 0xfe
 8003a0e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003a12:	f7fd f847 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003a16:	2103      	movs	r1, #3
 8003a18:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003a1c:	f7fd f842 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003a20:	2110      	movs	r1, #16
 8003a22:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003a26:	f7fd f83d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003a30:	f7fd f838 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003a34:	2133      	movs	r1, #51	; 0x33
 8003a36:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003a3a:	f7fd f833 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003a3e:	2103      	movs	r1, #3
 8003a40:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003a44:	f7fd f82e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003a48:	216d      	movs	r1, #109	; 0x6d
 8003a4a:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003a4e:	f7fd f829 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003a52:	2100      	movs	r1, #0
 8003a54:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003a58:	f7fd f824 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003a5c:	2133      	movs	r1, #51	; 0x33
 8003a5e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003a62:	f7fd f81f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003a66:	2100      	movs	r1, #0
 8003a68:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003a6c:	f7fd f81a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003a70:	2134      	movs	r1, #52	; 0x34
 8003a72:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003a76:	f7fd f815 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003a80:	f7fd f810 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003a84:	213a      	movs	r1, #58	; 0x3a
 8003a86:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003a8a:	f7fd f80b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003a94:	f7fd f806 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003a98:	214a      	movs	r1, #74	; 0x4a
 8003a9a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003a9e:	f7fd f801 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003aa8:	f7fc fffc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003aac:	215c      	movs	r1, #92	; 0x5c
 8003aae:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003ab2:	f7fc fff7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003abc:	f7fc fff2 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003ac0:	2181      	movs	r1, #129	; 0x81
 8003ac2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003ac6:	f7fc ffed 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003aca:	2100      	movs	r1, #0
 8003acc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003ad0:	f7fc ffe8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003ad4:	21a6      	movs	r1, #166	; 0xa6
 8003ad6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003ada:	f7fc ffe3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003ae4:	f7fc ffde 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003ae8:	21e5      	movs	r1, #229	; 0xe5
 8003aea:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003aee:	f7fc ffd9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003af2:	2101      	movs	r1, #1
 8003af4:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003af8:	f7fc ffd4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003afc:	2113      	movs	r1, #19
 8003afe:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003b02:	f7fc ffcf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003b06:	2101      	movs	r1, #1
 8003b08:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003b0c:	f7fc ffca 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003b10:	2154      	movs	r1, #84	; 0x54
 8003b12:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003b16:	f7fc ffc5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003b20:	f7fc ffc0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003b24:	2182      	movs	r1, #130	; 0x82
 8003b26:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003b2a:	f7fc ffbb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003b34:	f7fc ffb6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003b38:	21ca      	movs	r1, #202	; 0xca
 8003b3a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003b3e:	f7fc ffb1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003b42:	2102      	movs	r1, #2
 8003b44:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003b48:	f7fc ffac 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003b52:	f7fc ffa7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003b56:	2102      	movs	r1, #2
 8003b58:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003b5c:	f7fc ffa2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003b60:	2101      	movs	r1, #1
 8003b62:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003b66:	f7fc ff9d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003b70:	f7fc ff98 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003b74:	2134      	movs	r1, #52	; 0x34
 8003b76:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003b7a:	f7fc ff93 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003b7e:	2102      	movs	r1, #2
 8003b80:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003b84:	f7fc ff8e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003b88:	2167      	movs	r1, #103	; 0x67
 8003b8a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003b8e:	f7fc ff89 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003b92:	2102      	movs	r1, #2
 8003b94:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003b98:	f7fc ff84 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003b9c:	2184      	movs	r1, #132	; 0x84
 8003b9e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003ba2:	f7fc ff7f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003bac:	f7fc ff7a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003bb0:	21a4      	movs	r1, #164	; 0xa4
 8003bb2:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003bb6:	f7fc ff75 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003bc0:	f7fc ff70 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003bc4:	21b7      	movs	r1, #183	; 0xb7
 8003bc6:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003bca:	f7fc ff6b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003bd4:	f7fc ff66 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003bd8:	21cf      	movs	r1, #207	; 0xcf
 8003bda:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003bde:	f7fc ff61 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003be2:	2102      	movs	r1, #2
 8003be4:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003be8:	f7fc ff5c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003bec:	21de      	movs	r1, #222	; 0xde
 8003bee:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003bf2:	f7fc ff57 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003bfc:	f7fc ff52 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003c00:	21f2      	movs	r1, #242	; 0xf2
 8003c02:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003c06:	f7fc ff4d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003c10:	f7fc ff48 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003c14:	21fe      	movs	r1, #254	; 0xfe
 8003c16:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003c1a:	f7fc ff43 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003c1e:	2103      	movs	r1, #3
 8003c20:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003c24:	f7fc ff3e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003c28:	2110      	movs	r1, #16
 8003c2a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003c2e:	f7fc ff39 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003c32:	2103      	movs	r1, #3
 8003c34:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003c38:	f7fc ff34 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003c3c:	2133      	movs	r1, #51	; 0x33
 8003c3e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003c42:	f7fc ff2f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003c46:	2103      	movs	r1, #3
 8003c48:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003c4c:	f7fc ff2a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003c50:	216d      	movs	r1, #109	; 0x6d
 8003c52:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003c56:	f7fc ff25 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003c60:	f7fc ff20 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003c64:	2133      	movs	r1, #51	; 0x33
 8003c66:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003c6a:	f7fc ff1b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003c74:	f7fc ff16 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003c78:	2134      	movs	r1, #52	; 0x34
 8003c7a:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003c7e:	f7fc ff11 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003c82:	2100      	movs	r1, #0
 8003c84:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003c88:	f7fc ff0c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003c8c:	213a      	movs	r1, #58	; 0x3a
 8003c8e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003c92:	f7fc ff07 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003c96:	2100      	movs	r1, #0
 8003c98:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003c9c:	f7fc ff02 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003ca0:	214a      	movs	r1, #74	; 0x4a
 8003ca2:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003ca6:	f7fc fefd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003caa:	2100      	movs	r1, #0
 8003cac:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003cb0:	f7fc fef8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003cb4:	215c      	movs	r1, #92	; 0x5c
 8003cb6:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003cba:	f7fc fef3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003cc4:	f7fc feee 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003cc8:	2181      	movs	r1, #129	; 0x81
 8003cca:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003cce:	f7fc fee9 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003cd8:	f7fc fee4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003cdc:	21a6      	movs	r1, #166	; 0xa6
 8003cde:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003ce2:	f7fc fedf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003cec:	f7fc feda 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003cf0:	21e5      	movs	r1, #229	; 0xe5
 8003cf2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003cf6:	f7fc fed5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003d00:	f7fc fed0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003d04:	2113      	movs	r1, #19
 8003d06:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003d0a:	f7fc fecb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003d0e:	2101      	movs	r1, #1
 8003d10:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003d14:	f7fc fec6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003d18:	2154      	movs	r1, #84	; 0x54
 8003d1a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003d1e:	f7fc fec1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003d22:	2101      	movs	r1, #1
 8003d24:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003d28:	f7fc febc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003d2c:	2182      	movs	r1, #130	; 0x82
 8003d2e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003d32:	f7fc feb7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003d36:	2101      	movs	r1, #1
 8003d38:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003d3c:	f7fc feb2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003d40:	21ca      	movs	r1, #202	; 0xca
 8003d42:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003d46:	f7fc fead 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003d50:	f7fc fea8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003d54:	2100      	movs	r1, #0
 8003d56:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003d5a:	f7fc fea3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003d5e:	2102      	movs	r1, #2
 8003d60:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003d64:	f7fc fe9e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003d68:	2101      	movs	r1, #1
 8003d6a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003d6e:	f7fc fe99 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003d72:	2102      	movs	r1, #2
 8003d74:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003d78:	f7fc fe94 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003d7c:	2134      	movs	r1, #52	; 0x34
 8003d7e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003d82:	f7fc fe8f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003d86:	2102      	movs	r1, #2
 8003d88:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003d8c:	f7fc fe8a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003d90:	2167      	movs	r1, #103	; 0x67
 8003d92:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003d96:	f7fc fe85 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003da0:	f7fc fe80 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003da4:	2184      	movs	r1, #132	; 0x84
 8003da6:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003daa:	f7fc fe7b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003db4:	f7fc fe76 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003db8:	21a4      	movs	r1, #164	; 0xa4
 8003dba:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003dbe:	f7fc fe71 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003dc8:	f7fc fe6c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003dcc:	21b7      	movs	r1, #183	; 0xb7
 8003dce:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003dd2:	f7fc fe67 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003ddc:	f7fc fe62 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003de0:	21cf      	movs	r1, #207	; 0xcf
 8003de2:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003de6:	f7fc fe5d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003df0:	f7fc fe58 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003df4:	21de      	movs	r1, #222	; 0xde
 8003df6:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003dfa:	f7fc fe53 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003e04:	f7fc fe4e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003e08:	21f2      	movs	r1, #242	; 0xf2
 8003e0a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003e0e:	f7fc fe49 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003e12:	2102      	movs	r1, #2
 8003e14:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003e18:	f7fc fe44 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003e1c:	21fe      	movs	r1, #254	; 0xfe
 8003e1e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003e22:	f7fc fe3f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003e26:	2103      	movs	r1, #3
 8003e28:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003e2c:	f7fc fe3a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003e30:	2110      	movs	r1, #16
 8003e32:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003e36:	f7fc fe35 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003e40:	f7fc fe30 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003e44:	2133      	movs	r1, #51	; 0x33
 8003e46:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003e4a:	f7fc fe2b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003e4e:	2103      	movs	r1, #3
 8003e50:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003e54:	f7fc fe26 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003e58:	216d      	movs	r1, #109	; 0x6d
 8003e5a:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003e5e:	f7fc fe21 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003e62:	2100      	movs	r1, #0
 8003e64:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003e68:	f7fc fe1c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003e6c:	2133      	movs	r1, #51	; 0x33
 8003e6e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003e72:	f7fc fe17 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003e76:	2100      	movs	r1, #0
 8003e78:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003e7c:	f7fc fe12 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003e80:	2134      	movs	r1, #52	; 0x34
 8003e82:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003e86:	f7fc fe0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003e90:	f7fc fe08 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003e94:	213a      	movs	r1, #58	; 0x3a
 8003e96:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003e9a:	f7fc fe03 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003ea4:	f7fc fdfe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003ea8:	214a      	movs	r1, #74	; 0x4a
 8003eaa:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003eae:	f7fc fdf9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003eb8:	f7fc fdf4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003ebc:	215c      	movs	r1, #92	; 0x5c
 8003ebe:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003ec2:	f7fc fdef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003ecc:	f7fc fdea 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003ed0:	2181      	movs	r1, #129	; 0x81
 8003ed2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003ed6:	f7fc fde5 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003eda:	2100      	movs	r1, #0
 8003edc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003ee0:	f7fc fde0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003ee4:	21a6      	movs	r1, #166	; 0xa6
 8003ee6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003eea:	f7fc fddb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003eee:	2100      	movs	r1, #0
 8003ef0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003ef4:	f7fc fdd6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003ef8:	21e5      	movs	r1, #229	; 0xe5
 8003efa:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003efe:	f7fc fdd1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003f02:	2101      	movs	r1, #1
 8003f04:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003f08:	f7fc fdcc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003f0c:	2113      	movs	r1, #19
 8003f0e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003f12:	f7fc fdc7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003f16:	2101      	movs	r1, #1
 8003f18:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003f1c:	f7fc fdc2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003f20:	2154      	movs	r1, #84	; 0x54
 8003f22:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003f26:	f7fc fdbd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003f30:	f7fc fdb8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003f34:	2182      	movs	r1, #130	; 0x82
 8003f36:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003f3a:	f7fc fdb3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003f3e:	2101      	movs	r1, #1
 8003f40:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003f44:	f7fc fdae 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003f48:	21ca      	movs	r1, #202	; 0xca
 8003f4a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003f4e:	f7fc fda9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003f52:	2102      	movs	r1, #2
 8003f54:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003f58:	f7fc fda4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003f62:	f7fc fd9f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003f66:	2102      	movs	r1, #2
 8003f68:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003f6c:	f7fc fd9a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003f70:	2101      	movs	r1, #1
 8003f72:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003f76:	f7fc fd95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003f80:	f7fc fd90 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003f84:	2134      	movs	r1, #52	; 0x34
 8003f86:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003f8a:	f7fc fd8b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003f8e:	2102      	movs	r1, #2
 8003f90:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003f94:	f7fc fd86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003f98:	2167      	movs	r1, #103	; 0x67
 8003f9a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003f9e:	f7fc fd81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003fa8:	f7fc fd7c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003fac:	2184      	movs	r1, #132	; 0x84
 8003fae:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003fb2:	f7fc fd77 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003fbc:	f7fc fd72 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003fc0:	21a4      	movs	r1, #164	; 0xa4
 8003fc2:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003fc6:	f7fc fd6d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003fca:	2102      	movs	r1, #2
 8003fcc:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003fd0:	f7fc fd68 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003fd4:	21b7      	movs	r1, #183	; 0xb7
 8003fd6:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003fda:	f7fc fd63 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003fde:	2102      	movs	r1, #2
 8003fe0:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003fe4:	f7fc fd5e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003fe8:	21cf      	movs	r1, #207	; 0xcf
 8003fea:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003fee:	f7fc fd59 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003ff8:	f7fc fd54 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003ffc:	21de      	movs	r1, #222	; 0xde
 8003ffe:	f24d 5029 	movw	r0, #54569	; 0xd529
 8004002:	f7fc fd4f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8004006:	2102      	movs	r1, #2
 8004008:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800400c:	f7fc fd4a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004010:	21f2      	movs	r1, #242	; 0xf2
 8004012:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004016:	f7fc fd45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800401a:	2102      	movs	r1, #2
 800401c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004020:	f7fc fd40 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8004024:	21fe      	movs	r1, #254	; 0xfe
 8004026:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800402a:	f7fc fd3b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800402e:	2103      	movs	r1, #3
 8004030:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004034:	f7fc fd36 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004038:	2110      	movs	r1, #16
 800403a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800403e:	f7fc fd31 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8004042:	2103      	movs	r1, #3
 8004044:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004048:	f7fc fd2c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800404c:	2133      	movs	r1, #51	; 0x33
 800404e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004052:	f7fc fd27 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8004056:	2103      	movs	r1, #3
 8004058:	f24d 5032 	movw	r0, #54578	; 0xd532
 800405c:	f7fc fd22 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004060:	216d      	movs	r1, #109	; 0x6d
 8004062:	f24d 5033 	movw	r0, #54579	; 0xd533
 8004066:	f7fc fd1d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800406a:	2100      	movs	r1, #0
 800406c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004070:	f7fc fd18 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8004074:	2133      	movs	r1, #51	; 0x33
 8004076:	f24d 6001 	movw	r0, #54785	; 0xd601
 800407a:	f7fc fd13 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800407e:	2100      	movs	r1, #0
 8004080:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004084:	f7fc fd0e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004088:	2134      	movs	r1, #52	; 0x34
 800408a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800408e:	f7fc fd09 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8004092:	2100      	movs	r1, #0
 8004094:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004098:	f7fc fd04 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800409c:	213a      	movs	r1, #58	; 0x3a
 800409e:	f24d 6005 	movw	r0, #54789	; 0xd605
 80040a2:	f7fc fcff 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80040a6:	2100      	movs	r1, #0
 80040a8:	f24d 6006 	movw	r0, #54790	; 0xd606
 80040ac:	f7fc fcfa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80040b0:	214a      	movs	r1, #74	; 0x4a
 80040b2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80040b6:	f7fc fcf5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80040ba:	2100      	movs	r1, #0
 80040bc:	f24d 6008 	movw	r0, #54792	; 0xd608
 80040c0:	f7fc fcf0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80040c4:	215c      	movs	r1, #92	; 0x5c
 80040c6:	f24d 6009 	movw	r0, #54793	; 0xd609
 80040ca:	f7fc fceb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80040ce:	2100      	movs	r1, #0
 80040d0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80040d4:	f7fc fce6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80040d8:	2181      	movs	r1, #129	; 0x81
 80040da:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80040de:	f7fc fce1 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80040e2:	2100      	movs	r1, #0
 80040e4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80040e8:	f7fc fcdc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80040ec:	21a6      	movs	r1, #166	; 0xa6
 80040ee:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80040f2:	f7fc fcd7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80040f6:	2100      	movs	r1, #0
 80040f8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80040fc:	f7fc fcd2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004100:	21e5      	movs	r1, #229	; 0xe5
 8004102:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004106:	f7fc fccd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 800410a:	2101      	movs	r1, #1
 800410c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004110:	f7fc fcc8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004114:	2113      	movs	r1, #19
 8004116:	f24d 6011 	movw	r0, #54801	; 0xd611
 800411a:	f7fc fcc3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800411e:	2101      	movs	r1, #1
 8004120:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004124:	f7fc fcbe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004128:	2154      	movs	r1, #84	; 0x54
 800412a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800412e:	f7fc fcb9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004132:	2101      	movs	r1, #1
 8004134:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004138:	f7fc fcb4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800413c:	2182      	movs	r1, #130	; 0x82
 800413e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004142:	f7fc fcaf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004146:	2101      	movs	r1, #1
 8004148:	f24d 6016 	movw	r0, #54806	; 0xd616
 800414c:	f7fc fcaa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004150:	21ca      	movs	r1, #202	; 0xca
 8004152:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004156:	f7fc fca5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800415a:	2102      	movs	r1, #2
 800415c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004160:	f7fc fca0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004164:	2100      	movs	r1, #0
 8004166:	f24d 6019 	movw	r0, #54809	; 0xd619
 800416a:	f7fc fc9b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800416e:	2102      	movs	r1, #2
 8004170:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004174:	f7fc fc96 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004178:	2101      	movs	r1, #1
 800417a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800417e:	f7fc fc91 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004182:	2102      	movs	r1, #2
 8004184:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004188:	f7fc fc8c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800418c:	2134      	movs	r1, #52	; 0x34
 800418e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004192:	f7fc fc87 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004196:	2102      	movs	r1, #2
 8004198:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800419c:	f7fc fc82 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80041a0:	2167      	movs	r1, #103	; 0x67
 80041a2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80041a6:	f7fc fc7d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80041aa:	2102      	movs	r1, #2
 80041ac:	f24d 6020 	movw	r0, #54816	; 0xd620
 80041b0:	f7fc fc78 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80041b4:	2184      	movs	r1, #132	; 0x84
 80041b6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80041ba:	f7fc fc73 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80041be:	2102      	movs	r1, #2
 80041c0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80041c4:	f7fc fc6e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80041c8:	21a4      	movs	r1, #164	; 0xa4
 80041ca:	f24d 6023 	movw	r0, #54819	; 0xd623
 80041ce:	f7fc fc69 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80041d2:	2102      	movs	r1, #2
 80041d4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80041d8:	f7fc fc64 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80041dc:	21b7      	movs	r1, #183	; 0xb7
 80041de:	f24d 6025 	movw	r0, #54821	; 0xd625
 80041e2:	f7fc fc5f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80041e6:	2102      	movs	r1, #2
 80041e8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80041ec:	f7fc fc5a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80041f0:	21cf      	movs	r1, #207	; 0xcf
 80041f2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80041f6:	f7fc fc55 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80041fa:	2102      	movs	r1, #2
 80041fc:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004200:	f7fc fc50 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8004204:	21de      	movs	r1, #222	; 0xde
 8004206:	f24d 6029 	movw	r0, #54825	; 0xd629
 800420a:	f7fc fc4b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 800420e:	2102      	movs	r1, #2
 8004210:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004214:	f7fc fc46 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004218:	21f2      	movs	r1, #242	; 0xf2
 800421a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800421e:	f7fc fc41 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004222:	2102      	movs	r1, #2
 8004224:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004228:	f7fc fc3c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800422c:	21fe      	movs	r1, #254	; 0xfe
 800422e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004232:	f7fc fc37 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004236:	2103      	movs	r1, #3
 8004238:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800423c:	f7fc fc32 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004240:	2110      	movs	r1, #16
 8004242:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004246:	f7fc fc2d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800424a:	2103      	movs	r1, #3
 800424c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004250:	f7fc fc28 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004254:	2133      	movs	r1, #51	; 0x33
 8004256:	f24d 6031 	movw	r0, #54833	; 0xd631
 800425a:	f7fc fc23 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800425e:	2103      	movs	r1, #3
 8004260:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004264:	f7fc fc1e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004268:	216d      	movs	r1, #109	; 0x6d
 800426a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800426e:	f7fc fc19 	bl	8000aa4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004272:	2155      	movs	r1, #85	; 0x55
 8004274:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004278:	f7fc fc14 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800427c:	21aa      	movs	r1, #170	; 0xaa
 800427e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004282:	f7fc fc0f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004286:	2152      	movs	r1, #82	; 0x52
 8004288:	f24f 0002 	movw	r0, #61442	; 0xf002
 800428c:	f7fc fc0a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004290:	2108      	movs	r1, #8
 8004292:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004296:	f7fc fc05 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800429a:	2100      	movs	r1, #0
 800429c:	f24f 0004 	movw	r0, #61444	; 0xf004
 80042a0:	f7fc fc00 	bl	8000aa4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80042a4:	21cc      	movs	r1, #204	; 0xcc
 80042a6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80042aa:	f7fc fbfb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80042ae:	2100      	movs	r1, #0
 80042b0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80042b4:	f7fc fbf6 	bl	8000aa4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80042b8:	2105      	movs	r1, #5
 80042ba:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80042be:	f7fc fbf1 	bl	8000aa4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80042c2:	2170      	movs	r1, #112	; 0x70
 80042c4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80042c8:	f7fc fbec 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80042cc:	2170      	movs	r1, #112	; 0x70
 80042ce:	f24b 7001 	movw	r0, #46849	; 0xb701
 80042d2:	f7fc fbe7 	bl	8000aa4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80042d6:	2101      	movs	r1, #1
 80042d8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80042dc:	f7fc fbe2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80042e0:	2103      	movs	r1, #3
 80042e2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80042e6:	f7fc fbdd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80042ea:	2103      	movs	r1, #3
 80042ec:	f64b 0002 	movw	r0, #47106	; 0xb802
 80042f0:	f7fc fbd8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80042f4:	2103      	movs	r1, #3
 80042f6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80042fa:	f7fc fbd3 	bl	8000aa4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80042fe:	2102      	movs	r1, #2
 8004300:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004304:	f7fc fbce 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004308:	2100      	movs	r1, #0
 800430a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800430e:	f7fc fbc9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004312:	2100      	movs	r1, #0
 8004314:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004318:	f7fc fbc4 	bl	8000aa4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800431c:	21d0      	movs	r1, #208	; 0xd0
 800431e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004322:	f7fc fbbf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004326:	2102      	movs	r1, #2
 8004328:	f64c 1001 	movw	r0, #51457	; 0xc901
 800432c:	f7fc fbba 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004330:	2150      	movs	r1, #80	; 0x50
 8004332:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004336:	f7fc fbb5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800433a:	2150      	movs	r1, #80	; 0x50
 800433c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004340:	f7fc fbb0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004344:	2150      	movs	r1, #80	; 0x50
 8004346:	f64c 1004 	movw	r0, #51460	; 0xc904
 800434a:	f7fc fbab 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800434e:	2100      	movs	r1, #0
 8004350:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004354:	f7fc fba6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004358:	2155      	movs	r1, #85	; 0x55
 800435a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800435e:	f7fc fba1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004362:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004366:	f7fc fb11 	bl	800098c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800436a:	2001      	movs	r0, #1
 800436c:	f002 f9d0 	bl	8006710 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004370:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004374:	f7fc fb0a 	bl	800098c <LCD_WR_REG>
 8004378:	f001 bd18 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800437c:	4bec      	ldr	r3, [pc, #944]	; (8004730 <LCD_Init+0x27b8>)
 800437e:	889b      	ldrh	r3, [r3, #4]
 8004380:	f249 3225 	movw	r2, #37669	; 0x9325
 8004384:	4293      	cmp	r3, r2
 8004386:	f040 80d7 	bne.w	8004538 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800438a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800438e:	20e5      	movs	r0, #229	; 0xe5
 8004390:	f7fc fb88 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004398:	2001      	movs	r0, #1
 800439a:	f7fc fb83 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800439e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80043a2:	2002      	movs	r0, #2
 80043a4:	f7fc fb7e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80043a8:	f241 0130 	movw	r1, #4144	; 0x1030
 80043ac:	2003      	movs	r0, #3
 80043ae:	f7fc fb79 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80043b2:	2100      	movs	r1, #0
 80043b4:	2004      	movs	r0, #4
 80043b6:	f7fc fb75 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80043ba:	f240 2102 	movw	r1, #514	; 0x202
 80043be:	2008      	movs	r0, #8
 80043c0:	f7fc fb70 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80043c4:	2100      	movs	r1, #0
 80043c6:	2009      	movs	r0, #9
 80043c8:	f7fc fb6c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80043cc:	2100      	movs	r1, #0
 80043ce:	200a      	movs	r0, #10
 80043d0:	f7fc fb68 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80043d4:	2100      	movs	r1, #0
 80043d6:	200c      	movs	r0, #12
 80043d8:	f7fc fb64 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80043dc:	2100      	movs	r1, #0
 80043de:	200d      	movs	r0, #13
 80043e0:	f7fc fb60 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80043e4:	2100      	movs	r1, #0
 80043e6:	200f      	movs	r0, #15
 80043e8:	f7fc fb5c 	bl	8000aa4 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80043ec:	2100      	movs	r1, #0
 80043ee:	2010      	movs	r0, #16
 80043f0:	f7fc fb58 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80043f4:	2107      	movs	r1, #7
 80043f6:	2011      	movs	r0, #17
 80043f8:	f7fc fb54 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80043fc:	2100      	movs	r1, #0
 80043fe:	2012      	movs	r0, #18
 8004400:	f7fc fb50 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004404:	2100      	movs	r1, #0
 8004406:	2013      	movs	r0, #19
 8004408:	f7fc fb4c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800440c:	2100      	movs	r1, #0
 800440e:	2007      	movs	r0, #7
 8004410:	f7fc fb48 	bl	8000aa4 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004414:	f241 6190 	movw	r1, #5776	; 0x1690
 8004418:	2010      	movs	r0, #16
 800441a:	f7fc fb43 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800441e:	f240 2127 	movw	r1, #551	; 0x227
 8004422:	2011      	movs	r0, #17
 8004424:	f7fc fb3e 	bl	8000aa4 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004428:	219d      	movs	r1, #157	; 0x9d
 800442a:	2012      	movs	r0, #18
 800442c:	f7fc fb3a 	bl	8000aa4 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004430:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004434:	2013      	movs	r0, #19
 8004436:	f7fc fb35 	bl	8000aa4 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800443a:	2125      	movs	r1, #37	; 0x25
 800443c:	2029      	movs	r0, #41	; 0x29
 800443e:	f7fc fb31 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004442:	210d      	movs	r1, #13
 8004444:	202b      	movs	r0, #43	; 0x2b
 8004446:	f7fc fb2d 	bl	8000aa4 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800444a:	2107      	movs	r1, #7
 800444c:	2030      	movs	r0, #48	; 0x30
 800444e:	f7fc fb29 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004452:	f240 3103 	movw	r1, #771	; 0x303
 8004456:	2031      	movs	r0, #49	; 0x31
 8004458:	f7fc fb24 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800445c:	2103      	movs	r1, #3
 800445e:	2032      	movs	r0, #50	; 0x32
 8004460:	f7fc fb20 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004464:	f240 2106 	movw	r1, #518	; 0x206
 8004468:	2035      	movs	r0, #53	; 0x35
 800446a:	f7fc fb1b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800446e:	2108      	movs	r1, #8
 8004470:	2036      	movs	r0, #54	; 0x36
 8004472:	f7fc fb17 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004476:	f240 4106 	movw	r1, #1030	; 0x406
 800447a:	2037      	movs	r0, #55	; 0x37
 800447c:	f7fc fb12 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004480:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004484:	2038      	movs	r0, #56	; 0x38
 8004486:	f7fc fb0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800448a:	2107      	movs	r1, #7
 800448c:	2039      	movs	r0, #57	; 0x39
 800448e:	f7fc fb09 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004492:	f240 6102 	movw	r1, #1538	; 0x602
 8004496:	203c      	movs	r0, #60	; 0x3c
 8004498:	f7fc fb04 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800449c:	2108      	movs	r1, #8
 800449e:	203d      	movs	r0, #61	; 0x3d
 80044a0:	f7fc fb00 	bl	8000aa4 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80044a4:	2100      	movs	r1, #0
 80044a6:	2050      	movs	r0, #80	; 0x50
 80044a8:	f7fc fafc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80044ac:	21ef      	movs	r1, #239	; 0xef
 80044ae:	2051      	movs	r0, #81	; 0x51
 80044b0:	f7fc faf8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80044b4:	2100      	movs	r1, #0
 80044b6:	2052      	movs	r0, #82	; 0x52
 80044b8:	f7fc faf4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80044bc:	f240 113f 	movw	r1, #319	; 0x13f
 80044c0:	2053      	movs	r0, #83	; 0x53
 80044c2:	f7fc faef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80044c6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80044ca:	2060      	movs	r0, #96	; 0x60
 80044cc:	f7fc faea 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80044d0:	2101      	movs	r1, #1
 80044d2:	2061      	movs	r0, #97	; 0x61
 80044d4:	f7fc fae6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80044d8:	2100      	movs	r1, #0
 80044da:	206a      	movs	r0, #106	; 0x6a
 80044dc:	f7fc fae2 	bl	8000aa4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80044e0:	2100      	movs	r1, #0
 80044e2:	2080      	movs	r0, #128	; 0x80
 80044e4:	f7fc fade 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80044e8:	2100      	movs	r1, #0
 80044ea:	2081      	movs	r0, #129	; 0x81
 80044ec:	f7fc fada 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80044f0:	2100      	movs	r1, #0
 80044f2:	2082      	movs	r0, #130	; 0x82
 80044f4:	f7fc fad6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80044f8:	2100      	movs	r1, #0
 80044fa:	2083      	movs	r0, #131	; 0x83
 80044fc:	f7fc fad2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004500:	2100      	movs	r1, #0
 8004502:	2084      	movs	r0, #132	; 0x84
 8004504:	f7fc face 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004508:	2100      	movs	r1, #0
 800450a:	2085      	movs	r0, #133	; 0x85
 800450c:	f7fc faca 	bl	8000aa4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004510:	2110      	movs	r1, #16
 8004512:	2090      	movs	r0, #144	; 0x90
 8004514:	f7fc fac6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004518:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800451c:	2092      	movs	r0, #146	; 0x92
 800451e:	f7fc fac1 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004522:	f240 1133 	movw	r1, #307	; 0x133
 8004526:	2007      	movs	r0, #7
 8004528:	f7fc fabc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800452c:	2122      	movs	r1, #34	; 0x22
 800452e:	2000      	movs	r0, #0
 8004530:	f7fc fab8 	bl	8000aa4 <LCD_WriteReg>
 8004534:	f001 bc3a 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004538:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <LCD_Init+0x27b8>)
 800453a:	889b      	ldrh	r3, [r3, #4]
 800453c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004540:	4293      	cmp	r3, r2
 8004542:	f040 80f7 	bne.w	8004734 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004546:	f241 018f 	movw	r1, #4239	; 0x108f
 800454a:	20ec      	movs	r0, #236	; 0xec
 800454c:	f7fc faaa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004550:	f241 2134 	movw	r1, #4660	; 0x1234
 8004554:	20ef      	movs	r0, #239	; 0xef
 8004556:	f7fc faa5 	bl	8000aa4 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800455a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800455e:	2001      	movs	r0, #1
 8004560:	f7fc faa0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004564:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004568:	2002      	movs	r0, #2
 800456a:	f7fc fa9b 	bl	8000aa4 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800456e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004572:	2003      	movs	r0, #3
 8004574:	f7fc fa96 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004578:	2100      	movs	r1, #0
 800457a:	2004      	movs	r0, #4
 800457c:	f7fc fa92 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004580:	f240 2102 	movw	r1, #514	; 0x202
 8004584:	2008      	movs	r0, #8
 8004586:	f7fc fa8d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800458a:	2100      	movs	r1, #0
 800458c:	2009      	movs	r0, #9
 800458e:	f7fc fa89 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004592:	2100      	movs	r1, #0
 8004594:	200a      	movs	r0, #10
 8004596:	f7fc fa85 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800459a:	2101      	movs	r1, #1
 800459c:	200c      	movs	r0, #12
 800459e:	f7fc fa81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80045a2:	2100      	movs	r1, #0
 80045a4:	200d      	movs	r0, #13
 80045a6:	f7fc fa7d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80045aa:	2100      	movs	r1, #0
 80045ac:	200f      	movs	r0, #15
 80045ae:	f7fc fa79 	bl	8000aa4 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80045b2:	2100      	movs	r1, #0
 80045b4:	2010      	movs	r0, #16
 80045b6:	f7fc fa75 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80045ba:	2107      	movs	r1, #7
 80045bc:	2011      	movs	r0, #17
 80045be:	f7fc fa71 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80045c2:	2100      	movs	r1, #0
 80045c4:	2012      	movs	r0, #18
 80045c6:	f7fc fa6d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80045ca:	2100      	movs	r1, #0
 80045cc:	2013      	movs	r0, #19
 80045ce:	f7fc fa69 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80045d2:	2101      	movs	r1, #1
 80045d4:	2007      	movs	r0, #7
 80045d6:	f7fc fa65 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 80045da:	2032      	movs	r0, #50	; 0x32
 80045dc:	f002 f898 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80045e0:	f241 4190 	movw	r1, #5264	; 0x1490
 80045e4:	2010      	movs	r0, #16
 80045e6:	f7fc fa5d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80045ea:	f240 2127 	movw	r1, #551	; 0x227
 80045ee:	2011      	movs	r0, #17
 80045f0:	f7fc fa58 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 80045f4:	2032      	movs	r0, #50	; 0x32
 80045f6:	f002 f88b 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80045fa:	218a      	movs	r1, #138	; 0x8a
 80045fc:	2012      	movs	r0, #18
 80045fe:	f7fc fa51 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004602:	2032      	movs	r0, #50	; 0x32
 8004604:	f002 f884 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004608:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800460c:	2013      	movs	r0, #19
 800460e:	f7fc fa49 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004612:	2106      	movs	r1, #6
 8004614:	2029      	movs	r0, #41	; 0x29
 8004616:	f7fc fa45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800461a:	210d      	movs	r1, #13
 800461c:	202b      	movs	r0, #43	; 0x2b
 800461e:	f7fc fa41 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004622:	2032      	movs	r0, #50	; 0x32
 8004624:	f002 f874 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004628:	2100      	movs	r1, #0
 800462a:	2020      	movs	r0, #32
 800462c:	f7fc fa3a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004630:	2100      	movs	r1, #0
 8004632:	2021      	movs	r0, #33	; 0x21
 8004634:	f7fc fa36 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004638:	2032      	movs	r0, #50	; 0x32
 800463a:	f002 f869 	bl	8006710 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800463e:	2100      	movs	r1, #0
 8004640:	2030      	movs	r0, #48	; 0x30
 8004642:	f7fc fa2f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004646:	f240 6104 	movw	r1, #1540	; 0x604
 800464a:	2031      	movs	r0, #49	; 0x31
 800464c:	f7fc fa2a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004650:	f240 3105 	movw	r1, #773	; 0x305
 8004654:	2032      	movs	r0, #50	; 0x32
 8004656:	f7fc fa25 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800465a:	2100      	movs	r1, #0
 800465c:	2035      	movs	r0, #53	; 0x35
 800465e:	f7fc fa21 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004662:	f640 4109 	movw	r1, #3081	; 0xc09
 8004666:	2036      	movs	r0, #54	; 0x36
 8004668:	f7fc fa1c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800466c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004670:	2037      	movs	r0, #55	; 0x37
 8004672:	f7fc fa17 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004676:	f240 3101 	movw	r1, #769	; 0x301
 800467a:	2038      	movs	r0, #56	; 0x38
 800467c:	f7fc fa12 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004680:	f240 7107 	movw	r1, #1799	; 0x707
 8004684:	2039      	movs	r0, #57	; 0x39
 8004686:	f7fc fa0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800468a:	2100      	movs	r1, #0
 800468c:	203c      	movs	r0, #60	; 0x3c
 800468e:	f7fc fa09 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004692:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004696:	203d      	movs	r0, #61	; 0x3d
 8004698:	f7fc fa04 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 800469c:	2032      	movs	r0, #50	; 0x32
 800469e:	f002 f837 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80046a2:	2100      	movs	r1, #0
 80046a4:	2050      	movs	r0, #80	; 0x50
 80046a6:	f7fc f9fd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80046aa:	21ef      	movs	r1, #239	; 0xef
 80046ac:	2051      	movs	r0, #81	; 0x51
 80046ae:	f7fc f9f9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80046b2:	2100      	movs	r1, #0
 80046b4:	2052      	movs	r0, #82	; 0x52
 80046b6:	f7fc f9f5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80046ba:	f240 113f 	movw	r1, #319	; 0x13f
 80046be:	2053      	movs	r0, #83	; 0x53
 80046c0:	f7fc f9f0 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80046c4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80046c8:	2060      	movs	r0, #96	; 0x60
 80046ca:	f7fc f9eb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046ce:	2101      	movs	r1, #1
 80046d0:	2061      	movs	r0, #97	; 0x61
 80046d2:	f7fc f9e7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80046d6:	2100      	movs	r1, #0
 80046d8:	206a      	movs	r0, #106	; 0x6a
 80046da:	f7fc f9e3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80046de:	2100      	movs	r1, #0
 80046e0:	2080      	movs	r0, #128	; 0x80
 80046e2:	f7fc f9df 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80046e6:	2100      	movs	r1, #0
 80046e8:	2081      	movs	r0, #129	; 0x81
 80046ea:	f7fc f9db 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80046ee:	2100      	movs	r1, #0
 80046f0:	2082      	movs	r0, #130	; 0x82
 80046f2:	f7fc f9d7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80046f6:	2100      	movs	r1, #0
 80046f8:	2083      	movs	r0, #131	; 0x83
 80046fa:	f7fc f9d3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80046fe:	2100      	movs	r1, #0
 8004700:	2084      	movs	r0, #132	; 0x84
 8004702:	f7fc f9cf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004706:	2100      	movs	r1, #0
 8004708:	2085      	movs	r0, #133	; 0x85
 800470a:	f7fc f9cb 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800470e:	2110      	movs	r1, #16
 8004710:	2090      	movs	r0, #144	; 0x90
 8004712:	f7fc f9c7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004716:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800471a:	2092      	movs	r0, #146	; 0x92
 800471c:	f7fc f9c2 	bl	8000aa4 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004720:	f240 1133 	movw	r1, #307	; 0x133
 8004724:	2007      	movs	r0, #7
 8004726:	f7fc f9bd 	bl	8000aa4 <LCD_WriteReg>
 800472a:	f001 bb3f 	b.w	8005dac <LCD_Init+0x3e34>
 800472e:	bf00      	nop
 8004730:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x9320) //测试OK.
 8004734:	4bce      	ldr	r3, [pc, #824]	; (8004a70 <LCD_Init+0x2af8>)
 8004736:	889b      	ldrh	r3, [r3, #4]
 8004738:	f249 3220 	movw	r2, #37664	; 0x9320
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 80ad 	bne.w	800489c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004742:	2100      	movs	r1, #0
 8004744:	2000      	movs	r0, #0
 8004746:	f7fc f9ad 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800474a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800474e:	2001      	movs	r0, #1
 8004750:	f7fc f9a8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004754:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004758:	2002      	movs	r0, #2
 800475a:	f7fc f9a3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800475e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004762:	2003      	movs	r0, #3
 8004764:	f7fc f99e 	bl	8000aa4 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004768:	2100      	movs	r1, #0
 800476a:	2004      	movs	r0, #4
 800476c:	f7fc f99a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004770:	f240 2102 	movw	r1, #514	; 0x202
 8004774:	2008      	movs	r0, #8
 8004776:	f7fc f995 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800477a:	2100      	movs	r1, #0
 800477c:	2009      	movs	r0, #9
 800477e:	f7fc f991 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004782:	2100      	movs	r1, #0
 8004784:	200a      	movs	r0, #10
 8004786:	f7fc f98d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800478a:	2101      	movs	r1, #1
 800478c:	200c      	movs	r0, #12
 800478e:	f7fc f989 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004792:	2100      	movs	r1, #0
 8004794:	200d      	movs	r0, #13
 8004796:	f7fc f985 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800479a:	2100      	movs	r1, #0
 800479c:	200f      	movs	r0, #15
 800479e:	f7fc f981 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 80047a2:	2032      	movs	r0, #50	; 0x32
 80047a4:	f001 ffb4 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80047a8:	f240 1101 	movw	r1, #257	; 0x101
 80047ac:	2007      	movs	r0, #7
 80047ae:	f7fc f979 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 80047b2:	2032      	movs	r0, #50	; 0x32
 80047b4:	f001 ffac 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80047b8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80047bc:	2010      	movs	r0, #16
 80047be:	f7fc f971 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80047c2:	2107      	movs	r1, #7
 80047c4:	2011      	movs	r0, #17
 80047c6:	f7fc f96d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80047ca:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047ce:	2012      	movs	r0, #18
 80047d0:	f7fc f968 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80047d4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80047d8:	2013      	movs	r0, #19
 80047da:	f7fc f963 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80047de:	2100      	movs	r1, #0
 80047e0:	2029      	movs	r0, #41	; 0x29
 80047e2:	f7fc f95f 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80047e6:	f244 0110 	movw	r1, #16400	; 0x4010
 80047ea:	202b      	movs	r0, #43	; 0x2b
 80047ec:	f7fc f95a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80047f0:	2100      	movs	r1, #0
 80047f2:	2050      	movs	r0, #80	; 0x50
 80047f4:	f7fc f956 	bl	8000aa4 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80047f8:	21ef      	movs	r1, #239	; 0xef
 80047fa:	2051      	movs	r0, #81	; 0x51
 80047fc:	f7fc f952 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004800:	2100      	movs	r1, #0
 8004802:	2052      	movs	r0, #82	; 0x52
 8004804:	f7fc f94e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004808:	f240 113f 	movw	r1, #319	; 0x13f
 800480c:	2053      	movs	r0, #83	; 0x53
 800480e:	f7fc f949 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004812:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004816:	2060      	movs	r0, #96	; 0x60
 8004818:	f7fc f944 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800481c:	2101      	movs	r1, #1
 800481e:	2061      	movs	r0, #97	; 0x61
 8004820:	f7fc f940 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004824:	2100      	movs	r1, #0
 8004826:	206a      	movs	r0, #106	; 0x6a
 8004828:	f7fc f93c 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800482c:	2100      	movs	r1, #0
 800482e:	2080      	movs	r0, #128	; 0x80
 8004830:	f7fc f938 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004834:	2100      	movs	r1, #0
 8004836:	2081      	movs	r0, #129	; 0x81
 8004838:	f7fc f934 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800483c:	2100      	movs	r1, #0
 800483e:	2082      	movs	r0, #130	; 0x82
 8004840:	f7fc f930 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004844:	2100      	movs	r1, #0
 8004846:	2083      	movs	r0, #131	; 0x83
 8004848:	f7fc f92c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800484c:	2100      	movs	r1, #0
 800484e:	2084      	movs	r0, #132	; 0x84
 8004850:	f7fc f928 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004854:	2100      	movs	r1, #0
 8004856:	2085      	movs	r0, #133	; 0x85
 8004858:	f7fc f924 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800485c:	2110      	movs	r1, #16
 800485e:	2090      	movs	r0, #144	; 0x90
 8004860:	f7fc f920 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004864:	2100      	movs	r1, #0
 8004866:	2092      	movs	r0, #146	; 0x92
 8004868:	f7fc f91c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800486c:	2101      	movs	r1, #1
 800486e:	2093      	movs	r0, #147	; 0x93
 8004870:	f7fc f918 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004874:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004878:	2095      	movs	r0, #149	; 0x95
 800487a:	f7fc f913 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 800487e:	2100      	movs	r1, #0
 8004880:	2097      	movs	r0, #151	; 0x97
 8004882:	f7fc f90f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004886:	2100      	movs	r1, #0
 8004888:	2098      	movs	r0, #152	; 0x98
 800488a:	f7fc f90b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800488e:	f240 1173 	movw	r1, #371	; 0x173
 8004892:	2007      	movs	r0, #7
 8004894:	f7fc f906 	bl	8000aa4 <LCD_WriteReg>
 8004898:	f001 ba88 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800489c:	4b74      	ldr	r3, [pc, #464]	; (8004a70 <LCD_Init+0x2af8>)
 800489e:	889b      	ldrh	r3, [r3, #4]
 80048a0:	f249 3231 	movw	r2, #37681	; 0x9331
 80048a4:	4293      	cmp	r3, r2
 80048a6:	f040 80e5 	bne.w	8004a74 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80048aa:	f241 0114 	movw	r1, #4116	; 0x1014
 80048ae:	20e7      	movs	r0, #231	; 0xe7
 80048b0:	f7fc f8f8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80048b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7fc f8f3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80048be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048c2:	2002      	movs	r0, #2
 80048c4:	f7fc f8ee 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80048c8:	f241 0138 	movw	r1, #4152	; 0x1038
 80048cc:	2003      	movs	r0, #3
 80048ce:	f7fc f8e9 	bl	8000aa4 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80048d2:	f240 2102 	movw	r1, #514	; 0x202
 80048d6:	2008      	movs	r0, #8
 80048d8:	f7fc f8e4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80048dc:	2100      	movs	r1, #0
 80048de:	2009      	movs	r0, #9
 80048e0:	f7fc f8e0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80048e4:	2100      	movs	r1, #0
 80048e6:	200a      	movs	r0, #10
 80048e8:	f7fc f8dc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80048ec:	2100      	movs	r1, #0
 80048ee:	200c      	movs	r0, #12
 80048f0:	f7fc f8d8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80048f4:	2100      	movs	r1, #0
 80048f6:	200d      	movs	r0, #13
 80048f8:	f7fc f8d4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80048fc:	2100      	movs	r1, #0
 80048fe:	200f      	movs	r0, #15
 8004900:	f7fc f8d0 	bl	8000aa4 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004904:	2100      	movs	r1, #0
 8004906:	2010      	movs	r0, #16
 8004908:	f7fc f8cc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800490c:	2107      	movs	r1, #7
 800490e:	2011      	movs	r0, #17
 8004910:	f7fc f8c8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004914:	2100      	movs	r1, #0
 8004916:	2012      	movs	r0, #18
 8004918:	f7fc f8c4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800491c:	2100      	movs	r1, #0
 800491e:	2013      	movs	r0, #19
 8004920:	f7fc f8c0 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004924:	20c8      	movs	r0, #200	; 0xc8
 8004926:	f001 fef3 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800492a:	f241 6190 	movw	r1, #5776	; 0x1690
 800492e:	2010      	movs	r0, #16
 8004930:	f7fc f8b8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004934:	f240 2127 	movw	r1, #551	; 0x227
 8004938:	2011      	movs	r0, #17
 800493a:	f7fc f8b3 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800493e:	2032      	movs	r0, #50	; 0x32
 8004940:	f001 fee6 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004944:	210c      	movs	r1, #12
 8004946:	2012      	movs	r0, #18
 8004948:	f7fc f8ac 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800494c:	2032      	movs	r0, #50	; 0x32
 800494e:	f001 fedf 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004956:	2013      	movs	r0, #19
 8004958:	f7fc f8a4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800495c:	2111      	movs	r1, #17
 800495e:	2029      	movs	r0, #41	; 0x29
 8004960:	f7fc f8a0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004964:	210b      	movs	r1, #11
 8004966:	202b      	movs	r0, #43	; 0x2b
 8004968:	f7fc f89c 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800496c:	2032      	movs	r0, #50	; 0x32
 800496e:	f001 fecf 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004972:	2100      	movs	r1, #0
 8004974:	2020      	movs	r0, #32
 8004976:	f7fc f895 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 800497a:	f240 113f 	movw	r1, #319	; 0x13f
 800497e:	2021      	movs	r0, #33	; 0x21
 8004980:	f7fc f890 	bl	8000aa4 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004984:	2100      	movs	r1, #0
 8004986:	2030      	movs	r0, #48	; 0x30
 8004988:	f7fc f88c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800498c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004990:	2031      	movs	r0, #49	; 0x31
 8004992:	f7fc f887 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004996:	2100      	movs	r1, #0
 8004998:	2032      	movs	r0, #50	; 0x32
 800499a:	f7fc f883 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800499e:	f44f 7101 	mov.w	r1, #516	; 0x204
 80049a2:	2035      	movs	r0, #53	; 0x35
 80049a4:	f7fc f87e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80049a8:	f241 610a 	movw	r1, #5642	; 0x160a
 80049ac:	2036      	movs	r0, #54	; 0x36
 80049ae:	f7fc f879 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80049b2:	f240 7107 	movw	r1, #1799	; 0x707
 80049b6:	2037      	movs	r0, #55	; 0x37
 80049b8:	f7fc f874 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80049bc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80049c0:	2038      	movs	r0, #56	; 0x38
 80049c2:	f7fc f86f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80049c6:	f240 7107 	movw	r1, #1799	; 0x707
 80049ca:	2039      	movs	r0, #57	; 0x39
 80049cc:	f7fc f86a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80049d0:	f240 4102 	movw	r1, #1026	; 0x402
 80049d4:	203c      	movs	r0, #60	; 0x3c
 80049d6:	f7fc f865 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80049da:	f640 410f 	movw	r1, #3087	; 0xc0f
 80049de:	203d      	movs	r0, #61	; 0x3d
 80049e0:	f7fc f860 	bl	8000aa4 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80049e4:	2100      	movs	r1, #0
 80049e6:	2050      	movs	r0, #80	; 0x50
 80049e8:	f7fc f85c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80049ec:	21ef      	movs	r1, #239	; 0xef
 80049ee:	2051      	movs	r0, #81	; 0x51
 80049f0:	f7fc f858 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80049f4:	2100      	movs	r1, #0
 80049f6:	2052      	movs	r0, #82	; 0x52
 80049f8:	f7fc f854 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80049fc:	f240 113f 	movw	r1, #319	; 0x13f
 8004a00:	2053      	movs	r0, #83	; 0x53
 8004a02:	f7fc f84f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004a06:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a0a:	2060      	movs	r0, #96	; 0x60
 8004a0c:	f7fc f84a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004a10:	2101      	movs	r1, #1
 8004a12:	2061      	movs	r0, #97	; 0x61
 8004a14:	f7fc f846 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004a18:	2100      	movs	r1, #0
 8004a1a:	206a      	movs	r0, #106	; 0x6a
 8004a1c:	f7fc f842 	bl	8000aa4 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004a20:	2100      	movs	r1, #0
 8004a22:	2080      	movs	r0, #128	; 0x80
 8004a24:	f7fc f83e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2081      	movs	r0, #129	; 0x81
 8004a2c:	f7fc f83a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004a30:	2100      	movs	r1, #0
 8004a32:	2082      	movs	r0, #130	; 0x82
 8004a34:	f7fc f836 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	2083      	movs	r0, #131	; 0x83
 8004a3c:	f7fc f832 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004a40:	2100      	movs	r1, #0
 8004a42:	2084      	movs	r0, #132	; 0x84
 8004a44:	f7fc f82e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004a48:	2100      	movs	r1, #0
 8004a4a:	2085      	movs	r0, #133	; 0x85
 8004a4c:	f7fc f82a 	bl	8000aa4 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004a50:	2110      	movs	r1, #16
 8004a52:	2090      	movs	r0, #144	; 0x90
 8004a54:	f7fc f826 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a5c:	2092      	movs	r0, #146	; 0x92
 8004a5e:	f7fc f821 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004a62:	f240 1133 	movw	r1, #307	; 0x133
 8004a66:	2007      	movs	r0, #7
 8004a68:	f7fc f81c 	bl	8000aa4 <LCD_WriteReg>
 8004a6c:	f001 b99e 	b.w	8005dac <LCD_Init+0x3e34>
 8004a70:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5408) {
 8004a74:	4be2      	ldr	r3, [pc, #904]	; (8004e00 <LCD_Init+0x2e88>)
 8004a76:	889b      	ldrh	r3, [r3, #4]
 8004a78:	f245 4208 	movw	r2, #21512	; 0x5408
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f040 80a3 	bne.w	8004bc8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fc f80c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004a8c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a90:	2002      	movs	r0, #2
 8004a92:	f7fc f807 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004a96:	f241 0130 	movw	r1, #4144	; 0x1030
 8004a9a:	2003      	movs	r0, #3
 8004a9c:	f7fc f802 	bl	8000aa4 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	2004      	movs	r0, #4
 8004aa4:	f7fb fffe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004aa8:	f240 2107 	movw	r1, #519	; 0x207
 8004aac:	2008      	movs	r0, #8
 8004aae:	f7fb fff9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2009      	movs	r0, #9
 8004ab6:	f7fb fff5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004aba:	2100      	movs	r1, #0
 8004abc:	200a      	movs	r0, #10
 8004abe:	f7fb fff1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	200c      	movs	r0, #12
 8004ac6:	f7fb ffed 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004aca:	2100      	movs	r1, #0
 8004acc:	200d      	movs	r0, #13
 8004ace:	f7fb ffe9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	200f      	movs	r0, #15
 8004ad6:	f7fb ffe5 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004ada:	2014      	movs	r0, #20
 8004adc:	f001 fe18 	bl	8006710 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004ae0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004ae4:	2010      	movs	r0, #16
 8004ae6:	f7fb ffdd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004aea:	2101      	movs	r1, #1
 8004aec:	2011      	movs	r0, #17
 8004aee:	f7fb ffd9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004af2:	2101      	movs	r1, #1
 8004af4:	2017      	movs	r0, #23
 8004af6:	f7fb ffd5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004afa:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004afe:	2012      	movs	r0, #18
 8004b00:	f7fb ffd0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004b04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b08:	2013      	movs	r0, #19
 8004b0a:	f7fb ffcb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004b0e:	2109      	movs	r1, #9
 8004b10:	2029      	movs	r0, #41	; 0x29
 8004b12:	f7fb ffc7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004b16:	2109      	movs	r1, #9
 8004b18:	202a      	movs	r0, #42	; 0x2a
 8004b1a:	f7fb ffc3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	20a4      	movs	r0, #164	; 0xa4
 8004b22:	f7fb ffbf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004b26:	2100      	movs	r1, #0
 8004b28:	2050      	movs	r0, #80	; 0x50
 8004b2a:	f7fb ffbb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004b2e:	21ef      	movs	r1, #239	; 0xef
 8004b30:	2051      	movs	r0, #81	; 0x51
 8004b32:	f7fb ffb7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004b36:	2100      	movs	r1, #0
 8004b38:	2052      	movs	r0, #82	; 0x52
 8004b3a:	f7fb ffb3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004b3e:	f240 113f 	movw	r1, #319	; 0x13f
 8004b42:	2053      	movs	r0, #83	; 0x53
 8004b44:	f7fb ffae 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004b48:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b4c:	2060      	movs	r0, #96	; 0x60
 8004b4e:	f7fb ffa9 	bl	8000aa4 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004b52:	2101      	movs	r1, #1
 8004b54:	2061      	movs	r0, #97	; 0x61
 8004b56:	f7fb ffa5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	206a      	movs	r0, #106	; 0x6a
 8004b5e:	f7fb ffa1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004b62:	2100      	movs	r1, #0
 8004b64:	2080      	movs	r0, #128	; 0x80
 8004b66:	f7fb ff9d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	2081      	movs	r0, #129	; 0x81
 8004b6e:	f7fb ff99 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004b72:	2100      	movs	r1, #0
 8004b74:	2082      	movs	r0, #130	; 0x82
 8004b76:	f7fb ff95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	2083      	movs	r0, #131	; 0x83
 8004b7e:	f7fb ff91 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004b82:	2100      	movs	r1, #0
 8004b84:	2084      	movs	r0, #132	; 0x84
 8004b86:	f7fb ff8d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2085      	movs	r0, #133	; 0x85
 8004b8e:	f7fb ff89 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004b92:	2113      	movs	r1, #19
 8004b94:	2090      	movs	r0, #144	; 0x90
 8004b96:	f7fb ff85 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2092      	movs	r0, #146	; 0x92
 8004b9e:	f7fb ff81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	2093      	movs	r0, #147	; 0x93
 8004ba6:	f7fb ff7d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004baa:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004bae:	2095      	movs	r0, #149	; 0x95
 8004bb0:	f7fb ff78 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004bb4:	f240 1173 	movw	r1, #371	; 0x173
 8004bb8:	2007      	movs	r0, #7
 8004bba:	f7fb ff73 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004bbe:	2032      	movs	r0, #50	; 0x32
 8004bc0:	f001 fda6 	bl	8006710 <HAL_Delay>
 8004bc4:	f001 b8f2 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004bc8:	4b8d      	ldr	r3, [pc, #564]	; (8004e00 <LCD_Init+0x2e88>)
 8004bca:	889b      	ldrh	r3, [r3, #4]
 8004bcc:	f241 5205 	movw	r2, #5381	; 0x1505
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	f040 8117 	bne.w	8004e04 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	2007      	movs	r0, #7
 8004bda:	f7fb ff63 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004bde:	2032      	movs	r0, #50	; 0x32
 8004be0:	f001 fd96 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004be4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004be8:	2012      	movs	r0, #18
 8004bea:	f7fb ff5b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004bee:	2101      	movs	r1, #1
 8004bf0:	20a4      	movs	r0, #164	; 0xa4
 8004bf2:	f7fb ff57 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004bf6:	210f      	movs	r1, #15
 8004bf8:	2008      	movs	r0, #8
 8004bfa:	f7fb ff53 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004bfe:	2108      	movs	r1, #8
 8004c00:	200a      	movs	r0, #10
 8004c02:	f7fb ff4f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004c06:	2108      	movs	r1, #8
 8004c08:	200d      	movs	r0, #13
 8004c0a:	f7fb ff4b 	bl	8000aa4 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004c0e:	f240 7107 	movw	r1, #1799	; 0x707
 8004c12:	2030      	movs	r0, #48	; 0x30
 8004c14:	f7fb ff46 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004c18:	2107      	movs	r1, #7
 8004c1a:	2031      	movs	r0, #49	; 0x31
 8004c1c:	f7fb ff42 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004c20:	f240 6103 	movw	r1, #1539	; 0x603
 8004c24:	2032      	movs	r0, #50	; 0x32
 8004c26:	f7fb ff3d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004c2a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c2e:	2033      	movs	r0, #51	; 0x33
 8004c30:	f7fb ff38 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004c34:	f240 2102 	movw	r1, #514	; 0x202
 8004c38:	2034      	movs	r0, #52	; 0x34
 8004c3a:	f7fb ff33 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004c3e:	2102      	movs	r1, #2
 8004c40:	2035      	movs	r0, #53	; 0x35
 8004c42:	f7fb ff2f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004c46:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004c4a:	2036      	movs	r0, #54	; 0x36
 8004c4c:	f7fb ff2a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004c50:	f240 7107 	movw	r1, #1799	; 0x707
 8004c54:	2037      	movs	r0, #55	; 0x37
 8004c56:	f7fb ff25 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	2038      	movs	r0, #56	; 0x38
 8004c5e:	f7fb ff21 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004c62:	2100      	movs	r1, #0
 8004c64:	2039      	movs	r0, #57	; 0x39
 8004c66:	f7fb ff1d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004c6a:	f240 7107 	movw	r1, #1799	; 0x707
 8004c6e:	203a      	movs	r0, #58	; 0x3a
 8004c70:	f7fb ff18 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004c74:	2100      	movs	r1, #0
 8004c76:	203b      	movs	r0, #59	; 0x3b
 8004c78:	f7fb ff14 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004c7c:	2107      	movs	r1, #7
 8004c7e:	203c      	movs	r0, #60	; 0x3c
 8004c80:	f7fb ff10 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004c84:	2100      	movs	r1, #0
 8004c86:	203d      	movs	r0, #61	; 0x3d
 8004c88:	f7fb ff0c 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004c8c:	2032      	movs	r0, #50	; 0x32
 8004c8e:	f001 fd3f 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004c92:	2101      	movs	r1, #1
 8004c94:	2007      	movs	r0, #7
 8004c96:	f7fb ff05 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	2017      	movs	r0, #23
 8004c9e:	f7fb ff01 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(50);
 8004ca2:	2032      	movs	r0, #50	; 0x32
 8004ca4:	f001 fd34 	bl	8006710 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004ca8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004cac:	2010      	movs	r0, #16
 8004cae:	f7fb fef9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004cb2:	f240 2117 	movw	r1, #535	; 0x217
 8004cb6:	2011      	movs	r0, #17
 8004cb8:	f7fb fef4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004cbc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004cc0:	2012      	movs	r0, #18
 8004cc2:	f7fb feef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004cc6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004cca:	2013      	movs	r0, #19
 8004ccc:	f7fb feea 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	202a      	movs	r0, #42	; 0x2a
 8004cd4:	f7fb fee6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004cd8:	210a      	movs	r1, #10
 8004cda:	2029      	movs	r0, #41	; 0x29
 8004cdc:	f7fb fee2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004ce0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004ce4:	2012      	movs	r0, #18
 8004ce6:	f7fb fedd 	bl	8000aa4 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004cea:	2100      	movs	r1, #0
 8004cec:	2050      	movs	r0, #80	; 0x50
 8004cee:	f7fb fed9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004cf2:	21ef      	movs	r1, #239	; 0xef
 8004cf4:	2051      	movs	r0, #81	; 0x51
 8004cf6:	f7fb fed5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2052      	movs	r0, #82	; 0x52
 8004cfe:	f7fb fed1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004d02:	f240 113f 	movw	r1, #319	; 0x13f
 8004d06:	2053      	movs	r0, #83	; 0x53
 8004d08:	f7fb fecc 	bl	8000aa4 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004d0c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d10:	2060      	movs	r0, #96	; 0x60
 8004d12:	f7fb fec7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004d16:	2101      	movs	r1, #1
 8004d18:	2061      	movs	r0, #97	; 0x61
 8004d1a:	f7fb fec3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	206a      	movs	r0, #106	; 0x6a
 8004d22:	f7fb febf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004d26:	2100      	movs	r1, #0
 8004d28:	2080      	movs	r0, #128	; 0x80
 8004d2a:	f7fb febb 	bl	8000aa4 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004d2e:	2100      	movs	r1, #0
 8004d30:	2081      	movs	r0, #129	; 0x81
 8004d32:	f7fb feb7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004d36:	2100      	movs	r1, #0
 8004d38:	2082      	movs	r0, #130	; 0x82
 8004d3a:	f7fb feb3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2083      	movs	r0, #131	; 0x83
 8004d42:	f7fb feaf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004d46:	2100      	movs	r1, #0
 8004d48:	2084      	movs	r0, #132	; 0x84
 8004d4a:	f7fb feab 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004d4e:	2100      	movs	r1, #0
 8004d50:	2085      	movs	r0, #133	; 0x85
 8004d52:	f7fb fea7 	bl	8000aa4 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004d56:	2113      	movs	r1, #19
 8004d58:	2090      	movs	r0, #144	; 0x90
 8004d5a:	f7fb fea3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004d5e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d62:	2092      	movs	r0, #146	; 0x92
 8004d64:	f7fb fe9e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004d68:	2105      	movs	r1, #5
 8004d6a:	2093      	movs	r0, #147	; 0x93
 8004d6c:	f7fb fe9a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004d70:	2100      	movs	r1, #0
 8004d72:	2095      	movs	r0, #149	; 0x95
 8004d74:	f7fb fe96 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004d78:	2100      	movs	r1, #0
 8004d7a:	2097      	movs	r0, #151	; 0x97
 8004d7c:	f7fb fe92 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004d80:	2100      	movs	r1, #0
 8004d82:	2098      	movs	r0, #152	; 0x98
 8004d84:	f7fb fe8e 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f7fb fe89 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004d92:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004d96:	2002      	movs	r0, #2
 8004d98:	f7fb fe84 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004d9c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004da0:	2003      	movs	r0, #3
 8004da2:	f7fb fe7f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004da6:	2100      	movs	r1, #0
 8004da8:	2004      	movs	r0, #4
 8004daa:	f7fb fe7b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004dae:	2100      	movs	r1, #0
 8004db0:	200c      	movs	r0, #12
 8004db2:	f7fb fe77 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004db6:	2100      	movs	r1, #0
 8004db8:	200f      	movs	r0, #15
 8004dba:	f7fb fe73 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	2020      	movs	r0, #32
 8004dc2:	f7fb fe6f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2021      	movs	r0, #33	; 0x21
 8004dca:	f7fb fe6b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004dce:	2121      	movs	r1, #33	; 0x21
 8004dd0:	2007      	movs	r0, #7
 8004dd2:	f7fb fe67 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004dd6:	2014      	movs	r0, #20
 8004dd8:	f001 fc9a 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004ddc:	2161      	movs	r1, #97	; 0x61
 8004dde:	2007      	movs	r0, #7
 8004de0:	f7fb fe60 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004de4:	2014      	movs	r0, #20
 8004de6:	f001 fc93 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004dea:	f240 1173 	movw	r1, #371	; 0x173
 8004dee:	2007      	movs	r0, #7
 8004df0:	f7fb fe58 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004df4:	2014      	movs	r0, #20
 8004df6:	f001 fc8b 	bl	8006710 <HAL_Delay>
 8004dfa:	f000 bfd7 	b.w	8005dac <LCD_Init+0x3e34>
 8004dfe:	bf00      	nop
 8004e00:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0xB505) {
 8004e04:	4bf0      	ldr	r3, [pc, #960]	; (80051c8 <LCD_Init+0x3250>)
 8004e06:	889b      	ldrh	r3, [r3, #4]
 8004e08:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	f040 8103 	bne.w	8005018 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004e12:	2100      	movs	r1, #0
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fb fe45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7fb fe41 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e22:	2100      	movs	r1, #0
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fb fe3d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fb fe39 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004e32:	2101      	movs	r1, #1
 8004e34:	20a4      	movs	r0, #164	; 0xa4
 8004e36:	f7fb fe35 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004e3a:	2014      	movs	r0, #20
 8004e3c:	f001 fc68 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004e40:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e44:	2060      	movs	r0, #96	; 0x60
 8004e46:	f7fb fe2d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e4a:	f240 2102 	movw	r1, #514	; 0x202
 8004e4e:	2008      	movs	r0, #8
 8004e50:	f7fb fe28 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004e54:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004e58:	2030      	movs	r0, #48	; 0x30
 8004e5a:	f7fb fe23 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004e5e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004e62:	2031      	movs	r0, #49	; 0x31
 8004e64:	f7fb fe1e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004e68:	f240 6104 	movw	r1, #1540	; 0x604
 8004e6c:	2032      	movs	r0, #50	; 0x32
 8004e6e:	f7fb fe19 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004e72:	f640 6116 	movw	r1, #3606	; 0xe16
 8004e76:	2033      	movs	r0, #51	; 0x33
 8004e78:	f7fb fe14 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004e7c:	f242 2111 	movw	r1, #8721	; 0x2211
 8004e80:	2034      	movs	r0, #52	; 0x34
 8004e82:	f7fb fe0f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004e86:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004e8a:	2035      	movs	r0, #53	; 0x35
 8004e8c:	f7fb fe0a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004e90:	f248 5107 	movw	r1, #34055	; 0x8507
 8004e94:	2036      	movs	r0, #54	; 0x36
 8004e96:	f7fb fe05 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004e9a:	f241 4107 	movw	r1, #5127	; 0x1407
 8004e9e:	2037      	movs	r0, #55	; 0x37
 8004ea0:	f7fb fe00 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004ea4:	f241 4103 	movw	r1, #5123	; 0x1403
 8004ea8:	2038      	movs	r0, #56	; 0x38
 8004eaa:	f7fb fdfb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004eae:	2120      	movs	r1, #32
 8004eb0:	2039      	movs	r0, #57	; 0x39
 8004eb2:	f7fb fdf7 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004eb6:	211a      	movs	r1, #26
 8004eb8:	2090      	movs	r0, #144	; 0x90
 8004eba:	f7fb fdf3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2010      	movs	r0, #16
 8004ec2:	f7fb fdef 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004ec6:	2107      	movs	r1, #7
 8004ec8:	2011      	movs	r0, #17
 8004eca:	f7fb fdeb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2012      	movs	r0, #18
 8004ed2:	f7fb fde7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2013      	movs	r0, #19
 8004eda:	f7fb fde3 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004ede:	2014      	movs	r0, #20
 8004ee0:	f001 fc16 	bl	8006710 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004ee4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004ee8:	2010      	movs	r0, #16
 8004eea:	f7fb fddb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004eee:	f240 1137 	movw	r1, #311	; 0x137
 8004ef2:	2011      	movs	r0, #17
 8004ef4:	f7fb fdd6 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004ef8:	2014      	movs	r0, #20
 8004efa:	f001 fc09 	bl	8006710 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004efe:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004f02:	2012      	movs	r0, #18
 8004f04:	f7fb fdce 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004f08:	2014      	movs	r0, #20
 8004f0a:	f001 fc01 	bl	8006710 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004f0e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004f12:	2013      	movs	r0, #19
 8004f14:	f7fb fdc6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	202a      	movs	r0, #42	; 0x2a
 8004f1c:	f7fb fdc2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004f20:	2148      	movs	r1, #72	; 0x48
 8004f22:	2029      	movs	r0, #41	; 0x29
 8004f24:	f7fb fdbe 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004f28:	2014      	movs	r0, #20
 8004f2a:	f001 fbf1 	bl	8006710 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f32:	2001      	movs	r0, #1
 8004f34:	f7fb fdb6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f38:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f3c:	2002      	movs	r0, #2
 8004f3e:	f7fb fdb1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f42:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f46:	2003      	movs	r0, #3
 8004f48:	f7fb fdac 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004f4c:	f240 2102 	movw	r1, #514	; 0x202
 8004f50:	2008      	movs	r0, #8
 8004f52:	f7fb fda7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	200a      	movs	r0, #10
 8004f5a:	f7fb fda3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	200c      	movs	r0, #12
 8004f62:	f7fb fd9f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004f66:	2100      	movs	r1, #0
 8004f68:	200d      	movs	r0, #13
 8004f6a:	f7fb fd9b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004f6e:	2130      	movs	r1, #48	; 0x30
 8004f70:	200e      	movs	r0, #14
 8004f72:	f7fb fd97 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004f76:	2100      	movs	r1, #0
 8004f78:	2050      	movs	r0, #80	; 0x50
 8004f7a:	f7fb fd93 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004f7e:	21ef      	movs	r1, #239	; 0xef
 8004f80:	2051      	movs	r0, #81	; 0x51
 8004f82:	f7fb fd8f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004f86:	2100      	movs	r1, #0
 8004f88:	2052      	movs	r0, #82	; 0x52
 8004f8a:	f7fb fd8b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004f8e:	f240 113f 	movw	r1, #319	; 0x13f
 8004f92:	2053      	movs	r0, #83	; 0x53
 8004f94:	f7fb fd86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004f98:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f9c:	2060      	movs	r0, #96	; 0x60
 8004f9e:	f7fb fd81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	2061      	movs	r0, #97	; 0x61
 8004fa6:	f7fb fd7d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004faa:	2100      	movs	r1, #0
 8004fac:	206a      	movs	r0, #106	; 0x6a
 8004fae:	f7fb fd79 	bl	8000aa4 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004fb2:	2111      	movs	r1, #17
 8004fb4:	2090      	movs	r0, #144	; 0x90
 8004fb6:	f7fb fd75 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004fba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fbe:	2092      	movs	r0, #146	; 0x92
 8004fc0:	f7fb fd70 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004fc4:	f240 4102 	movw	r1, #1026	; 0x402
 8004fc8:	2093      	movs	r0, #147	; 0x93
 8004fca:	f7fb fd6b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004fce:	2102      	movs	r1, #2
 8004fd0:	2094      	movs	r0, #148	; 0x94
 8004fd2:	f7fb fd67 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004fd6:	2014      	movs	r0, #20
 8004fd8:	f001 fb9a 	bl	8006710 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004fdc:	2101      	movs	r1, #1
 8004fde:	2007      	movs	r0, #7
 8004fe0:	f7fb fd60 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8004fe4:	2014      	movs	r0, #20
 8004fe6:	f001 fb93 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004fea:	2161      	movs	r1, #97	; 0x61
 8004fec:	2007      	movs	r0, #7
 8004fee:	f7fb fd59 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004ff2:	f240 1173 	movw	r1, #371	; 0x173
 8004ff6:	2007      	movs	r0, #7
 8004ff8:	f7fb fd54 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2020      	movs	r0, #32
 8005000:	f7fb fd50 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005004:	2100      	movs	r1, #0
 8005006:	2021      	movs	r0, #33	; 0x21
 8005008:	f7fb fd4c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 800500c:	2122      	movs	r1, #34	; 0x22
 800500e:	2000      	movs	r0, #0
 8005010:	f7fb fd48 	bl	8000aa4 <LCD_WriteReg>
 8005014:	f000 beca 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005018:	4b6b      	ldr	r3, [pc, #428]	; (80051c8 <LCD_Init+0x3250>)
 800501a:	889b      	ldrh	r3, [r3, #4]
 800501c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005020:	4293      	cmp	r3, r2
 8005022:	f040 80d3 	bne.w	80051cc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8005026:	2100      	movs	r1, #0
 8005028:	2000      	movs	r0, #0
 800502a:	f7fb fd3b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800502e:	2100      	movs	r1, #0
 8005030:	2000      	movs	r0, #0
 8005032:	f7fb fd37 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8005036:	2014      	movs	r0, #20
 8005038:	f001 fb6a 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800503c:	2100      	movs	r1, #0
 800503e:	2000      	movs	r0, #0
 8005040:	f7fb fd30 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005044:	2100      	movs	r1, #0
 8005046:	2000      	movs	r0, #0
 8005048:	f7fb fd2c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800504c:	2100      	movs	r1, #0
 800504e:	2000      	movs	r0, #0
 8005050:	f7fb fd28 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005054:	2100      	movs	r1, #0
 8005056:	2000      	movs	r0, #0
 8005058:	f7fb fd24 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800505c:	2101      	movs	r1, #1
 800505e:	20a4      	movs	r0, #164	; 0xa4
 8005060:	f7fb fd20 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8005064:	2014      	movs	r0, #20
 8005066:	f001 fb53 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800506a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800506e:	2060      	movs	r0, #96	; 0x60
 8005070:	f7fb fd18 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8005074:	f640 0106 	movw	r1, #2054	; 0x806
 8005078:	2008      	movs	r0, #8
 800507a:	f7fb fd13 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800507e:	f240 7103 	movw	r1, #1795	; 0x703
 8005082:	2030      	movs	r0, #48	; 0x30
 8005084:	f7fb fd0e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005088:	2101      	movs	r1, #1
 800508a:	2031      	movs	r0, #49	; 0x31
 800508c:	f7fb fd0a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005090:	2104      	movs	r1, #4
 8005092:	2032      	movs	r0, #50	; 0x32
 8005094:	f7fb fd06 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005098:	f44f 7181 	mov.w	r1, #258	; 0x102
 800509c:	2033      	movs	r0, #51	; 0x33
 800509e:	f7fb fd01 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80050a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80050a6:	2034      	movs	r0, #52	; 0x34
 80050a8:	f7fb fcfc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80050ac:	f240 1103 	movw	r1, #259	; 0x103
 80050b0:	2035      	movs	r0, #53	; 0x35
 80050b2:	f7fb fcf7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80050b6:	211f      	movs	r1, #31
 80050b8:	2036      	movs	r0, #54	; 0x36
 80050ba:	f7fb fcf3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80050be:	f240 7103 	movw	r1, #1795	; 0x703
 80050c2:	2037      	movs	r0, #55	; 0x37
 80050c4:	f7fb fcee 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80050c8:	2101      	movs	r1, #1
 80050ca:	2038      	movs	r0, #56	; 0x38
 80050cc:	f7fb fcea 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80050d0:	2104      	movs	r1, #4
 80050d2:	2039      	movs	r0, #57	; 0x39
 80050d4:	f7fb fce6 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80050d8:	2115      	movs	r1, #21
 80050da:	2090      	movs	r0, #144	; 0x90
 80050dc:	f7fb fce2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80050e0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80050e4:	2010      	movs	r0, #16
 80050e6:	f7fb fcdd 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80050ea:	f240 2147 	movw	r1, #583	; 0x247
 80050ee:	2011      	movs	r0, #17
 80050f0:	f7fb fcd8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80050f4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80050f8:	2012      	movs	r0, #18
 80050fa:	f7fb fcd3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80050fe:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005102:	2013      	movs	r0, #19
 8005104:	f7fb fcce 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(120);
 8005108:	2078      	movs	r0, #120	; 0x78
 800510a:	f001 fb01 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800510e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005112:	2001      	movs	r0, #1
 8005114:	f7fb fcc6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800511c:	2002      	movs	r0, #2
 800511e:	f7fb fcc1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005122:	f241 0130 	movw	r1, #4144	; 0x1030
 8005126:	2003      	movs	r0, #3
 8005128:	f7fb fcbc 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800512c:	2108      	movs	r1, #8
 800512e:	200a      	movs	r0, #10
 8005130:	f7fb fcb8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005134:	2100      	movs	r1, #0
 8005136:	200c      	movs	r0, #12
 8005138:	f7fb fcb4 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800513c:	2120      	movs	r1, #32
 800513e:	200e      	movs	r0, #14
 8005140:	f7fb fcb0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005144:	2100      	movs	r1, #0
 8005146:	200f      	movs	r0, #15
 8005148:	f7fb fcac 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800514c:	2100      	movs	r1, #0
 800514e:	2020      	movs	r0, #32
 8005150:	f7fb fca8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005154:	2100      	movs	r1, #0
 8005156:	2021      	movs	r0, #33	; 0x21
 8005158:	f7fb fca4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800515c:	213d      	movs	r1, #61	; 0x3d
 800515e:	202a      	movs	r0, #42	; 0x2a
 8005160:	f7fb fca0 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(20);
 8005164:	2014      	movs	r0, #20
 8005166:	f001 fad3 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800516a:	212d      	movs	r1, #45	; 0x2d
 800516c:	2029      	movs	r0, #41	; 0x29
 800516e:	f7fb fc99 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005172:	2100      	movs	r1, #0
 8005174:	2050      	movs	r0, #80	; 0x50
 8005176:	f7fb fc95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800517a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800517e:	2051      	movs	r0, #81	; 0x51
 8005180:	f7fb fc90 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005184:	2100      	movs	r1, #0
 8005186:	2052      	movs	r0, #82	; 0x52
 8005188:	f7fb fc8c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800518c:	f240 113f 	movw	r1, #319	; 0x13f
 8005190:	2053      	movs	r0, #83	; 0x53
 8005192:	f7fb fc87 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005196:	2100      	movs	r1, #0
 8005198:	2061      	movs	r0, #97	; 0x61
 800519a:	f7fb fc83 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800519e:	2100      	movs	r1, #0
 80051a0:	206a      	movs	r0, #106	; 0x6a
 80051a2:	f7fb fc7f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80051a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80051aa:	2092      	movs	r0, #146	; 0x92
 80051ac:	f7fb fc7a 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80051b0:	2105      	movs	r1, #5
 80051b2:	2093      	movs	r0, #147	; 0x93
 80051b4:	f7fb fc76 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80051b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051bc:	2007      	movs	r0, #7
 80051be:	f7fb fc71 	bl	8000aa4 <LCD_WriteReg>
 80051c2:	f000 bdf3 	b.w	8005dac <LCD_Init+0x3e34>
 80051c6:	bf00      	nop
 80051c8:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80051cc:	4bc2      	ldr	r3, [pc, #776]	; (80054d8 <LCD_Init+0x3560>)
 80051ce:	889b      	ldrh	r3, [r3, #4]
 80051d0:	f648 1289 	movw	r2, #35209	; 0x8989
 80051d4:	4293      	cmp	r3, r2
 80051d6:	f040 80bc 	bne.w	8005352 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80051da:	2101      	movs	r1, #1
 80051dc:	2000      	movs	r0, #0
 80051de:	f7fb fc61 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80051e2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80051e6:	2003      	movs	r0, #3
 80051e8:	f7fb fc5c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80051ec:	2100      	movs	r1, #0
 80051ee:	200c      	movs	r0, #12
 80051f0:	f7fb fc58 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80051f4:	f640 010c 	movw	r1, #2060	; 0x80c
 80051f8:	200d      	movs	r0, #13
 80051fa:	f7fb fc53 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80051fe:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8005202:	200e      	movs	r0, #14
 8005204:	f7fb fc4e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005208:	21b0      	movs	r1, #176	; 0xb0
 800520a:	201e      	movs	r0, #30
 800520c:	f7fb fc4a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005210:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005214:	2001      	movs	r0, #1
 8005216:	f7fb fc45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800521a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800521e:	2002      	movs	r0, #2
 8005220:	f7fb fc40 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005224:	2100      	movs	r1, #0
 8005226:	2010      	movs	r0, #16
 8005228:	f7fb fc3c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800522c:	f246 0178 	movw	r1, #24696	; 0x6078
 8005230:	2011      	movs	r0, #17
 8005232:	f7fb fc37 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005236:	2100      	movs	r1, #0
 8005238:	2005      	movs	r0, #5
 800523a:	f7fb fc33 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800523e:	2100      	movs	r1, #0
 8005240:	2006      	movs	r0, #6
 8005242:	f7fb fc2f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005246:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800524a:	2016      	movs	r0, #22
 800524c:	f7fb fc2a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005250:	2103      	movs	r1, #3
 8005252:	2017      	movs	r0, #23
 8005254:	f7fb fc26 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005258:	f240 2133 	movw	r1, #563	; 0x233
 800525c:	2007      	movs	r0, #7
 800525e:	f7fb fc21 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005262:	2100      	movs	r1, #0
 8005264:	200b      	movs	r0, #11
 8005266:	f7fb fc1d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800526a:	2100      	movs	r1, #0
 800526c:	200f      	movs	r0, #15
 800526e:	f7fb fc19 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005272:	2100      	movs	r1, #0
 8005274:	2041      	movs	r0, #65	; 0x41
 8005276:	f7fb fc15 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800527a:	2100      	movs	r1, #0
 800527c:	2042      	movs	r0, #66	; 0x42
 800527e:	f7fb fc11 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005282:	2100      	movs	r1, #0
 8005284:	2048      	movs	r0, #72	; 0x48
 8005286:	f7fb fc0d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800528a:	f240 113f 	movw	r1, #319	; 0x13f
 800528e:	2049      	movs	r0, #73	; 0x49
 8005290:	f7fb fc08 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005294:	2100      	movs	r1, #0
 8005296:	204a      	movs	r0, #74	; 0x4a
 8005298:	f7fb fc04 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800529c:	2100      	movs	r1, #0
 800529e:	204b      	movs	r0, #75	; 0x4b
 80052a0:	f7fb fc00 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80052a4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80052a8:	2044      	movs	r0, #68	; 0x44
 80052aa:	f7fb fbfb 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80052ae:	2100      	movs	r1, #0
 80052b0:	2045      	movs	r0, #69	; 0x45
 80052b2:	f7fb fbf7 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80052b6:	f240 113f 	movw	r1, #319	; 0x13f
 80052ba:	2046      	movs	r0, #70	; 0x46
 80052bc:	f7fb fbf2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80052c0:	f240 7107 	movw	r1, #1799	; 0x707
 80052c4:	2030      	movs	r0, #48	; 0x30
 80052c6:	f7fb fbed 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80052ca:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052ce:	2031      	movs	r0, #49	; 0x31
 80052d0:	f7fb fbe8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80052d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052d8:	2032      	movs	r0, #50	; 0x32
 80052da:	f7fb fbe3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80052de:	f240 5102 	movw	r1, #1282	; 0x502
 80052e2:	2033      	movs	r0, #51	; 0x33
 80052e4:	f7fb fbde 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80052e8:	f240 5107 	movw	r1, #1287	; 0x507
 80052ec:	2034      	movs	r0, #52	; 0x34
 80052ee:	f7fb fbd9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80052f2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052f6:	2035      	movs	r0, #53	; 0x35
 80052f8:	f7fb fbd4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80052fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005300:	2036      	movs	r0, #54	; 0x36
 8005302:	f7fb fbcf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005306:	f240 5102 	movw	r1, #1282	; 0x502
 800530a:	2037      	movs	r0, #55	; 0x37
 800530c:	f7fb fbca 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005310:	f240 3102 	movw	r1, #770	; 0x302
 8005314:	203a      	movs	r0, #58	; 0x3a
 8005316:	f7fb fbc5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800531a:	f240 3102 	movw	r1, #770	; 0x302
 800531e:	203b      	movs	r0, #59	; 0x3b
 8005320:	f7fb fbc0 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005324:	2100      	movs	r1, #0
 8005326:	2023      	movs	r0, #35	; 0x23
 8005328:	f7fb fbbc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800532c:	2100      	movs	r1, #0
 800532e:	2024      	movs	r0, #36	; 0x24
 8005330:	f7fb fbb8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005338:	2025      	movs	r0, #37	; 0x25
 800533a:	f7fb fbb3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800533e:	2100      	movs	r1, #0
 8005340:	204f      	movs	r0, #79	; 0x4f
 8005342:	f7fb fbaf 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005346:	2100      	movs	r1, #0
 8005348:	204e      	movs	r0, #78	; 0x4e
 800534a:	f7fb fbab 	bl	8000aa4 <LCD_WriteReg>
 800534e:	f000 bd2d 	b.w	8005dac <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005352:	4b61      	ldr	r3, [pc, #388]	; (80054d8 <LCD_Init+0x3560>)
 8005354:	889b      	ldrh	r3, [r3, #4]
 8005356:	f244 5231 	movw	r2, #17713	; 0x4531
 800535a:	4293      	cmp	r3, r2
 800535c:	f040 80be 	bne.w	80054dc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005360:	2101      	movs	r1, #1
 8005362:	2000      	movs	r0, #0
 8005364:	f7fb fb9e 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 8005368:	200a      	movs	r0, #10
 800536a:	f001 f9d1 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800536e:	f241 6128 	movw	r1, #5672	; 0x1628
 8005372:	2010      	movs	r0, #16
 8005374:	f7fb fb96 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005378:	210e      	movs	r1, #14
 800537a:	2012      	movs	r0, #18
 800537c:	f7fb fb92 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005380:	f640 2139 	movw	r1, #2617	; 0xa39
 8005384:	2013      	movs	r0, #19
 8005386:	f7fb fb8d 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 800538a:	200a      	movs	r0, #10
 800538c:	f001 f9c0 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005390:	2140      	movs	r1, #64	; 0x40
 8005392:	2011      	movs	r0, #17
 8005394:	f7fb fb86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005398:	2150      	movs	r1, #80	; 0x50
 800539a:	2015      	movs	r0, #21
 800539c:	f7fb fb82 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 80053a0:	200a      	movs	r0, #10
 80053a2:	f001 f9b5 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80053a6:	211e      	movs	r1, #30
 80053a8:	2012      	movs	r0, #18
 80053aa:	f7fb fb7b 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 80053ae:	200a      	movs	r0, #10
 80053b0:	f001 f9ae 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80053b4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80053b8:	2010      	movs	r0, #16
 80053ba:	f7fb fb73 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80053be:	f642 2139 	movw	r1, #10809	; 0x2a39
 80053c2:	2013      	movs	r0, #19
 80053c4:	f7fb fb6e 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(10);
 80053c8:	200a      	movs	r0, #10
 80053ca:	f001 f9a1 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80053ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053d2:	2001      	movs	r0, #1
 80053d4:	f7fb fb66 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80053d8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053dc:	2002      	movs	r0, #2
 80053de:	f7fb fb61 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80053e2:	f241 0138 	movw	r1, #4152	; 0x1038
 80053e6:	2003      	movs	r0, #3
 80053e8:	f7fb fb5c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80053ec:	f240 2102 	movw	r1, #514	; 0x202
 80053f0:	2008      	movs	r0, #8
 80053f2:	f7fb fb57 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80053f6:	2108      	movs	r1, #8
 80053f8:	200a      	movs	r0, #10
 80053fa:	f7fb fb53 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80053fe:	2100      	movs	r1, #0
 8005400:	2030      	movs	r0, #48	; 0x30
 8005402:	f7fb fb4f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005406:	f240 4102 	movw	r1, #1026	; 0x402
 800540a:	2031      	movs	r0, #49	; 0x31
 800540c:	f7fb fb4a 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005410:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005414:	2032      	movs	r0, #50	; 0x32
 8005416:	f7fb fb45 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800541a:	f240 5103 	movw	r1, #1283	; 0x503
 800541e:	2033      	movs	r0, #51	; 0x33
 8005420:	f7fb fb40 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005424:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005428:	2034      	movs	r0, #52	; 0x34
 800542a:	f7fb fb3b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800542e:	f240 3101 	movw	r1, #769	; 0x301
 8005432:	2035      	movs	r0, #53	; 0x35
 8005434:	f7fb fb36 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005438:	f240 7107 	movw	r1, #1799	; 0x707
 800543c:	2036      	movs	r0, #54	; 0x36
 800543e:	f7fb fb31 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005442:	f240 3105 	movw	r1, #773	; 0x305
 8005446:	2037      	movs	r0, #55	; 0x37
 8005448:	f7fb fb2c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800544c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005450:	2038      	movs	r0, #56	; 0x38
 8005452:	f7fb fb27 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005456:	f640 710b 	movw	r1, #3851	; 0xf0b
 800545a:	2039      	movs	r0, #57	; 0x39
 800545c:	f7fb fb22 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005460:	2102      	movs	r1, #2
 8005462:	2041      	movs	r0, #65	; 0x41
 8005464:	f7fb fb1e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005468:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800546c:	2060      	movs	r0, #96	; 0x60
 800546e:	f7fb fb19 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005472:	2101      	movs	r1, #1
 8005474:	2061      	movs	r0, #97	; 0x61
 8005476:	f7fb fb15 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800547a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800547e:	2090      	movs	r0, #144	; 0x90
 8005480:	f7fb fb10 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005484:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005488:	2092      	movs	r0, #146	; 0x92
 800548a:	f7fb fb0b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800548e:	2104      	movs	r1, #4
 8005490:	2093      	movs	r0, #147	; 0x93
 8005492:	f7fb fb07 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800549a:	20a0      	movs	r0, #160	; 0xa0
 800549c:	f7fb fb02 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80054a0:	2101      	movs	r1, #1
 80054a2:	2007      	movs	r0, #7
 80054a4:	f7fb fafe 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80054a8:	2121      	movs	r1, #33	; 0x21
 80054aa:	2007      	movs	r0, #7
 80054ac:	f7fb fafa 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80054b0:	2123      	movs	r1, #35	; 0x23
 80054b2:	2007      	movs	r0, #7
 80054b4:	f7fb faf6 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80054b8:	2133      	movs	r1, #51	; 0x33
 80054ba:	2007      	movs	r0, #7
 80054bc:	f7fb faf2 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80054c0:	f240 1133 	movw	r1, #307	; 0x133
 80054c4:	2007      	movs	r0, #7
 80054c6:	f7fb faed 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80054ca:	2100      	movs	r1, #0
 80054cc:	20a0      	movs	r0, #160	; 0xa0
 80054ce:	f7fb fae9 	bl	8000aa4 <LCD_WriteReg>
 80054d2:	f000 bc6b 	b.w	8005dac <LCD_Init+0x3e34>
 80054d6:	bf00      	nop
 80054d8:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x4535) {
 80054dc:	4b5b      	ldr	r3, [pc, #364]	; (800564c <LCD_Init+0x36d4>)
 80054de:	889b      	ldrh	r3, [r3, #4]
 80054e0:	f244 5235 	movw	r2, #17717	; 0x4535
 80054e4:	4293      	cmp	r3, r2
 80054e6:	f040 80b3 	bne.w	8005650 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80054ea:	2130      	movs	r1, #48	; 0x30
 80054ec:	2015      	movs	r0, #21
 80054ee:	f7fb fad9 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80054f2:	2110      	movs	r1, #16
 80054f4:	209a      	movs	r0, #154	; 0x9a
 80054f6:	f7fb fad5 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80054fa:	2120      	movs	r1, #32
 80054fc:	2011      	movs	r0, #17
 80054fe:	f7fb fad1 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005502:	f243 4128 	movw	r1, #13352	; 0x3428
 8005506:	2010      	movs	r0, #16
 8005508:	f7fb facc 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800550c:	2102      	movs	r1, #2
 800550e:	2012      	movs	r0, #18
 8005510:	f7fb fac8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005514:	f241 0138 	movw	r1, #4152	; 0x1038
 8005518:	2013      	movs	r0, #19
 800551a:	f7fb fac3 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(40);
 800551e:	2028      	movs	r0, #40	; 0x28
 8005520:	f001 f8f6 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005524:	2112      	movs	r1, #18
 8005526:	2012      	movs	r0, #18
 8005528:	f7fb fabc 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(40);
 800552c:	2028      	movs	r0, #40	; 0x28
 800552e:	f001 f8ef 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005532:	f243 4120 	movw	r1, #13344	; 0x3420
 8005536:	2010      	movs	r0, #16
 8005538:	f7fb fab4 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800553c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005540:	2013      	movs	r0, #19
 8005542:	f7fb faaf 	bl	8000aa4 <LCD_WriteReg>
		HAL_Delay(70);
 8005546:	2046      	movs	r0, #70	; 0x46
 8005548:	f001 f8e2 	bl	8006710 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800554c:	2100      	movs	r1, #0
 800554e:	2030      	movs	r0, #48	; 0x30
 8005550:	f7fb faa8 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005554:	f240 4102 	movw	r1, #1026	; 0x402
 8005558:	2031      	movs	r0, #49	; 0x31
 800555a:	f7fb faa3 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800555e:	f240 3107 	movw	r1, #775	; 0x307
 8005562:	2032      	movs	r0, #50	; 0x32
 8005564:	f7fb fa9e 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005568:	f44f 7141 	mov.w	r1, #772	; 0x304
 800556c:	2033      	movs	r0, #51	; 0x33
 800556e:	f7fb fa99 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005572:	2104      	movs	r1, #4
 8005574:	2034      	movs	r0, #52	; 0x34
 8005576:	f7fb fa95 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800557a:	f240 4101 	movw	r1, #1025	; 0x401
 800557e:	2035      	movs	r0, #53	; 0x35
 8005580:	f7fb fa90 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005584:	f240 7107 	movw	r1, #1799	; 0x707
 8005588:	2036      	movs	r0, #54	; 0x36
 800558a:	f7fb fa8b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800558e:	f240 3105 	movw	r1, #773	; 0x305
 8005592:	2037      	movs	r0, #55	; 0x37
 8005594:	f7fb fa86 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005598:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800559c:	2038      	movs	r0, #56	; 0x38
 800559e:	f7fb fa81 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80055a2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80055a6:	2039      	movs	r0, #57	; 0x39
 80055a8:	f7fb fa7c 	bl	8000aa4 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80055ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055b0:	2001      	movs	r0, #1
 80055b2:	f7fb fa77 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80055b6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055ba:	2002      	movs	r0, #2
 80055bc:	f7fb fa72 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80055c0:	f241 0130 	movw	r1, #4144	; 0x1030
 80055c4:	2003      	movs	r0, #3
 80055c6:	f7fb fa6d 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80055ca:	f640 0108 	movw	r1, #2056	; 0x808
 80055ce:	2008      	movs	r0, #8
 80055d0:	f7fb fa68 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80055d4:	2108      	movs	r1, #8
 80055d6:	200a      	movs	r0, #10
 80055d8:	f7fb fa64 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80055dc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80055e0:	2060      	movs	r0, #96	; 0x60
 80055e2:	f7fb fa5f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80055e6:	2101      	movs	r1, #1
 80055e8:	2061      	movs	r0, #97	; 0x61
 80055ea:	f7fb fa5b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80055ee:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80055f2:	2090      	movs	r0, #144	; 0x90
 80055f4:	f7fb fa56 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80055f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055fc:	2092      	movs	r0, #146	; 0x92
 80055fe:	f7fb fa51 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005606:	2093      	movs	r0, #147	; 0x93
 8005608:	f7fb fa4c 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800560c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005610:	20a0      	movs	r0, #160	; 0xa0
 8005612:	f7fb fa47 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005616:	2110      	movs	r1, #16
 8005618:	20a3      	movs	r0, #163	; 0xa3
 800561a:	f7fb fa43 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800561e:	2101      	movs	r1, #1
 8005620:	2007      	movs	r0, #7
 8005622:	f7fb fa3f 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005626:	2121      	movs	r1, #33	; 0x21
 8005628:	2007      	movs	r0, #7
 800562a:	f7fb fa3b 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800562e:	2123      	movs	r1, #35	; 0x23
 8005630:	2007      	movs	r0, #7
 8005632:	f7fb fa37 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005636:	2133      	movs	r1, #51	; 0x33
 8005638:	2007      	movs	r0, #7
 800563a:	f7fb fa33 	bl	8000aa4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800563e:	f240 1133 	movw	r1, #307	; 0x133
 8005642:	2007      	movs	r0, #7
 8005644:	f7fb fa2e 	bl	8000aa4 <LCD_WriteReg>
 8005648:	e3b0      	b.n	8005dac <LCD_Init+0x3e34>
 800564a:	bf00      	nop
 800564c:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0X1963) {
 8005650:	4ba8      	ldr	r3, [pc, #672]	; (80058f4 <LCD_Init+0x397c>)
 8005652:	889b      	ldrh	r3, [r3, #4]
 8005654:	f641 1263 	movw	r2, #6499	; 0x1963
 8005658:	4293      	cmp	r3, r2
 800565a:	f040 83a7 	bne.w	8005dac <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800565e:	20e2      	movs	r0, #226	; 0xe2
 8005660:	f7fb f994 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005664:	4ba4      	ldr	r3, [pc, #656]	; (80058f8 <LCD_Init+0x3980>)
 8005666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800566a:	611a      	str	r2, [r3, #16]
 800566c:	4ba2      	ldr	r3, [pc, #648]	; (80058f8 <LCD_Init+0x3980>)
 800566e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005672:	615a      	str	r2, [r3, #20]
 8005674:	4ba1      	ldr	r3, [pc, #644]	; (80058fc <LCD_Init+0x3984>)
 8005676:	221d      	movs	r2, #29
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	4b9f      	ldr	r3, [pc, #636]	; (80058f8 <LCD_Init+0x3980>)
 800567c:	2280      	movs	r2, #128	; 0x80
 800567e:	615a      	str	r2, [r3, #20]
 8005680:	4b9d      	ldr	r3, [pc, #628]	; (80058f8 <LCD_Init+0x3980>)
 8005682:	2280      	movs	r2, #128	; 0x80
 8005684:	611a      	str	r2, [r3, #16]
 8005686:	4b9c      	ldr	r3, [pc, #624]	; (80058f8 <LCD_Init+0x3980>)
 8005688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800568e:	4b9a      	ldr	r3, [pc, #616]	; (80058f8 <LCD_Init+0x3980>)
 8005690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005694:	611a      	str	r2, [r3, #16]
 8005696:	4b98      	ldr	r3, [pc, #608]	; (80058f8 <LCD_Init+0x3980>)
 8005698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569c:	615a      	str	r2, [r3, #20]
 800569e:	4b97      	ldr	r3, [pc, #604]	; (80058fc <LCD_Init+0x3984>)
 80056a0:	2202      	movs	r2, #2
 80056a2:	60da      	str	r2, [r3, #12]
 80056a4:	4b94      	ldr	r3, [pc, #592]	; (80058f8 <LCD_Init+0x3980>)
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	615a      	str	r2, [r3, #20]
 80056aa:	4b93      	ldr	r3, [pc, #588]	; (80058f8 <LCD_Init+0x3980>)
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	611a      	str	r2, [r3, #16]
 80056b0:	4b91      	ldr	r3, [pc, #580]	; (80058f8 <LCD_Init+0x3980>)
 80056b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80056b8:	4b8f      	ldr	r3, [pc, #572]	; (80058f8 <LCD_Init+0x3980>)
 80056ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056be:	611a      	str	r2, [r3, #16]
 80056c0:	4b8d      	ldr	r3, [pc, #564]	; (80058f8 <LCD_Init+0x3980>)
 80056c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c6:	615a      	str	r2, [r3, #20]
 80056c8:	4b8c      	ldr	r3, [pc, #560]	; (80058fc <LCD_Init+0x3984>)
 80056ca:	2204      	movs	r2, #4
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	4b8a      	ldr	r3, [pc, #552]	; (80058f8 <LCD_Init+0x3980>)
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	615a      	str	r2, [r3, #20]
 80056d4:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <LCD_Init+0x3980>)
 80056d6:	2280      	movs	r2, #128	; 0x80
 80056d8:	611a      	str	r2, [r3, #16]
 80056da:	4b87      	ldr	r3, [pc, #540]	; (80058f8 <LCD_Init+0x3980>)
 80056dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80056e2:	2001      	movs	r0, #1
 80056e4:	f001 f814 	bl	8006710 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80056e8:	20e0      	movs	r0, #224	; 0xe0
 80056ea:	f7fb f94f 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80056ee:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <LCD_Init+0x3980>)
 80056f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f4:	611a      	str	r2, [r3, #16]
 80056f6:	4b80      	ldr	r3, [pc, #512]	; (80058f8 <LCD_Init+0x3980>)
 80056f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fc:	615a      	str	r2, [r3, #20]
 80056fe:	4b7f      	ldr	r3, [pc, #508]	; (80058fc <LCD_Init+0x3984>)
 8005700:	2201      	movs	r2, #1
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	4b7c      	ldr	r3, [pc, #496]	; (80058f8 <LCD_Init+0x3980>)
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	615a      	str	r2, [r3, #20]
 800570a:	4b7b      	ldr	r3, [pc, #492]	; (80058f8 <LCD_Init+0x3980>)
 800570c:	2280      	movs	r2, #128	; 0x80
 800570e:	611a      	str	r2, [r3, #16]
 8005710:	4b79      	ldr	r3, [pc, #484]	; (80058f8 <LCD_Init+0x3980>)
 8005712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005716:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005718:	200a      	movs	r0, #10
 800571a:	f000 fff9 	bl	8006710 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800571e:	20e0      	movs	r0, #224	; 0xe0
 8005720:	f7fb f934 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005724:	4b74      	ldr	r3, [pc, #464]	; (80058f8 <LCD_Init+0x3980>)
 8005726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572a:	611a      	str	r2, [r3, #16]
 800572c:	4b72      	ldr	r3, [pc, #456]	; (80058f8 <LCD_Init+0x3980>)
 800572e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005732:	615a      	str	r2, [r3, #20]
 8005734:	4b71      	ldr	r3, [pc, #452]	; (80058fc <LCD_Init+0x3984>)
 8005736:	2203      	movs	r2, #3
 8005738:	60da      	str	r2, [r3, #12]
 800573a:	4b6f      	ldr	r3, [pc, #444]	; (80058f8 <LCD_Init+0x3980>)
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	615a      	str	r2, [r3, #20]
 8005740:	4b6d      	ldr	r3, [pc, #436]	; (80058f8 <LCD_Init+0x3980>)
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	611a      	str	r2, [r3, #16]
 8005746:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <LCD_Init+0x3980>)
 8005748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800574e:	200c      	movs	r0, #12
 8005750:	f000 ffde 	bl	8006710 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005754:	2001      	movs	r0, #1
 8005756:	f7fb f919 	bl	800098c <LCD_WR_REG>
		HAL_Delay(10);
 800575a:	200a      	movs	r0, #10
 800575c:	f000 ffd8 	bl	8006710 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005760:	20e6      	movs	r0, #230	; 0xe6
 8005762:	f7fb f913 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005766:	4b64      	ldr	r3, [pc, #400]	; (80058f8 <LCD_Init+0x3980>)
 8005768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	4b62      	ldr	r3, [pc, #392]	; (80058f8 <LCD_Init+0x3980>)
 8005770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005774:	615a      	str	r2, [r3, #20]
 8005776:	4b61      	ldr	r3, [pc, #388]	; (80058fc <LCD_Init+0x3984>)
 8005778:	222f      	movs	r2, #47	; 0x2f
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	4b5e      	ldr	r3, [pc, #376]	; (80058f8 <LCD_Init+0x3980>)
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	615a      	str	r2, [r3, #20]
 8005782:	4b5d      	ldr	r3, [pc, #372]	; (80058f8 <LCD_Init+0x3980>)
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	611a      	str	r2, [r3, #16]
 8005788:	4b5b      	ldr	r3, [pc, #364]	; (80058f8 <LCD_Init+0x3980>)
 800578a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005790:	4b59      	ldr	r3, [pc, #356]	; (80058f8 <LCD_Init+0x3980>)
 8005792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005796:	611a      	str	r2, [r3, #16]
 8005798:	4b57      	ldr	r3, [pc, #348]	; (80058f8 <LCD_Init+0x3980>)
 800579a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579e:	615a      	str	r2, [r3, #20]
 80057a0:	4b56      	ldr	r3, [pc, #344]	; (80058fc <LCD_Init+0x3984>)
 80057a2:	22ff      	movs	r2, #255	; 0xff
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	4b54      	ldr	r3, [pc, #336]	; (80058f8 <LCD_Init+0x3980>)
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	615a      	str	r2, [r3, #20]
 80057ac:	4b52      	ldr	r3, [pc, #328]	; (80058f8 <LCD_Init+0x3980>)
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	611a      	str	r2, [r3, #16]
 80057b2:	4b51      	ldr	r3, [pc, #324]	; (80058f8 <LCD_Init+0x3980>)
 80057b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80057ba:	4b4f      	ldr	r3, [pc, #316]	; (80058f8 <LCD_Init+0x3980>)
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	611a      	str	r2, [r3, #16]
 80057c2:	4b4d      	ldr	r3, [pc, #308]	; (80058f8 <LCD_Init+0x3980>)
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	615a      	str	r2, [r3, #20]
 80057ca:	4b4c      	ldr	r3, [pc, #304]	; (80058fc <LCD_Init+0x3984>)
 80057cc:	22ff      	movs	r2, #255	; 0xff
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <LCD_Init+0x3980>)
 80057d2:	2280      	movs	r2, #128	; 0x80
 80057d4:	615a      	str	r2, [r3, #20]
 80057d6:	4b48      	ldr	r3, [pc, #288]	; (80058f8 <LCD_Init+0x3980>)
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	611a      	str	r2, [r3, #16]
 80057dc:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <LCD_Init+0x3980>)
 80057de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80057e4:	20b0      	movs	r0, #176	; 0xb0
 80057e6:	f7fb f8d1 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80057ea:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <LCD_Init+0x3980>)
 80057ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f0:	611a      	str	r2, [r3, #16]
 80057f2:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <LCD_Init+0x3980>)
 80057f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f8:	615a      	str	r2, [r3, #20]
 80057fa:	4b40      	ldr	r3, [pc, #256]	; (80058fc <LCD_Init+0x3984>)
 80057fc:	2220      	movs	r2, #32
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	4b3d      	ldr	r3, [pc, #244]	; (80058f8 <LCD_Init+0x3980>)
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	615a      	str	r2, [r3, #20]
 8005806:	4b3c      	ldr	r3, [pc, #240]	; (80058f8 <LCD_Init+0x3980>)
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	611a      	str	r2, [r3, #16]
 800580c:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <LCD_Init+0x3980>)
 800580e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005812:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005814:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <LCD_Init+0x3980>)
 8005816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800581a:	611a      	str	r2, [r3, #16]
 800581c:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <LCD_Init+0x3980>)
 800581e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005822:	615a      	str	r2, [r3, #20]
 8005824:	4b35      	ldr	r3, [pc, #212]	; (80058fc <LCD_Init+0x3984>)
 8005826:	2200      	movs	r2, #0
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	4b33      	ldr	r3, [pc, #204]	; (80058f8 <LCD_Init+0x3980>)
 800582c:	2280      	movs	r2, #128	; 0x80
 800582e:	615a      	str	r2, [r3, #20]
 8005830:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <LCD_Init+0x3980>)
 8005832:	2280      	movs	r2, #128	; 0x80
 8005834:	611a      	str	r2, [r3, #16]
 8005836:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <LCD_Init+0x3980>)
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800583e:	4b2e      	ldr	r3, [pc, #184]	; (80058f8 <LCD_Init+0x3980>)
 8005840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005844:	611a      	str	r2, [r3, #16]
 8005846:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <LCD_Init+0x3980>)
 8005848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584c:	615a      	str	r2, [r3, #20]
 800584e:	4b2b      	ldr	r3, [pc, #172]	; (80058fc <LCD_Init+0x3984>)
 8005850:	2203      	movs	r2, #3
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <LCD_Init+0x3980>)
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	615a      	str	r2, [r3, #20]
 800585a:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <LCD_Init+0x3980>)
 800585c:	2280      	movs	r2, #128	; 0x80
 800585e:	611a      	str	r2, [r3, #16]
 8005860:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <LCD_Init+0x3980>)
 8005862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005866:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005868:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <LCD_Init+0x3980>)
 800586a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800586e:	611a      	str	r2, [r3, #16]
 8005870:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <LCD_Init+0x3980>)
 8005872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005876:	615a      	str	r2, [r3, #20]
 8005878:	4b20      	ldr	r3, [pc, #128]	; (80058fc <LCD_Init+0x3984>)
 800587a:	f240 321f 	movw	r2, #799	; 0x31f
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <LCD_Init+0x3980>)
 8005882:	2280      	movs	r2, #128	; 0x80
 8005884:	615a      	str	r2, [r3, #20]
 8005886:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <LCD_Init+0x3980>)
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	611a      	str	r2, [r3, #16]
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <LCD_Init+0x3980>)
 800588e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005892:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005894:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <LCD_Init+0x3980>)
 8005896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800589a:	611a      	str	r2, [r3, #16]
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <LCD_Init+0x3980>)
 800589e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a2:	615a      	str	r2, [r3, #20]
 80058a4:	4b15      	ldr	r3, [pc, #84]	; (80058fc <LCD_Init+0x3984>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <LCD_Init+0x3980>)
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	615a      	str	r2, [r3, #20]
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <LCD_Init+0x3980>)
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	611a      	str	r2, [r3, #16]
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <LCD_Init+0x3980>)
 80058b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058bc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <LCD_Init+0x3980>)
 80058c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058c4:	611a      	str	r2, [r3, #16]
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <LCD_Init+0x3980>)
 80058c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058cc:	615a      	str	r2, [r3, #20]
 80058ce:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <LCD_Init+0x3984>)
 80058d0:	f240 12df 	movw	r2, #479	; 0x1df
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <LCD_Init+0x3980>)
 80058d8:	2280      	movs	r2, #128	; 0x80
 80058da:	615a      	str	r2, [r3, #20]
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <LCD_Init+0x3980>)
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	611a      	str	r2, [r3, #16]
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <LCD_Init+0x3980>)
 80058e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80058ea:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <LCD_Init+0x3980>)
 80058ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f0:	e006      	b.n	8005900 <LCD_Init+0x3988>
 80058f2:	bf00      	nop
 80058f4:	20000030 	.word	0x20000030
 80058f8:	40011000 	.word	0x40011000
 80058fc:	40010c00 	.word	0x40010c00
 8005900:	611a      	str	r2, [r3, #16]
 8005902:	4ba3      	ldr	r3, [pc, #652]	; (8005b90 <LCD_Init+0x3c18>)
 8005904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	4ba2      	ldr	r3, [pc, #648]	; (8005b94 <LCD_Init+0x3c1c>)
 800590c:	2200      	movs	r2, #0
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	4b9f      	ldr	r3, [pc, #636]	; (8005b90 <LCD_Init+0x3c18>)
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	615a      	str	r2, [r3, #20]
 8005916:	4b9e      	ldr	r3, [pc, #632]	; (8005b90 <LCD_Init+0x3c18>)
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	611a      	str	r2, [r3, #16]
 800591c:	4b9c      	ldr	r3, [pc, #624]	; (8005b90 <LCD_Init+0x3c18>)
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005924:	20b4      	movs	r0, #180	; 0xb4
 8005926:	f7fb f831 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800592a:	4b99      	ldr	r3, [pc, #612]	; (8005b90 <LCD_Init+0x3c18>)
 800592c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005930:	611a      	str	r2, [r3, #16]
 8005932:	4b97      	ldr	r3, [pc, #604]	; (8005b90 <LCD_Init+0x3c18>)
 8005934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005938:	615a      	str	r2, [r3, #20]
 800593a:	4b96      	ldr	r3, [pc, #600]	; (8005b94 <LCD_Init+0x3c1c>)
 800593c:	2204      	movs	r2, #4
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	4b93      	ldr	r3, [pc, #588]	; (8005b90 <LCD_Init+0x3c18>)
 8005942:	2280      	movs	r2, #128	; 0x80
 8005944:	615a      	str	r2, [r3, #20]
 8005946:	4b92      	ldr	r3, [pc, #584]	; (8005b90 <LCD_Init+0x3c18>)
 8005948:	2280      	movs	r2, #128	; 0x80
 800594a:	611a      	str	r2, [r3, #16]
 800594c:	4b90      	ldr	r3, [pc, #576]	; (8005b90 <LCD_Init+0x3c18>)
 800594e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005952:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005954:	4b8e      	ldr	r3, [pc, #568]	; (8005b90 <LCD_Init+0x3c18>)
 8005956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595a:	611a      	str	r2, [r3, #16]
 800595c:	4b8c      	ldr	r3, [pc, #560]	; (8005b90 <LCD_Init+0x3c18>)
 800595e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005962:	615a      	str	r2, [r3, #20]
 8005964:	4b8b      	ldr	r3, [pc, #556]	; (8005b94 <LCD_Init+0x3c1c>)
 8005966:	f240 421f 	movw	r2, #1055	; 0x41f
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	4b88      	ldr	r3, [pc, #544]	; (8005b90 <LCD_Init+0x3c18>)
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	615a      	str	r2, [r3, #20]
 8005972:	4b87      	ldr	r3, [pc, #540]	; (8005b90 <LCD_Init+0x3c18>)
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	611a      	str	r2, [r3, #16]
 8005978:	4b85      	ldr	r3, [pc, #532]	; (8005b90 <LCD_Init+0x3c18>)
 800597a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005980:	4b83      	ldr	r3, [pc, #524]	; (8005b90 <LCD_Init+0x3c18>)
 8005982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005986:	611a      	str	r2, [r3, #16]
 8005988:	4b81      	ldr	r3, [pc, #516]	; (8005b90 <LCD_Init+0x3c18>)
 800598a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598e:	615a      	str	r2, [r3, #20]
 8005990:	4b80      	ldr	r3, [pc, #512]	; (8005b94 <LCD_Init+0x3c1c>)
 8005992:	2200      	movs	r2, #0
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	4b7e      	ldr	r3, [pc, #504]	; (8005b90 <LCD_Init+0x3c18>)
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	615a      	str	r2, [r3, #20]
 800599c:	4b7c      	ldr	r3, [pc, #496]	; (8005b90 <LCD_Init+0x3c18>)
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	611a      	str	r2, [r3, #16]
 80059a2:	4b7b      	ldr	r3, [pc, #492]	; (8005b90 <LCD_Init+0x3c18>)
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80059aa:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <LCD_Init+0x3c18>)
 80059ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b0:	611a      	str	r2, [r3, #16]
 80059b2:	4b77      	ldr	r3, [pc, #476]	; (8005b90 <LCD_Init+0x3c18>)
 80059b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b8:	615a      	str	r2, [r3, #20]
 80059ba:	4b76      	ldr	r3, [pc, #472]	; (8005b94 <LCD_Init+0x3c1c>)
 80059bc:	222e      	movs	r2, #46	; 0x2e
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	4b73      	ldr	r3, [pc, #460]	; (8005b90 <LCD_Init+0x3c18>)
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	615a      	str	r2, [r3, #20]
 80059c6:	4b72      	ldr	r3, [pc, #456]	; (8005b90 <LCD_Init+0x3c18>)
 80059c8:	2280      	movs	r2, #128	; 0x80
 80059ca:	611a      	str	r2, [r3, #16]
 80059cc:	4b70      	ldr	r3, [pc, #448]	; (8005b90 <LCD_Init+0x3c18>)
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80059d4:	4b6e      	ldr	r3, [pc, #440]	; (8005b90 <LCD_Init+0x3c18>)
 80059d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	4b6c      	ldr	r3, [pc, #432]	; (8005b90 <LCD_Init+0x3c18>)
 80059de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e2:	615a      	str	r2, [r3, #20]
 80059e4:	4b6b      	ldr	r3, [pc, #428]	; (8005b94 <LCD_Init+0x3c1c>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <LCD_Init+0x3c18>)
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	615a      	str	r2, [r3, #20]
 80059f0:	4b67      	ldr	r3, [pc, #412]	; (8005b90 <LCD_Init+0x3c18>)
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	4b66      	ldr	r3, [pc, #408]	; (8005b90 <LCD_Init+0x3c18>)
 80059f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80059fe:	4b64      	ldr	r3, [pc, #400]	; (8005b90 <LCD_Init+0x3c18>)
 8005a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a04:	611a      	str	r2, [r3, #16]
 8005a06:	4b62      	ldr	r3, [pc, #392]	; (8005b90 <LCD_Init+0x3c18>)
 8005a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0c:	615a      	str	r2, [r3, #20]
 8005a0e:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <LCD_Init+0x3c1c>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	4b5e      	ldr	r3, [pc, #376]	; (8005b90 <LCD_Init+0x3c18>)
 8005a16:	2280      	movs	r2, #128	; 0x80
 8005a18:	615a      	str	r2, [r3, #20]
 8005a1a:	4b5d      	ldr	r3, [pc, #372]	; (8005b90 <LCD_Init+0x3c18>)
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	611a      	str	r2, [r3, #16]
 8005a20:	4b5b      	ldr	r3, [pc, #364]	; (8005b90 <LCD_Init+0x3c18>)
 8005a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a28:	4b59      	ldr	r3, [pc, #356]	; (8005b90 <LCD_Init+0x3c18>)
 8005a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a2e:	611a      	str	r2, [r3, #16]
 8005a30:	4b57      	ldr	r3, [pc, #348]	; (8005b90 <LCD_Init+0x3c18>)
 8005a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a36:	615a      	str	r2, [r3, #20]
 8005a38:	4b56      	ldr	r3, [pc, #344]	; (8005b94 <LCD_Init+0x3c1c>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	4b54      	ldr	r3, [pc, #336]	; (8005b90 <LCD_Init+0x3c18>)
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	615a      	str	r2, [r3, #20]
 8005a44:	4b52      	ldr	r3, [pc, #328]	; (8005b90 <LCD_Init+0x3c18>)
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	611a      	str	r2, [r3, #16]
 8005a4a:	4b51      	ldr	r3, [pc, #324]	; (8005b90 <LCD_Init+0x3c18>)
 8005a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a52:	4b4f      	ldr	r3, [pc, #316]	; (8005b90 <LCD_Init+0x3c18>)
 8005a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a58:	611a      	str	r2, [r3, #16]
 8005a5a:	4b4d      	ldr	r3, [pc, #308]	; (8005b90 <LCD_Init+0x3c18>)
 8005a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a60:	615a      	str	r2, [r3, #20]
 8005a62:	4b4c      	ldr	r3, [pc, #304]	; (8005b94 <LCD_Init+0x3c1c>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	4b49      	ldr	r3, [pc, #292]	; (8005b90 <LCD_Init+0x3c18>)
 8005a6a:	2280      	movs	r2, #128	; 0x80
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	4b48      	ldr	r3, [pc, #288]	; (8005b90 <LCD_Init+0x3c18>)
 8005a70:	2280      	movs	r2, #128	; 0x80
 8005a72:	611a      	str	r2, [r3, #16]
 8005a74:	4b46      	ldr	r3, [pc, #280]	; (8005b90 <LCD_Init+0x3c18>)
 8005a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005a7c:	20b6      	movs	r0, #182	; 0xb6
 8005a7e:	f7fa ff85 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005a82:	4b43      	ldr	r3, [pc, #268]	; (8005b90 <LCD_Init+0x3c18>)
 8005a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a88:	611a      	str	r2, [r3, #16]
 8005a8a:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <LCD_Init+0x3c18>)
 8005a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a90:	615a      	str	r2, [r3, #20]
 8005a92:	4b40      	ldr	r3, [pc, #256]	; (8005b94 <LCD_Init+0x3c1c>)
 8005a94:	2202      	movs	r2, #2
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <LCD_Init+0x3c18>)
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	615a      	str	r2, [r3, #20]
 8005a9e:	4b3c      	ldr	r3, [pc, #240]	; (8005b90 <LCD_Init+0x3c18>)
 8005aa0:	2280      	movs	r2, #128	; 0x80
 8005aa2:	611a      	str	r2, [r3, #16]
 8005aa4:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <LCD_Init+0x3c18>)
 8005aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aaa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005aac:	4b38      	ldr	r3, [pc, #224]	; (8005b90 <LCD_Init+0x3c18>)
 8005aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab2:	611a      	str	r2, [r3, #16]
 8005ab4:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <LCD_Init+0x3c18>)
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	615a      	str	r2, [r3, #20]
 8005abc:	4b35      	ldr	r3, [pc, #212]	; (8005b94 <LCD_Init+0x3c1c>)
 8005abe:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005ac2:	60da      	str	r2, [r3, #12]
 8005ac4:	4b32      	ldr	r3, [pc, #200]	; (8005b90 <LCD_Init+0x3c18>)
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	615a      	str	r2, [r3, #20]
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <LCD_Init+0x3c18>)
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	611a      	str	r2, [r3, #16]
 8005ad0:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <LCD_Init+0x3c18>)
 8005ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005ad8:	4b2d      	ldr	r3, [pc, #180]	; (8005b90 <LCD_Init+0x3c18>)
 8005ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ade:	611a      	str	r2, [r3, #16]
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <LCD_Init+0x3c18>)
 8005ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae6:	615a      	str	r2, [r3, #20]
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <LCD_Init+0x3c1c>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	4b28      	ldr	r3, [pc, #160]	; (8005b90 <LCD_Init+0x3c18>)
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	615a      	str	r2, [r3, #20]
 8005af4:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <LCD_Init+0x3c18>)
 8005af6:	2280      	movs	r2, #128	; 0x80
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <LCD_Init+0x3c18>)
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <LCD_Init+0x3c18>)
 8005b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b08:	611a      	str	r2, [r3, #16]
 8005b0a:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <LCD_Init+0x3c18>)
 8005b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b10:	615a      	str	r2, [r3, #20]
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <LCD_Init+0x3c1c>)
 8005b14:	2217      	movs	r2, #23
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <LCD_Init+0x3c18>)
 8005b1a:	2280      	movs	r2, #128	; 0x80
 8005b1c:	615a      	str	r2, [r3, #20]
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <LCD_Init+0x3c18>)
 8005b20:	2280      	movs	r2, #128	; 0x80
 8005b22:	611a      	str	r2, [r3, #16]
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <LCD_Init+0x3c18>)
 8005b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <LCD_Init+0x3c18>)
 8005b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b32:	611a      	str	r2, [r3, #16]
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <LCD_Init+0x3c18>)
 8005b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3a:	615a      	str	r2, [r3, #20]
 8005b3c:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <LCD_Init+0x3c1c>)
 8005b3e:	2215      	movs	r2, #21
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <LCD_Init+0x3c18>)
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	615a      	str	r2, [r3, #20]
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <LCD_Init+0x3c18>)
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	611a      	str	r2, [r3, #16]
 8005b4e:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <LCD_Init+0x3c18>)
 8005b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b54:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b56:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <LCD_Init+0x3c18>)
 8005b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5c:	611a      	str	r2, [r3, #16]
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <LCD_Init+0x3c18>)
 8005b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b64:	615a      	str	r2, [r3, #20]
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <LCD_Init+0x3c1c>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	4b08      	ldr	r3, [pc, #32]	; (8005b90 <LCD_Init+0x3c18>)
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	615a      	str	r2, [r3, #20]
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <LCD_Init+0x3c18>)
 8005b74:	2280      	movs	r2, #128	; 0x80
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <LCD_Init+0x3c18>)
 8005b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <LCD_Init+0x3c18>)
 8005b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b86:	611a      	str	r2, [r3, #16]
 8005b88:	4b01      	ldr	r3, [pc, #4]	; (8005b90 <LCD_Init+0x3c18>)
 8005b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8e:	e003      	b.n	8005b98 <LCD_Init+0x3c20>
 8005b90:	40011000 	.word	0x40011000
 8005b94:	40010c00 	.word	0x40010c00
 8005b98:	615a      	str	r2, [r3, #20]
 8005b9a:	4b8b      	ldr	r3, [pc, #556]	; (8005dc8 <LCD_Init+0x3e50>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	4b8a      	ldr	r3, [pc, #552]	; (8005dcc <LCD_Init+0x3e54>)
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	615a      	str	r2, [r3, #20]
 8005ba6:	4b89      	ldr	r3, [pc, #548]	; (8005dcc <LCD_Init+0x3e54>)
 8005ba8:	2280      	movs	r2, #128	; 0x80
 8005baa:	611a      	str	r2, [r3, #16]
 8005bac:	4b87      	ldr	r3, [pc, #540]	; (8005dcc <LCD_Init+0x3e54>)
 8005bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005bb4:	20f0      	movs	r0, #240	; 0xf0
 8005bb6:	f7fa fee9 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005bba:	4b84      	ldr	r3, [pc, #528]	; (8005dcc <LCD_Init+0x3e54>)
 8005bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc0:	611a      	str	r2, [r3, #16]
 8005bc2:	4b82      	ldr	r3, [pc, #520]	; (8005dcc <LCD_Init+0x3e54>)
 8005bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc8:	615a      	str	r2, [r3, #20]
 8005bca:	4b7f      	ldr	r3, [pc, #508]	; (8005dc8 <LCD_Init+0x3e50>)
 8005bcc:	2203      	movs	r2, #3
 8005bce:	60da      	str	r2, [r3, #12]
 8005bd0:	4b7e      	ldr	r3, [pc, #504]	; (8005dcc <LCD_Init+0x3e54>)
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	615a      	str	r2, [r3, #20]
 8005bd6:	4b7d      	ldr	r3, [pc, #500]	; (8005dcc <LCD_Init+0x3e54>)
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	611a      	str	r2, [r3, #16]
 8005bdc:	4b7b      	ldr	r3, [pc, #492]	; (8005dcc <LCD_Init+0x3e54>)
 8005bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005be4:	2029      	movs	r0, #41	; 0x29
 8005be6:	f7fa fed1 	bl	800098c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005bea:	20d0      	movs	r0, #208	; 0xd0
 8005bec:	f7fa fece 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005bf0:	4b76      	ldr	r3, [pc, #472]	; (8005dcc <LCD_Init+0x3e54>)
 8005bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf6:	611a      	str	r2, [r3, #16]
 8005bf8:	4b74      	ldr	r3, [pc, #464]	; (8005dcc <LCD_Init+0x3e54>)
 8005bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfe:	615a      	str	r2, [r3, #20]
 8005c00:	4b71      	ldr	r3, [pc, #452]	; (8005dc8 <LCD_Init+0x3e50>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	4b71      	ldr	r3, [pc, #452]	; (8005dcc <LCD_Init+0x3e54>)
 8005c08:	2280      	movs	r2, #128	; 0x80
 8005c0a:	615a      	str	r2, [r3, #20]
 8005c0c:	4b6f      	ldr	r3, [pc, #444]	; (8005dcc <LCD_Init+0x3e54>)
 8005c0e:	2280      	movs	r2, #128	; 0x80
 8005c10:	611a      	str	r2, [r3, #16]
 8005c12:	4b6e      	ldr	r3, [pc, #440]	; (8005dcc <LCD_Init+0x3e54>)
 8005c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c18:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005c1a:	20be      	movs	r0, #190	; 0xbe
 8005c1c:	f7fa feb6 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005c20:	4b6a      	ldr	r3, [pc, #424]	; (8005dcc <LCD_Init+0x3e54>)
 8005c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c26:	611a      	str	r2, [r3, #16]
 8005c28:	4b68      	ldr	r3, [pc, #416]	; (8005dcc <LCD_Init+0x3e54>)
 8005c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c2e:	615a      	str	r2, [r3, #20]
 8005c30:	4b65      	ldr	r3, [pc, #404]	; (8005dc8 <LCD_Init+0x3e50>)
 8005c32:	2205      	movs	r2, #5
 8005c34:	60da      	str	r2, [r3, #12]
 8005c36:	4b65      	ldr	r3, [pc, #404]	; (8005dcc <LCD_Init+0x3e54>)
 8005c38:	2280      	movs	r2, #128	; 0x80
 8005c3a:	615a      	str	r2, [r3, #20]
 8005c3c:	4b63      	ldr	r3, [pc, #396]	; (8005dcc <LCD_Init+0x3e54>)
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	611a      	str	r2, [r3, #16]
 8005c42:	4b62      	ldr	r3, [pc, #392]	; (8005dcc <LCD_Init+0x3e54>)
 8005c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c48:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005c4a:	4b60      	ldr	r3, [pc, #384]	; (8005dcc <LCD_Init+0x3e54>)
 8005c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c50:	611a      	str	r2, [r3, #16]
 8005c52:	4b5e      	ldr	r3, [pc, #376]	; (8005dcc <LCD_Init+0x3e54>)
 8005c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c58:	615a      	str	r2, [r3, #20]
 8005c5a:	4b5b      	ldr	r3, [pc, #364]	; (8005dc8 <LCD_Init+0x3e50>)
 8005c5c:	22fe      	movs	r2, #254	; 0xfe
 8005c5e:	60da      	str	r2, [r3, #12]
 8005c60:	4b5a      	ldr	r3, [pc, #360]	; (8005dcc <LCD_Init+0x3e54>)
 8005c62:	2280      	movs	r2, #128	; 0x80
 8005c64:	615a      	str	r2, [r3, #20]
 8005c66:	4b59      	ldr	r3, [pc, #356]	; (8005dcc <LCD_Init+0x3e54>)
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	611a      	str	r2, [r3, #16]
 8005c6c:	4b57      	ldr	r3, [pc, #348]	; (8005dcc <LCD_Init+0x3e54>)
 8005c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c72:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005c74:	4b55      	ldr	r3, [pc, #340]	; (8005dcc <LCD_Init+0x3e54>)
 8005c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c7a:	611a      	str	r2, [r3, #16]
 8005c7c:	4b53      	ldr	r3, [pc, #332]	; (8005dcc <LCD_Init+0x3e54>)
 8005c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c82:	615a      	str	r2, [r3, #20]
 8005c84:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <LCD_Init+0x3e50>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	4b50      	ldr	r3, [pc, #320]	; (8005dcc <LCD_Init+0x3e54>)
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	615a      	str	r2, [r3, #20]
 8005c90:	4b4e      	ldr	r3, [pc, #312]	; (8005dcc <LCD_Init+0x3e54>)
 8005c92:	2280      	movs	r2, #128	; 0x80
 8005c94:	611a      	str	r2, [r3, #16]
 8005c96:	4b4d      	ldr	r3, [pc, #308]	; (8005dcc <LCD_Init+0x3e54>)
 8005c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005c9e:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <LCD_Init+0x3e54>)
 8005ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca4:	611a      	str	r2, [r3, #16]
 8005ca6:	4b49      	ldr	r3, [pc, #292]	; (8005dcc <LCD_Init+0x3e54>)
 8005ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cac:	615a      	str	r2, [r3, #20]
 8005cae:	4b46      	ldr	r3, [pc, #280]	; (8005dc8 <LCD_Init+0x3e50>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <LCD_Init+0x3e54>)
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	615a      	str	r2, [r3, #20]
 8005cba:	4b44      	ldr	r3, [pc, #272]	; (8005dcc <LCD_Init+0x3e54>)
 8005cbc:	2280      	movs	r2, #128	; 0x80
 8005cbe:	611a      	str	r2, [r3, #16]
 8005cc0:	4b42      	ldr	r3, [pc, #264]	; (8005dcc <LCD_Init+0x3e54>)
 8005cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005cc8:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <LCD_Init+0x3e54>)
 8005cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cce:	611a      	str	r2, [r3, #16]
 8005cd0:	4b3e      	ldr	r3, [pc, #248]	; (8005dcc <LCD_Init+0x3e54>)
 8005cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd6:	615a      	str	r2, [r3, #20]
 8005cd8:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <LCD_Init+0x3e50>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	60da      	str	r2, [r3, #12]
 8005cde:	4b3b      	ldr	r3, [pc, #236]	; (8005dcc <LCD_Init+0x3e54>)
 8005ce0:	2280      	movs	r2, #128	; 0x80
 8005ce2:	615a      	str	r2, [r3, #20]
 8005ce4:	4b39      	ldr	r3, [pc, #228]	; (8005dcc <LCD_Init+0x3e54>)
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	611a      	str	r2, [r3, #16]
 8005cea:	4b38      	ldr	r3, [pc, #224]	; (8005dcc <LCD_Init+0x3e54>)
 8005cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005cf2:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <LCD_Init+0x3e54>)
 8005cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	4b34      	ldr	r3, [pc, #208]	; (8005dcc <LCD_Init+0x3e54>)
 8005cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d00:	615a      	str	r2, [r3, #20]
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <LCD_Init+0x3e50>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	60da      	str	r2, [r3, #12]
 8005d08:	4b30      	ldr	r3, [pc, #192]	; (8005dcc <LCD_Init+0x3e54>)
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	615a      	str	r2, [r3, #20]
 8005d0e:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <LCD_Init+0x3e54>)
 8005d10:	2280      	movs	r2, #128	; 0x80
 8005d12:	611a      	str	r2, [r3, #16]
 8005d14:	4b2d      	ldr	r3, [pc, #180]	; (8005dcc <LCD_Init+0x3e54>)
 8005d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005d1c:	20b8      	movs	r0, #184	; 0xb8
 8005d1e:	f7fa fe35 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005d22:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <LCD_Init+0x3e54>)
 8005d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d28:	611a      	str	r2, [r3, #16]
 8005d2a:	4b28      	ldr	r3, [pc, #160]	; (8005dcc <LCD_Init+0x3e54>)
 8005d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d30:	615a      	str	r2, [r3, #20]
 8005d32:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <LCD_Init+0x3e50>)
 8005d34:	2203      	movs	r2, #3
 8005d36:	60da      	str	r2, [r3, #12]
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <LCD_Init+0x3e54>)
 8005d3a:	2280      	movs	r2, #128	; 0x80
 8005d3c:	615a      	str	r2, [r3, #20]
 8005d3e:	4b23      	ldr	r3, [pc, #140]	; (8005dcc <LCD_Init+0x3e54>)
 8005d40:	2280      	movs	r2, #128	; 0x80
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <LCD_Init+0x3e54>)
 8005d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005d4c:	4b1f      	ldr	r3, [pc, #124]	; (8005dcc <LCD_Init+0x3e54>)
 8005d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d52:	611a      	str	r2, [r3, #16]
 8005d54:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <LCD_Init+0x3e54>)
 8005d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5a:	615a      	str	r2, [r3, #20]
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <LCD_Init+0x3e50>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	60da      	str	r2, [r3, #12]
 8005d62:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <LCD_Init+0x3e54>)
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	615a      	str	r2, [r3, #20]
 8005d68:	4b18      	ldr	r3, [pc, #96]	; (8005dcc <LCD_Init+0x3e54>)
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	611a      	str	r2, [r3, #16]
 8005d6e:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <LCD_Init+0x3e54>)
 8005d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d74:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005d76:	20ba      	movs	r0, #186	; 0xba
 8005d78:	f7fa fe08 	bl	800098c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005d7c:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <LCD_Init+0x3e54>)
 8005d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d82:	611a      	str	r2, [r3, #16]
 8005d84:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <LCD_Init+0x3e54>)
 8005d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8a:	615a      	str	r2, [r3, #20]
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <LCD_Init+0x3e50>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <LCD_Init+0x3e54>)
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	615a      	str	r2, [r3, #20]
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <LCD_Init+0x3e54>)
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <LCD_Init+0x3e54>)
 8005da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005da6:	2064      	movs	r0, #100	; 0x64
 8005da8:	f7fb ff36 	bl	8001c18 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005dac:	2000      	movs	r0, #0
 8005dae:	f7fb ffd7 	bl	8001d60 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <LCD_Init+0x3e58>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005db8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005dbc:	f000 f80a 	bl	8005dd4 <LCD_Clear>
}
 8005dc0:	bf00      	nop
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40010c00 	.word	0x40010c00
 8005dcc:	40011000 	.word	0x40011000
 8005dd0:	422201a8 	.word	0x422201a8

08005dd4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005de2:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <LCD_Clear+0xb8>)
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005de8:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <LCD_Clear+0xb8>)
 8005dea:	885b      	ldrh	r3, [r3, #2]
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	fb02 f303 	mul.w	r3, r2, r3
 8005df4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005df6:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <LCD_Clear+0xb8>)
 8005df8:	889b      	ldrh	r3, [r3, #4]
 8005dfa:	f646 0204 	movw	r2, #26628	; 0x6804
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d11a      	bne.n	8005e38 <LCD_Clear+0x64>
 8005e02:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <LCD_Clear+0xb8>)
 8005e04:	799b      	ldrb	r3, [r3, #6]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d116      	bne.n	8005e38 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005e0a:	4b20      	ldr	r3, [pc, #128]	; (8005e8c <LCD_Clear+0xb8>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005e10:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <LCD_Clear+0xb8>)
 8005e12:	222a      	movs	r2, #42	; 0x2a
 8005e14:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005e16:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <LCD_Clear+0xb8>)
 8005e18:	222b      	movs	r2, #43	; 0x2b
 8005e1a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f7fa fe86 	bl	8000b30 <LCD_SetCursor>
		lcddev.dir = 1;
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <LCD_Clear+0xb8>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <LCD_Clear+0xb8>)
 8005e2c:	222b      	movs	r2, #43	; 0x2b
 8005e2e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <LCD_Clear+0xb8>)
 8005e32:	222a      	movs	r2, #42	; 0x2a
 8005e34:	819a      	strh	r2, [r3, #12]
 8005e36:	e003      	b.n	8005e40 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005e38:	2100      	movs	r1, #0
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	f7fa fe78 	bl	8000b30 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005e40:	f7fa fe6a 	bl	8000b18 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e017      	b.n	8005e7a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <LCD_Clear+0xbc>)
 8005e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <LCD_Clear+0xbc>)
 8005e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e58:	615a      	str	r2, [r3, #20]
 8005e5a:	4a0e      	ldr	r2, [pc, #56]	; (8005e94 <LCD_Clear+0xc0>)
 8005e5c:	88fb      	ldrh	r3, [r7, #6]
 8005e5e:	60d3      	str	r3, [r2, #12]
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <LCD_Clear+0xbc>)
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	615a      	str	r2, [r3, #20]
 8005e66:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <LCD_Clear+0xbc>)
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	611a      	str	r2, [r3, #16]
 8005e6c:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <LCD_Clear+0xbc>)
 8005e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e72:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3e3      	bcc.n	8005e4a <LCD_Clear+0x76>
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20000030 	.word	0x20000030
 8005e90:	40011000 	.word	0x40011000
 8005e94:	40010c00 	.word	0x40010c00

08005e98 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	80fb      	strh	r3, [r7, #6]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	80bb      	strh	r3, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	70fb      	strb	r3, [r7, #3]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005eb6:	88bb      	ldrh	r3, [r7, #4]
 8005eb8:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005eba:	78bb      	ldrb	r3, [r7, #2]
 8005ebc:	08db      	lsrs	r3, r3, #3
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	78bb      	ldrb	r3, [r7, #2]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	78ba      	ldrb	r2, [r7, #2]
 8005eda:	0852      	lsrs	r2, r2, #1
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	3b20      	subs	r3, #32
 8005ee8:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005eea:	2300      	movs	r3, #0
 8005eec:	737b      	strb	r3, [r7, #13]
 8005eee:	e069      	b.n	8005fc4 <LCD_ShowChar+0x12c>
		if (size == 12)
 8005ef0:	78bb      	ldrb	r3, [r7, #2]
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	d10b      	bne.n	8005f0e <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	7b79      	ldrb	r1, [r7, #13]
 8005efa:	4838      	ldr	r0, [pc, #224]	; (8005fdc <LCD_ShowChar+0x144>)
 8005efc:	4613      	mov	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4403      	add	r3, r0
 8005f06:	440b      	add	r3, r1
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	73fb      	strb	r3, [r7, #15]
 8005f0c:	e019      	b.n	8005f42 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005f0e:	78bb      	ldrb	r3, [r7, #2]
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d108      	bne.n	8005f26 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	7b7b      	ldrb	r3, [r7, #13]
 8005f18:	4931      	ldr	r1, [pc, #196]	; (8005fe0 <LCD_ShowChar+0x148>)
 8005f1a:	0112      	lsls	r2, r2, #4
 8005f1c:	440a      	add	r2, r1
 8005f1e:	4413      	add	r3, r2
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	e00d      	b.n	8005f42 <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005f26:	78bb      	ldrb	r3, [r7, #2]
 8005f28:	2b18      	cmp	r3, #24
 8005f2a:	d150      	bne.n	8005fce <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	7b79      	ldrb	r1, [r7, #13]
 8005f30:	482c      	ldr	r0, [pc, #176]	; (8005fe4 <LCD_ShowChar+0x14c>)
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4403      	add	r3, r0
 8005f3c:	440b      	add	r3, r1
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005f42:	2300      	movs	r3, #0
 8005f44:	73bb      	strb	r3, [r7, #14]
 8005f46:	e035      	b.n	8005fb4 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	da07      	bge.n	8005f60 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005f50:	4b25      	ldr	r3, [pc, #148]	; (8005fe8 <LCD_ShowChar+0x150>)
 8005f52:	881a      	ldrh	r2, [r3, #0]
 8005f54:	88b9      	ldrh	r1, [r7, #4]
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fb fbc7 	bl	80016ec <LCD_Fast_DrawPoint>
 8005f5e:	e00a      	b.n	8005f76 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005f60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005f68:	4b20      	ldr	r3, [pc, #128]	; (8005fec <LCD_ShowChar+0x154>)
 8005f6a:	881a      	ldrh	r2, [r3, #0]
 8005f6c:	88b9      	ldrh	r1, [r7, #4]
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fb fbbb 	bl	80016ec <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
			y++;
 8005f7c:	88bb      	ldrh	r3, [r7, #4]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005f82:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <LCD_ShowChar+0x158>)
 8005f84:	885b      	ldrh	r3, [r3, #2]
 8005f86:	88ba      	ldrh	r2, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d222      	bcs.n	8005fd2 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005f8c:	88ba      	ldrh	r2, [r7, #4]
 8005f8e:	897b      	ldrh	r3, [r7, #10]
 8005f90:	1ad2      	subs	r2, r2, r3
 8005f92:	78bb      	ldrb	r3, [r7, #2]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d10a      	bne.n	8005fae <LCD_ShowChar+0x116>
				y = y0;
 8005f98:	897b      	ldrh	r3, [r7, #10]
 8005f9a:	80bb      	strh	r3, [r7, #4]
				x++;
 8005f9c:	88fb      	ldrh	r3, [r7, #6]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <LCD_ShowChar+0x158>)
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d307      	bcc.n	8005fbc <LCD_ShowChar+0x124>
					return;	//超区域了
 8005fac:	e012      	b.n	8005fd4 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	73bb      	strb	r3, [r7, #14]
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	2b07      	cmp	r3, #7
 8005fb8:	d9c6      	bls.n	8005f48 <LCD_ShowChar+0xb0>
 8005fba:	e000      	b.n	8005fbe <LCD_ShowChar+0x126>
				break;
 8005fbc:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	737b      	strb	r3, [r7, #13]
 8005fc4:	7b7a      	ldrb	r2, [r7, #13]
 8005fc6:	7a7b      	ldrb	r3, [r7, #9]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d391      	bcc.n	8005ef0 <LCD_ShowChar+0x58>
 8005fcc:	e002      	b.n	8005fd4 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005fd2:	bf00      	nop
			}
		}
	}
}
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd90      	pop	{r4, r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	08008584 	.word	0x08008584
 8005fe0:	080089f8 	.word	0x080089f8
 8005fe4:	08008fe8 	.word	0x08008fe8
 8005fe8:	2000002c 	.word	0x2000002c
 8005fec:	20000000 	.word	0x20000000
 8005ff0:	20000030 	.word	0x20000030

08005ff4 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	461a      	mov	r2, r3
 8006002:	4623      	mov	r3, r4
 8006004:	80fb      	strh	r3, [r7, #6]
 8006006:	4603      	mov	r3, r0
 8006008:	80bb      	strh	r3, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	807b      	strh	r3, [r7, #2]
 800600e:	4613      	mov	r3, r2
 8006010:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	73fb      	strb	r3, [r7, #15]
	width += x;
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	4413      	add	r3, r2
 800601c:	807b      	strh	r3, [r7, #2]
	height += y;
 800601e:	883a      	ldrh	r2, [r7, #0]
 8006020:	88bb      	ldrh	r3, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006026:	e024      	b.n	8006072 <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	887b      	ldrh	r3, [r7, #2]
 800602c:	429a      	cmp	r2, r3
 800602e:	d307      	bcc.n	8006040 <LCD_ShowString+0x4c>
			x = x0;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006038:	b29a      	uxth	r2, r3
 800603a:	88bb      	ldrh	r3, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006040:	88ba      	ldrh	r2, [r7, #4]
 8006042:	883b      	ldrh	r3, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d21d      	bcs.n	8006084 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006050:	88b9      	ldrh	r1, [r7, #4]
 8006052:	88f8      	ldrh	r0, [r7, #6]
 8006054:	2400      	movs	r4, #0
 8006056:	9400      	str	r4, [sp, #0]
 8006058:	f7ff ff1e 	bl	8005e98 <LCD_ShowChar>
		x += size / 2;
 800605c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	b29a      	uxth	r2, r3
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	4413      	add	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
		p++;
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	3301      	adds	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b7e      	cmp	r3, #126	; 0x7e
 8006078:	d805      	bhi.n	8006086 <LCD_ShowString+0x92>
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b1f      	cmp	r3, #31
 8006080:	d8d2      	bhi.n	8006028 <LCD_ShowString+0x34>
	}
}
 8006082:	e000      	b.n	8006086 <LCD_ShowString+0x92>
			break;	//退出
 8006084:	bf00      	nop
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}
	...

08006090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006096:	f000 fad9 	bl	800664c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800609a:	f000 f8a1 	bl	80061e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 800609e:	f7fb ff6b 	bl	8001f78 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80060a2:	f7fa fbcf 	bl	8000844 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80060a6:	f000 fa2d 	bl	8006504 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 80060aa:	2201      	movs	r2, #1
 80060ac:	4948      	ldr	r1, [pc, #288]	; (80061d0 <main+0x140>)
 80060ae:	4849      	ldr	r0, [pc, #292]	; (80061d4 <main+0x144>)
 80060b0:	f001 fc61 	bl	8007976 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (x) {
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	2b0b      	cmp	r3, #11
 80060b8:	f200 8084 	bhi.w	80061c4 <main+0x134>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <main+0x34>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	080060f5 	.word	0x080060f5
 80060c8:	08006107 	.word	0x08006107
 80060cc:	08006115 	.word	0x08006115
 80060d0:	08006123 	.word	0x08006123
 80060d4:	08006135 	.word	0x08006135
 80060d8:	08006147 	.word	0x08006147
 80060dc:	08006159 	.word	0x08006159
 80060e0:	0800616b 	.word	0x0800616b
 80060e4:	0800617d 	.word	0x0800617d
 80060e8:	0800618f 	.word	0x0800618f
 80060ec:	080061a1 	.word	0x080061a1
 80060f0:	080061b3 	.word	0x080061b3
		  case 0: LCD_Clear(WHITE); BACK_COLOR = WHITE; break;
 80060f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80060f8:	f7ff fe6c 	bl	8005dd4 <LCD_Clear>
 80060fc:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <main+0x148>)
 80060fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	e05e      	b.n	80061c4 <main+0x134>
		  case 1: LCD_Clear(BLACK); BACK_COLOR = BLACK; break;
 8006106:	2000      	movs	r0, #0
 8006108:	f7ff fe64 	bl	8005dd4 <LCD_Clear>
 800610c:	4b32      	ldr	r3, [pc, #200]	; (80061d8 <main+0x148>)
 800610e:	2200      	movs	r2, #0
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	e057      	b.n	80061c4 <main+0x134>
		  case 2: LCD_Clear(BLUE); BACK_COLOR = BLUE; break;
 8006114:	201f      	movs	r0, #31
 8006116:	f7ff fe5d 	bl	8005dd4 <LCD_Clear>
 800611a:	4b2f      	ldr	r3, [pc, #188]	; (80061d8 <main+0x148>)
 800611c:	221f      	movs	r2, #31
 800611e:	801a      	strh	r2, [r3, #0]
 8006120:	e050      	b.n	80061c4 <main+0x134>
		  case 3: LCD_Clear(RED); BACK_COLOR = RED; break;
 8006122:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006126:	f7ff fe55 	bl	8005dd4 <LCD_Clear>
 800612a:	4b2b      	ldr	r3, [pc, #172]	; (80061d8 <main+0x148>)
 800612c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	e047      	b.n	80061c4 <main+0x134>
		  case 4: LCD_Clear(MAGENTA); BACK_COLOR = MAGENTA; break;
 8006134:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8006138:	f7ff fe4c 	bl	8005dd4 <LCD_Clear>
 800613c:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <main+0x148>)
 800613e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	e03e      	b.n	80061c4 <main+0x134>
		  case 5: LCD_Clear(GREEN); BACK_COLOR = GREEN; break;
 8006146:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800614a:	f7ff fe43 	bl	8005dd4 <LCD_Clear>
 800614e:	4b22      	ldr	r3, [pc, #136]	; (80061d8 <main+0x148>)
 8006150:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e035      	b.n	80061c4 <main+0x134>
		  case 6: LCD_Clear(CYAN); BACK_COLOR = CYAN; break;
 8006158:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800615c:	f7ff fe3a 	bl	8005dd4 <LCD_Clear>
 8006160:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <main+0x148>)
 8006162:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e02c      	b.n	80061c4 <main+0x134>
		  case 7: LCD_Clear(YELLOW); BACK_COLOR = YELLOW; break;
 800616a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800616e:	f7ff fe31 	bl	8005dd4 <LCD_Clear>
 8006172:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <main+0x148>)
 8006174:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	e023      	b.n	80061c4 <main+0x134>
		  case 8: LCD_Clear(BRRED); BACK_COLOR = BRRED; break;
 800617c:	f64f 4007 	movw	r0, #64519	; 0xfc07
 8006180:	f7ff fe28 	bl	8005dd4 <LCD_Clear>
 8006184:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <main+0x148>)
 8006186:	f64f 4207 	movw	r2, #64519	; 0xfc07
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e01a      	b.n	80061c4 <main+0x134>
		  case 9: LCD_Clear(GRAY); BACK_COLOR = GRAY; break;
 800618e:	f248 4030 	movw	r0, #33840	; 0x8430
 8006192:	f7ff fe1f 	bl	8005dd4 <LCD_Clear>
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <main+0x148>)
 8006198:	f248 4230 	movw	r2, #33840	; 0x8430
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e011      	b.n	80061c4 <main+0x134>
		  case 10: LCD_Clear(LGRAY); BACK_COLOR = LGRAY; break;
 80061a0:	f24c 6018 	movw	r0, #50712	; 0xc618
 80061a4:	f7ff fe16 	bl	8005dd4 <LCD_Clear>
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <main+0x148>)
 80061aa:	f24c 6218 	movw	r2, #50712	; 0xc618
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	e008      	b.n	80061c4 <main+0x134>
		  case 11: LCD_Clear(BROWN); BACK_COLOR = BROWN; break;
 80061b2:	f64b 4040 	movw	r0, #48192	; 0xbc40
 80061b6:	f7ff fe0d 	bl	8005dd4 <LCD_Clear>
 80061ba:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <main+0x148>)
 80061bc:	f64b 4240 	movw	r2, #48192	; 0xbc40
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	bf00      	nop
		}//end of switch

		POINT_COLOR = RED;
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <main+0x14c>)
 80061c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80061ca:	801a      	strh	r2, [r3, #0]
		switch (x) {
 80061cc:	e772      	b.n	80060b4 <main+0x24>
 80061ce:	bf00      	nop
 80061d0:	20000040 	.word	0x20000040
 80061d4:	200004c0 	.word	0x200004c0
 80061d8:	20000000 	.word	0x20000000
 80061dc:	2000002c 	.word	0x2000002c

080061e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b090      	sub	sp, #64	; 0x40
 80061e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061e6:	f107 0318 	add.w	r3, r7, #24
 80061ea:	2228      	movs	r2, #40	; 0x28
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 f966 	bl	80084c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061f4:	1d3b      	adds	r3, r7, #4
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	609a      	str	r2, [r3, #8]
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006202:	2301      	movs	r3, #1
 8006204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800620a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800620c:	2300      	movs	r3, #0
 800620e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006210:	2301      	movs	r3, #1
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006214:	2302      	movs	r3, #2
 8006216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800621e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006224:	f107 0318 	add.w	r3, r7, #24
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fec1 	bl	8006fb0 <HAL_RCC_OscConfig>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006234:	f000 f819 	bl	800626a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006238:	230f      	movs	r3, #15
 800623a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800623c:	2302      	movs	r3, #2
 800623e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	2102      	movs	r1, #2
 8006252:	4618      	mov	r0, r3
 8006254:	f001 f92e 	bl	80074b4 <HAL_RCC_ClockConfig>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800625e:	f000 f804 	bl	800626a <Error_Handler>
  }
}
 8006262:	bf00      	nop
 8006264:	3740      	adds	r7, #64	; 0x40
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800626a:	b480      	push	{r7}
 800626c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800626e:	b672      	cpsid	i
}
 8006270:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006272:	e7fe      	b.n	8006272 <Error_Handler+0x8>

08006274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800627a:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <HAL_MspInit+0x60>)
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <HAL_MspInit+0x60>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	6193      	str	r3, [r2, #24]
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <HAL_MspInit+0x60>)
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	60bb      	str	r3, [r7, #8]
 8006290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <HAL_MspInit+0x60>)
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	4a0f      	ldr	r2, [pc, #60]	; (80062d4 <HAL_MspInit+0x60>)
 8006298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629c:	61d3      	str	r3, [r2, #28]
 800629e:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <HAL_MspInit+0x60>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80062aa:	2005      	movs	r0, #5
 80062ac:	f000 fb20 	bl	80068f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80062b0:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <HAL_MspInit+0x64>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <HAL_MspInit+0x64>)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40010000 	.word	0x40010000

080062dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062e0:	e7fe      	b.n	80062e0 <NMI_Handler+0x4>

080062e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062e6:	e7fe      	b.n	80062e6 <HardFault_Handler+0x4>

080062e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062ec:	e7fe      	b.n	80062ec <MemManage_Handler+0x4>

080062ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062ee:	b480      	push	{r7}
 80062f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062f2:	e7fe      	b.n	80062f2 <BusFault_Handler+0x4>

080062f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062f8:	e7fe      	b.n	80062f8 <UsageFault_Handler+0x4>

080062fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062fa:	b480      	push	{r7}
 80062fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062fe:	bf00      	nop
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800630a:	bf00      	nop
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr

08006312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006312:	b480      	push	{r7}
 8006314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006322:	f000 f9d9 	bl	80066d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}

0800632a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 800632e:	2001      	movs	r0, #1
 8006330:	f000 fe26 	bl	8006f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006334:	bf00      	nop
 8006336:	bd80      	pop	{r7, pc}

08006338 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 800633c:	2020      	movs	r0, #32
 800633e:	f000 fe1f 	bl	8006f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800634c:	4804      	ldr	r0, [pc, #16]	; (8006360 <USART1_IRQHandler+0x18>)
 800634e:	f001 fb37 	bl	80079c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
 8006352:	2201      	movs	r2, #1
 8006354:	4903      	ldr	r1, [pc, #12]	; (8006364 <USART1_IRQHandler+0x1c>)
 8006356:	4802      	ldr	r0, [pc, #8]	; (8006360 <USART1_IRQHandler+0x18>)
 8006358:	f001 fb0d 	bl	8007976 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 800635c:	bf00      	nop
 800635e:	bd80      	pop	{r7, pc}
 8006360:	200004c0 	.word	0x200004c0
 8006364:	20000040 	.word	0x20000040

08006368 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 800636c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006370:	f000 fe06 	bl	8006f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006374:	bf00      	nop
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af02      	add	r7, sp, #8
 800637e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <HAL_UART_RxCpltCallback+0x6c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d127      	bne.n	80063da <HAL_UART_RxCpltCallback+0x62>
			static unsigned char uRx_Data[1024] = {0};
			static unsigned char uLength = 0;
			if(rxBuffer[0] == '\n'){
 800638a:	4b17      	ldr	r3, [pc, #92]	; (80063e8 <HAL_UART_RxCpltCallback+0x70>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b0a      	cmp	r3, #10
 8006390:	d116      	bne.n	80063c0 <HAL_UART_RxCpltCallback+0x48>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 8006392:	4b16      	ldr	r3, [pc, #88]	; (80063ec <HAL_UART_RxCpltCallback+0x74>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	b29a      	uxth	r2, r3
 8006398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800639c:	4914      	ldr	r1, [pc, #80]	; (80063f0 <HAL_UART_RxCpltCallback+0x78>)
 800639e:	4815      	ldr	r0, [pc, #84]	; (80063f4 <HAL_UART_RxCpltCallback+0x7c>)
 80063a0:	f001 fa66 	bl	8007870 <HAL_UART_Transmit>
			LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) uRx_Data);
 80063a4:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <HAL_UART_RxCpltCallback+0x78>)
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	2318      	movs	r3, #24
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2318      	movs	r3, #24
 80063ae:	22c8      	movs	r2, #200	; 0xc8
 80063b0:	2128      	movs	r1, #40	; 0x28
 80063b2:	201e      	movs	r0, #30
 80063b4:	f7ff fe1e 	bl	8005ff4 <LCD_ShowString>
			uLength = 0;
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <HAL_UART_RxCpltCallback+0x74>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
		}else{
			uRx_Data[uLength] = rxBuffer[0];
			uLength++;
		}
	}
}
 80063be:	e00c      	b.n	80063da <HAL_UART_RxCpltCallback+0x62>
			uRx_Data[uLength] = rxBuffer[0];
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <HAL_UART_RxCpltCallback+0x74>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <HAL_UART_RxCpltCallback+0x70>)
 80063c8:	7819      	ldrb	r1, [r3, #0]
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_UART_RxCpltCallback+0x78>)
 80063cc:	5499      	strb	r1, [r3, r2]
			uLength++;
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <HAL_UART_RxCpltCallback+0x74>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <HAL_UART_RxCpltCallback+0x74>)
 80063d8:	701a      	strb	r2, [r3, #0]
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40013800 	.word	0x40013800
 80063e8:	20000040 	.word	0x20000040
 80063ec:	200000bc 	.word	0x200000bc
 80063f0:	200000c0 	.word	0x200000c0
 80063f4:	200004c0 	.word	0x200004c0

080063f8 <HAL_GPIO_EXTI_Callback>:
int text_cnt = 0;
char str[100];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	4603      	mov	r3, r0
 8006400:	80fb      	strh	r3, [r7, #6]
	//点亮LED
//	LCD_ShowString(30, 100, 200, 8, 16, (uint8_t*) str);
	HAL_Delay(100);//延时�??要调�??
 8006402:	2064      	movs	r0, #100	; 0x64
 8006404:	f000 f984 	bl	8006710 <HAL_Delay>
	switch(GPIO_Pin){
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	2b20      	cmp	r3, #32
 800640c:	d003      	beq.n	8006416 <HAL_GPIO_EXTI_Callback+0x1e>
 800640e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006412:	d029      	beq.n	8006468 <HAL_GPIO_EXTI_Callback+0x70>
//				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
//				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//			}
//			break;
		default:
			break;
 8006414:	e055      	b.n	80064c2 <HAL_GPIO_EXTI_Callback+0xca>
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET){
 8006416:	2120      	movs	r1, #32
 8006418:	482c      	ldr	r0, [pc, #176]	; (80064cc <HAL_GPIO_EXTI_Callback+0xd4>)
 800641a:	f000 fd81 	bl	8006f20 <HAL_GPIO_ReadPin>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d14b      	bne.n	80064bc <HAL_GPIO_EXTI_Callback+0xc4>
				strcat(str,"0");
 8006424:	482a      	ldr	r0, [pc, #168]	; (80064d0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8006426:	f7f9 feff 	bl	8000228 <strlen>
 800642a:	4603      	mov	r3, r0
 800642c:	461a      	mov	r2, r3
 800642e:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8006430:	4413      	add	r3, r2
 8006432:	4928      	ldr	r1, [pc, #160]	; (80064d4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8006434:	461a      	mov	r2, r3
 8006436:	460b      	mov	r3, r1
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	8013      	strh	r3, [r2, #0]
				LCD_ShowString(30+text_cnt, 70, 200, 16, 16, (uint8_t*) "KEY0 is pressed\0");
 800643c:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	331e      	adds	r3, #30
 8006444:	b298      	uxth	r0, r3
 8006446:	4b25      	ldr	r3, [pc, #148]	; (80064dc <HAL_GPIO_EXTI_Callback+0xe4>)
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	2310      	movs	r3, #16
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2310      	movs	r3, #16
 8006450:	22c8      	movs	r2, #200	; 0xc8
 8006452:	2146      	movs	r1, #70	; 0x46
 8006454:	f7ff fdce 	bl	8005ff4 <LCD_ShowString>
				HAL_UART_Transmit(&huart1, (uint8_t*) "KEY0 is pressed\n\0", 16, 0xffff);
 8006458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800645c:	2210      	movs	r2, #16
 800645e:	4920      	ldr	r1, [pc, #128]	; (80064e0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8006460:	4820      	ldr	r0, [pc, #128]	; (80064e4 <HAL_GPIO_EXTI_Callback+0xec>)
 8006462:	f001 fa05 	bl	8007870 <HAL_UART_Transmit>
			break;
 8006466:	e029      	b.n	80064bc <HAL_GPIO_EXTI_Callback+0xc4>
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 8006468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800646c:	481e      	ldr	r0, [pc, #120]	; (80064e8 <HAL_GPIO_EXTI_Callback+0xf0>)
 800646e:	f000 fd57 	bl	8006f20 <HAL_GPIO_ReadPin>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d123      	bne.n	80064c0 <HAL_GPIO_EXTI_Callback+0xc8>
				LCD_ShowString(30+text_cnt, 70, 200, 16, 16, (uint8_t*) "KEY1 is pressed");
 8006478:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	331e      	adds	r3, #30
 8006480:	b298      	uxth	r0, r3
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <HAL_GPIO_EXTI_Callback+0xf4>)
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	2310      	movs	r3, #16
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2310      	movs	r3, #16
 800648c:	22c8      	movs	r2, #200	; 0xc8
 800648e:	2146      	movs	r1, #70	; 0x46
 8006490:	f7ff fdb0 	bl	8005ff4 <LCD_ShowString>
				HAL_UART_Transmit(&huart1, (uint8_t*) "KEY1 is pressed\n\0", 16, 0xffff);
 8006494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006498:	2210      	movs	r2, #16
 800649a:	4915      	ldr	r1, [pc, #84]	; (80064f0 <HAL_GPIO_EXTI_Callback+0xf8>)
 800649c:	4811      	ldr	r0, [pc, #68]	; (80064e4 <HAL_GPIO_EXTI_Callback+0xec>)
 800649e:	f001 f9e7 	bl	8007870 <HAL_UART_Transmit>
				strcat(str,"1");
 80064a2:	480b      	ldr	r0, [pc, #44]	; (80064d0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80064a4:	f7f9 fec0 	bl	8000228 <strlen>
 80064a8:	4603      	mov	r3, r0
 80064aa:	461a      	mov	r2, r3
 80064ac:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80064ae:	4413      	add	r3, r2
 80064b0:	4910      	ldr	r1, [pc, #64]	; (80064f4 <HAL_GPIO_EXTI_Callback+0xfc>)
 80064b2:	461a      	mov	r2, r3
 80064b4:	460b      	mov	r3, r1
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	8013      	strh	r3, [r2, #0]
			break;
 80064ba:	e001      	b.n	80064c0 <HAL_GPIO_EXTI_Callback+0xc8>
			break;
 80064bc:	bf00      	nop
 80064be:	e000      	b.n	80064c2 <HAL_GPIO_EXTI_Callback+0xca>
			break;
 80064c0:	bf00      	nop
	}

}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40011000 	.word	0x40011000
 80064d0:	20000058 	.word	0x20000058
 80064d4:	08008530 	.word	0x08008530
 80064d8:	20000054 	.word	0x20000054
 80064dc:	08008534 	.word	0x08008534
 80064e0:	08008548 	.word	0x08008548
 80064e4:	200004c0 	.word	0x200004c0
 80064e8:	40010800 	.word	0x40010800
 80064ec:	0800855c 	.word	0x0800855c
 80064f0:	0800856c 	.word	0x0800856c
 80064f4:	08008580 	.word	0x08008580

080064f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80064fc:	bf00      	nop
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006508:	4b11      	ldr	r3, [pc, #68]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 800650a:	4a12      	ldr	r2, [pc, #72]	; (8006554 <MX_USART1_UART_Init+0x50>)
 800650c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800650e:	4b10      	ldr	r3, [pc, #64]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 8006510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006516:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 8006518:	2200      	movs	r2, #0
 800651a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 800651e:	2200      	movs	r2, #0
 8006520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 8006524:	2200      	movs	r2, #0
 8006526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 800652a:	220c      	movs	r2, #12
 800652c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 8006530:	2200      	movs	r2, #0
 8006532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 8006536:	2200      	movs	r2, #0
 8006538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800653a:	4805      	ldr	r0, [pc, #20]	; (8006550 <MX_USART1_UART_Init+0x4c>)
 800653c:	f001 f948 	bl	80077d0 <HAL_UART_Init>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006546:	f7ff fe90 	bl	800626a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800654a:	bf00      	nop
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	200004c0 	.word	0x200004c0
 8006554:	40013800 	.word	0x40013800

08006558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006560:	f107 0310 	add.w	r3, r7, #16
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	605a      	str	r2, [r3, #4]
 800656a:	609a      	str	r2, [r3, #8]
 800656c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <HAL_UART_MspInit+0x9c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d139      	bne.n	80065ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006578:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <HAL_UART_MspInit+0xa0>)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <HAL_UART_MspInit+0xa0>)
 800657e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006582:	6193      	str	r3, [r2, #24]
 8006584:	4b1c      	ldr	r3, [pc, #112]	; (80065f8 <HAL_UART_MspInit+0xa0>)
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006590:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <HAL_UART_MspInit+0xa0>)
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <HAL_UART_MspInit+0xa0>)
 8006596:	f043 0304 	orr.w	r3, r3, #4
 800659a:	6193      	str	r3, [r2, #24]
 800659c:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <HAL_UART_MspInit+0xa0>)
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80065a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ae:	2302      	movs	r3, #2
 80065b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065b2:	2303      	movs	r3, #3
 80065b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065b6:	f107 0310 	add.w	r3, r7, #16
 80065ba:	4619      	mov	r1, r3
 80065bc:	480f      	ldr	r0, [pc, #60]	; (80065fc <HAL_UART_MspInit+0xa4>)
 80065be:	f000 fb1b 	bl	8006bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80065c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065d0:	f107 0310 	add.w	r3, r7, #16
 80065d4:	4619      	mov	r1, r3
 80065d6:	4809      	ldr	r0, [pc, #36]	; (80065fc <HAL_UART_MspInit+0xa4>)
 80065d8:	f000 fb0e 	bl	8006bf8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80065dc:	2200      	movs	r2, #0
 80065de:	2101      	movs	r1, #1
 80065e0:	2025      	movs	r0, #37	; 0x25
 80065e2:	f000 f990 	bl	8006906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80065e6:	2025      	movs	r0, #37	; 0x25
 80065e8:	f000 f9a9 	bl	800693e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80065ec:	bf00      	nop
 80065ee:	3720      	adds	r7, #32
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40013800 	.word	0x40013800
 80065f8:	40021000 	.word	0x40021000
 80065fc:	40010800 	.word	0x40010800

08006600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006600:	f7ff ff7a 	bl	80064f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006604:	480b      	ldr	r0, [pc, #44]	; (8006634 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006606:	490c      	ldr	r1, [pc, #48]	; (8006638 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006608:	4a0c      	ldr	r2, [pc, #48]	; (800663c <LoopFillZerobss+0x16>)
  movs r3, #0
 800660a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800660c:	e002      	b.n	8006614 <LoopCopyDataInit>

0800660e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800660e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006612:	3304      	adds	r3, #4

08006614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006618:	d3f9      	bcc.n	800660e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800661a:	4a09      	ldr	r2, [pc, #36]	; (8006640 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800661c:	4c09      	ldr	r4, [pc, #36]	; (8006644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800661e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006620:	e001      	b.n	8006626 <LoopFillZerobss>

08006622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006624:	3204      	adds	r2, #4

08006626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006628:	d3fb      	bcc.n	8006622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800662a:	f001 ff51 	bl	80084d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800662e:	f7ff fd2f 	bl	8006090 <main>
  bx lr
 8006632:	4770      	bx	lr
  ldr r0, =_sdata
 8006634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006638:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800663c:	08009d78 	.word	0x08009d78
  ldr r2, =_sbss
 8006640:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8006644:	2000050c 	.word	0x2000050c

08006648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006648:	e7fe      	b.n	8006648 <ADC1_2_IRQHandler>
	...

0800664c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006650:	4b08      	ldr	r3, [pc, #32]	; (8006674 <HAL_Init+0x28>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a07      	ldr	r2, [pc, #28]	; (8006674 <HAL_Init+0x28>)
 8006656:	f043 0310 	orr.w	r3, r3, #16
 800665a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800665c:	2003      	movs	r0, #3
 800665e:	f000 f947 	bl	80068f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006662:	2000      	movs	r0, #0
 8006664:	f000 f808 	bl	8006678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006668:	f7ff fe04 	bl	8006274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40022000 	.word	0x40022000

08006678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_InitTick+0x54>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <HAL_InitTick+0x58>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	4619      	mov	r1, r3
 800668a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800668e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006692:	fbb2 f3f3 	udiv	r3, r2, r3
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f95f 	bl	800695a <HAL_SYSTICK_Config>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e00e      	b.n	80066c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d80a      	bhi.n	80066c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066ac:	2200      	movs	r2, #0
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066b4:	f000 f927 	bl	8006906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066b8:	4a06      	ldr	r2, [pc, #24]	; (80066d4 <HAL_InitTick+0x5c>)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e000      	b.n	80066c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000004 	.word	0x20000004
 80066d0:	2000000c 	.word	0x2000000c
 80066d4:	20000008 	.word	0x20000008

080066d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <HAL_IncTick+0x1c>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <HAL_IncTick+0x20>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4413      	add	r3, r2
 80066e8:	4a03      	ldr	r2, [pc, #12]	; (80066f8 <HAL_IncTick+0x20>)
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr
 80066f4:	2000000c 	.word	0x2000000c
 80066f8:	20000508 	.word	0x20000508

080066fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  return uwTick;
 8006700:	4b02      	ldr	r3, [pc, #8]	; (800670c <HAL_GetTick+0x10>)
 8006702:	681b      	ldr	r3, [r3, #0]
}
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr
 800670c:	20000508 	.word	0x20000508

08006710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006718:	f7ff fff0 	bl	80066fc <HAL_GetTick>
 800671c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006728:	d005      	beq.n	8006736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <HAL_Delay+0x44>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006736:	bf00      	nop
 8006738:	f7ff ffe0 	bl	80066fc <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	429a      	cmp	r2, r3
 8006746:	d8f7      	bhi.n	8006738 <HAL_Delay+0x28>
  {
  }
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	2000000c 	.word	0x2000000c

08006758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <__NVIC_SetPriorityGrouping+0x44>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006774:	4013      	ands	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800678a:	4a04      	ldr	r2, [pc, #16]	; (800679c <__NVIC_SetPriorityGrouping+0x44>)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	60d3      	str	r3, [r2, #12]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	e000ed00 	.word	0xe000ed00

080067a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <__NVIC_GetPriorityGrouping+0x18>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	0a1b      	lsrs	r3, r3, #8
 80067aa:	f003 0307 	and.w	r3, r3, #7
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	e000ed00 	.word	0xe000ed00

080067bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	db0b      	blt.n	80067e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	f003 021f 	and.w	r2, r3, #31
 80067d4:	4906      	ldr	r1, [pc, #24]	; (80067f0 <__NVIC_EnableIRQ+0x34>)
 80067d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	2001      	movs	r0, #1
 80067de:	fa00 f202 	lsl.w	r2, r0, r2
 80067e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr
 80067f0:	e000e100 	.word	0xe000e100

080067f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006804:	2b00      	cmp	r3, #0
 8006806:	db0a      	blt.n	800681e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	b2da      	uxtb	r2, r3
 800680c:	490c      	ldr	r1, [pc, #48]	; (8006840 <__NVIC_SetPriority+0x4c>)
 800680e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006812:	0112      	lsls	r2, r2, #4
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	440b      	add	r3, r1
 8006818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800681c:	e00a      	b.n	8006834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	4908      	ldr	r1, [pc, #32]	; (8006844 <__NVIC_SetPriority+0x50>)
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	3b04      	subs	r3, #4
 800682c:	0112      	lsls	r2, r2, #4
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	440b      	add	r3, r1
 8006832:	761a      	strb	r2, [r3, #24]
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	e000e100 	.word	0xe000e100
 8006844:	e000ed00 	.word	0xe000ed00

08006848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006848:	b480      	push	{r7}
 800684a:	b089      	sub	sp, #36	; 0x24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f1c3 0307 	rsb	r3, r3, #7
 8006862:	2b04      	cmp	r3, #4
 8006864:	bf28      	it	cs
 8006866:	2304      	movcs	r3, #4
 8006868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	3304      	adds	r3, #4
 800686e:	2b06      	cmp	r3, #6
 8006870:	d902      	bls.n	8006878 <NVIC_EncodePriority+0x30>
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3b03      	subs	r3, #3
 8006876:	e000      	b.n	800687a <NVIC_EncodePriority+0x32>
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800687c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43da      	mvns	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	401a      	ands	r2, r3
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	43d9      	mvns	r1, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a0:	4313      	orrs	r3, r2
         );
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3724      	adds	r7, #36	; 0x24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068bc:	d301      	bcc.n	80068c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068be:	2301      	movs	r3, #1
 80068c0:	e00f      	b.n	80068e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068c2:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <SysTick_Config+0x40>)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068ca:	210f      	movs	r1, #15
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068d0:	f7ff ff90 	bl	80067f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <SysTick_Config+0x40>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068da:	4b04      	ldr	r3, [pc, #16]	; (80068ec <SysTick_Config+0x40>)
 80068dc:	2207      	movs	r2, #7
 80068de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	e000e010 	.word	0xe000e010

080068f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff ff2d 	bl	8006758 <__NVIC_SetPriorityGrouping>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006906:	b580      	push	{r7, lr}
 8006908:	b086      	sub	sp, #24
 800690a:	af00      	add	r7, sp, #0
 800690c:	4603      	mov	r3, r0
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006918:	f7ff ff42 	bl	80067a0 <__NVIC_GetPriorityGrouping>
 800691c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	6978      	ldr	r0, [r7, #20]
 8006924:	f7ff ff90 	bl	8006848 <NVIC_EncodePriority>
 8006928:	4602      	mov	r2, r0
 800692a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff ff5f 	bl	80067f4 <__NVIC_SetPriority>
}
 8006936:	bf00      	nop
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	4603      	mov	r3, r0
 8006946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff ff35 	bl	80067bc <__NVIC_EnableIRQ>
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff ffa2 	bl	80068ac <SysTick_Config>
 8006968:	4603      	mov	r3, r0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d008      	beq.n	800699c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2204      	movs	r2, #4
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e020      	b.n	80069de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 020e 	bic.w	r2, r2, #14
 80069aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c4:	2101      	movs	r1, #1
 80069c6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d005      	beq.n	8006a0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2204      	movs	r2, #4
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
 8006a0a:	e0d6      	b.n	8006bba <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 020e 	bic.w	r2, r2, #14
 8006a1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0201 	bic.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	4b64      	ldr	r3, [pc, #400]	; (8006bc4 <HAL_DMA_Abort_IT+0x1dc>)
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d958      	bls.n	8006aea <HAL_DMA_Abort_IT+0x102>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a62      	ldr	r2, [pc, #392]	; (8006bc8 <HAL_DMA_Abort_IT+0x1e0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d04f      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0xfa>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a61      	ldr	r2, [pc, #388]	; (8006bcc <HAL_DMA_Abort_IT+0x1e4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d048      	beq.n	8006ade <HAL_DMA_Abort_IT+0xf6>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a5f      	ldr	r2, [pc, #380]	; (8006bd0 <HAL_DMA_Abort_IT+0x1e8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d040      	beq.n	8006ad8 <HAL_DMA_Abort_IT+0xf0>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a5e      	ldr	r2, [pc, #376]	; (8006bd4 <HAL_DMA_Abort_IT+0x1ec>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d038      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0xea>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a5c      	ldr	r2, [pc, #368]	; (8006bd8 <HAL_DMA_Abort_IT+0x1f0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d030      	beq.n	8006acc <HAL_DMA_Abort_IT+0xe4>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a5b      	ldr	r2, [pc, #364]	; (8006bdc <HAL_DMA_Abort_IT+0x1f4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d028      	beq.n	8006ac6 <HAL_DMA_Abort_IT+0xde>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a52      	ldr	r2, [pc, #328]	; (8006bc4 <HAL_DMA_Abort_IT+0x1dc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d020      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0xd8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a57      	ldr	r2, [pc, #348]	; (8006be0 <HAL_DMA_Abort_IT+0x1f8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d019      	beq.n	8006abc <HAL_DMA_Abort_IT+0xd4>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a55      	ldr	r2, [pc, #340]	; (8006be4 <HAL_DMA_Abort_IT+0x1fc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d012      	beq.n	8006ab8 <HAL_DMA_Abort_IT+0xd0>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a54      	ldr	r2, [pc, #336]	; (8006be8 <HAL_DMA_Abort_IT+0x200>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00a      	beq.n	8006ab2 <HAL_DMA_Abort_IT+0xca>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a52      	ldr	r2, [pc, #328]	; (8006bec <HAL_DMA_Abort_IT+0x204>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d102      	bne.n	8006aac <HAL_DMA_Abort_IT+0xc4>
 8006aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aaa:	e01b      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ab0:	e018      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ab6:	e015      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	e013      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e011      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ac4:	e00e      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006ac6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006aca:	e00b      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ad0:	e008      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ad6:	e005      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006adc:	e002      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006ade:	2310      	movs	r3, #16
 8006ae0:	e000      	b.n	8006ae4 <HAL_DMA_Abort_IT+0xfc>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4a42      	ldr	r2, [pc, #264]	; (8006bf0 <HAL_DMA_Abort_IT+0x208>)
 8006ae6:	6053      	str	r3, [r2, #4]
 8006ae8:	e057      	b.n	8006b9a <HAL_DMA_Abort_IT+0x1b2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a36      	ldr	r2, [pc, #216]	; (8006bc8 <HAL_DMA_Abort_IT+0x1e0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d04f      	beq.n	8006b94 <HAL_DMA_Abort_IT+0x1ac>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a34      	ldr	r2, [pc, #208]	; (8006bcc <HAL_DMA_Abort_IT+0x1e4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d048      	beq.n	8006b90 <HAL_DMA_Abort_IT+0x1a8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a33      	ldr	r2, [pc, #204]	; (8006bd0 <HAL_DMA_Abort_IT+0x1e8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d040      	beq.n	8006b8a <HAL_DMA_Abort_IT+0x1a2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a31      	ldr	r2, [pc, #196]	; (8006bd4 <HAL_DMA_Abort_IT+0x1ec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d038      	beq.n	8006b84 <HAL_DMA_Abort_IT+0x19c>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a30      	ldr	r2, [pc, #192]	; (8006bd8 <HAL_DMA_Abort_IT+0x1f0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d030      	beq.n	8006b7e <HAL_DMA_Abort_IT+0x196>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a2e      	ldr	r2, [pc, #184]	; (8006bdc <HAL_DMA_Abort_IT+0x1f4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d028      	beq.n	8006b78 <HAL_DMA_Abort_IT+0x190>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a26      	ldr	r2, [pc, #152]	; (8006bc4 <HAL_DMA_Abort_IT+0x1dc>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d020      	beq.n	8006b72 <HAL_DMA_Abort_IT+0x18a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <HAL_DMA_Abort_IT+0x1f8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d019      	beq.n	8006b6e <HAL_DMA_Abort_IT+0x186>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a29      	ldr	r2, [pc, #164]	; (8006be4 <HAL_DMA_Abort_IT+0x1fc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d012      	beq.n	8006b6a <HAL_DMA_Abort_IT+0x182>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a27      	ldr	r2, [pc, #156]	; (8006be8 <HAL_DMA_Abort_IT+0x200>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00a      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x17c>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a26      	ldr	r2, [pc, #152]	; (8006bec <HAL_DMA_Abort_IT+0x204>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d102      	bne.n	8006b5e <HAL_DMA_Abort_IT+0x176>
 8006b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b5c:	e01b      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b62:	e018      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b68:	e015      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b6a:	2310      	movs	r3, #16
 8006b6c:	e013      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e011      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b76:	e00e      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b7c:	e00b      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b82:	e008      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b88:	e005      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b8e:	e002      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b90:	2310      	movs	r3, #16
 8006b92:	e000      	b.n	8006b96 <HAL_DMA_Abort_IT+0x1ae>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <HAL_DMA_Abort_IT+0x20c>)
 8006b98:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
    } 
  }
  return status;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40020080 	.word	0x40020080
 8006bc8:	40020008 	.word	0x40020008
 8006bcc:	4002001c 	.word	0x4002001c
 8006bd0:	40020030 	.word	0x40020030
 8006bd4:	40020044 	.word	0x40020044
 8006bd8:	40020058 	.word	0x40020058
 8006bdc:	4002006c 	.word	0x4002006c
 8006be0:	40020408 	.word	0x40020408
 8006be4:	4002041c 	.word	0x4002041c
 8006be8:	40020430 	.word	0x40020430
 8006bec:	40020444 	.word	0x40020444
 8006bf0:	40020400 	.word	0x40020400
 8006bf4:	40020000 	.word	0x40020000

08006bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b08b      	sub	sp, #44	; 0x2c
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006c06:	2300      	movs	r3, #0
 8006c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c0a:	e179      	b.n	8006f00 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	f040 8168 	bne.w	8006efa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	4a96      	ldr	r2, [pc, #600]	; (8006e88 <HAL_GPIO_Init+0x290>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d05e      	beq.n	8006cf2 <HAL_GPIO_Init+0xfa>
 8006c34:	4a94      	ldr	r2, [pc, #592]	; (8006e88 <HAL_GPIO_Init+0x290>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d875      	bhi.n	8006d26 <HAL_GPIO_Init+0x12e>
 8006c3a:	4a94      	ldr	r2, [pc, #592]	; (8006e8c <HAL_GPIO_Init+0x294>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d058      	beq.n	8006cf2 <HAL_GPIO_Init+0xfa>
 8006c40:	4a92      	ldr	r2, [pc, #584]	; (8006e8c <HAL_GPIO_Init+0x294>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d86f      	bhi.n	8006d26 <HAL_GPIO_Init+0x12e>
 8006c46:	4a92      	ldr	r2, [pc, #584]	; (8006e90 <HAL_GPIO_Init+0x298>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d052      	beq.n	8006cf2 <HAL_GPIO_Init+0xfa>
 8006c4c:	4a90      	ldr	r2, [pc, #576]	; (8006e90 <HAL_GPIO_Init+0x298>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d869      	bhi.n	8006d26 <HAL_GPIO_Init+0x12e>
 8006c52:	4a90      	ldr	r2, [pc, #576]	; (8006e94 <HAL_GPIO_Init+0x29c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d04c      	beq.n	8006cf2 <HAL_GPIO_Init+0xfa>
 8006c58:	4a8e      	ldr	r2, [pc, #568]	; (8006e94 <HAL_GPIO_Init+0x29c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d863      	bhi.n	8006d26 <HAL_GPIO_Init+0x12e>
 8006c5e:	4a8e      	ldr	r2, [pc, #568]	; (8006e98 <HAL_GPIO_Init+0x2a0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d046      	beq.n	8006cf2 <HAL_GPIO_Init+0xfa>
 8006c64:	4a8c      	ldr	r2, [pc, #560]	; (8006e98 <HAL_GPIO_Init+0x2a0>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d85d      	bhi.n	8006d26 <HAL_GPIO_Init+0x12e>
 8006c6a:	2b12      	cmp	r3, #18
 8006c6c:	d82a      	bhi.n	8006cc4 <HAL_GPIO_Init+0xcc>
 8006c6e:	2b12      	cmp	r3, #18
 8006c70:	d859      	bhi.n	8006d26 <HAL_GPIO_Init+0x12e>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <HAL_GPIO_Init+0x80>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006cf3 	.word	0x08006cf3
 8006c7c:	08006ccd 	.word	0x08006ccd
 8006c80:	08006cdf 	.word	0x08006cdf
 8006c84:	08006d21 	.word	0x08006d21
 8006c88:	08006d27 	.word	0x08006d27
 8006c8c:	08006d27 	.word	0x08006d27
 8006c90:	08006d27 	.word	0x08006d27
 8006c94:	08006d27 	.word	0x08006d27
 8006c98:	08006d27 	.word	0x08006d27
 8006c9c:	08006d27 	.word	0x08006d27
 8006ca0:	08006d27 	.word	0x08006d27
 8006ca4:	08006d27 	.word	0x08006d27
 8006ca8:	08006d27 	.word	0x08006d27
 8006cac:	08006d27 	.word	0x08006d27
 8006cb0:	08006d27 	.word	0x08006d27
 8006cb4:	08006d27 	.word	0x08006d27
 8006cb8:	08006d27 	.word	0x08006d27
 8006cbc:	08006cd5 	.word	0x08006cd5
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	4a75      	ldr	r2, [pc, #468]	; (8006e9c <HAL_GPIO_Init+0x2a4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006cca:	e02c      	b.n	8006d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	623b      	str	r3, [r7, #32]
          break;
 8006cd2:	e029      	b.n	8006d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	623b      	str	r3, [r7, #32]
          break;
 8006cdc:	e024      	b.n	8006d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	623b      	str	r3, [r7, #32]
          break;
 8006ce6:	e01f      	b.n	8006d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	330c      	adds	r3, #12
 8006cee:	623b      	str	r3, [r7, #32]
          break;
 8006cf0:	e01a      	b.n	8006d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006cfa:	2304      	movs	r3, #4
 8006cfc:	623b      	str	r3, [r7, #32]
          break;
 8006cfe:	e013      	b.n	8006d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d105      	bne.n	8006d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d08:	2308      	movs	r3, #8
 8006d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	611a      	str	r2, [r3, #16]
          break;
 8006d12:	e009      	b.n	8006d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d14:	2308      	movs	r3, #8
 8006d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	615a      	str	r2, [r3, #20]
          break;
 8006d1e:	e003      	b.n	8006d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006d20:	2300      	movs	r3, #0
 8006d22:	623b      	str	r3, [r7, #32]
          break;
 8006d24:	e000      	b.n	8006d28 <HAL_GPIO_Init+0x130>
          break;
 8006d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2bff      	cmp	r3, #255	; 0xff
 8006d2c:	d801      	bhi.n	8006d32 <HAL_GPIO_Init+0x13a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	e001      	b.n	8006d36 <HAL_GPIO_Init+0x13e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3304      	adds	r3, #4
 8006d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2bff      	cmp	r3, #255	; 0xff
 8006d3c:	d802      	bhi.n	8006d44 <HAL_GPIO_Init+0x14c>
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	e002      	b.n	8006d4a <HAL_GPIO_Init+0x152>
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	3b08      	subs	r3, #8
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	210f      	movs	r1, #15
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	6a39      	ldr	r1, [r7, #32]
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	fa01 f303 	lsl.w	r3, r1, r3
 8006d64:	431a      	orrs	r2, r3
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 80c1 	beq.w	8006efa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006d78:	4b49      	ldr	r3, [pc, #292]	; (8006ea0 <HAL_GPIO_Init+0x2a8>)
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	4a48      	ldr	r2, [pc, #288]	; (8006ea0 <HAL_GPIO_Init+0x2a8>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6193      	str	r3, [r2, #24]
 8006d84:	4b46      	ldr	r3, [pc, #280]	; (8006ea0 <HAL_GPIO_Init+0x2a8>)
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006d90:	4a44      	ldr	r2, [pc, #272]	; (8006ea4 <HAL_GPIO_Init+0x2ac>)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	089b      	lsrs	r3, r3, #2
 8006d96:	3302      	adds	r3, #2
 8006d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	220f      	movs	r2, #15
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	43db      	mvns	r3, r3
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a3c      	ldr	r2, [pc, #240]	; (8006ea8 <HAL_GPIO_Init+0x2b0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d01f      	beq.n	8006dfc <HAL_GPIO_Init+0x204>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a3b      	ldr	r2, [pc, #236]	; (8006eac <HAL_GPIO_Init+0x2b4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d019      	beq.n	8006df8 <HAL_GPIO_Init+0x200>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a3a      	ldr	r2, [pc, #232]	; (8006eb0 <HAL_GPIO_Init+0x2b8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d013      	beq.n	8006df4 <HAL_GPIO_Init+0x1fc>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a39      	ldr	r2, [pc, #228]	; (8006eb4 <HAL_GPIO_Init+0x2bc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00d      	beq.n	8006df0 <HAL_GPIO_Init+0x1f8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a38      	ldr	r2, [pc, #224]	; (8006eb8 <HAL_GPIO_Init+0x2c0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d007      	beq.n	8006dec <HAL_GPIO_Init+0x1f4>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a37      	ldr	r2, [pc, #220]	; (8006ebc <HAL_GPIO_Init+0x2c4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d101      	bne.n	8006de8 <HAL_GPIO_Init+0x1f0>
 8006de4:	2305      	movs	r3, #5
 8006de6:	e00a      	b.n	8006dfe <HAL_GPIO_Init+0x206>
 8006de8:	2306      	movs	r3, #6
 8006dea:	e008      	b.n	8006dfe <HAL_GPIO_Init+0x206>
 8006dec:	2304      	movs	r3, #4
 8006dee:	e006      	b.n	8006dfe <HAL_GPIO_Init+0x206>
 8006df0:	2303      	movs	r3, #3
 8006df2:	e004      	b.n	8006dfe <HAL_GPIO_Init+0x206>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e002      	b.n	8006dfe <HAL_GPIO_Init+0x206>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <HAL_GPIO_Init+0x206>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e00:	f002 0203 	and.w	r2, r2, #3
 8006e04:	0092      	lsls	r2, r2, #2
 8006e06:	4093      	lsls	r3, r2
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006e0e:	4925      	ldr	r1, [pc, #148]	; (8006ea4 <HAL_GPIO_Init+0x2ac>)
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	089b      	lsrs	r3, r3, #2
 8006e14:	3302      	adds	r3, #2
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006e28:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	4924      	ldr	r1, [pc, #144]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	608b      	str	r3, [r1, #8]
 8006e34:	e006      	b.n	8006e44 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006e36:	4b22      	ldr	r3, [pc, #136]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	4920      	ldr	r1, [pc, #128]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d006      	beq.n	8006e5e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006e50:	4b1b      	ldr	r3, [pc, #108]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	491a      	ldr	r1, [pc, #104]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60cb      	str	r3, [r1, #12]
 8006e5c:	e006      	b.n	8006e6c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006e5e:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	43db      	mvns	r3, r3
 8006e66:	4916      	ldr	r1, [pc, #88]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d025      	beq.n	8006ec4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006e78:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	4910      	ldr	r1, [pc, #64]	; (8006ec0 <HAL_GPIO_Init+0x2c8>)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	604b      	str	r3, [r1, #4]
 8006e84:	e025      	b.n	8006ed2 <HAL_GPIO_Init+0x2da>
 8006e86:	bf00      	nop
 8006e88:	10320000 	.word	0x10320000
 8006e8c:	10310000 	.word	0x10310000
 8006e90:	10220000 	.word	0x10220000
 8006e94:	10210000 	.word	0x10210000
 8006e98:	10120000 	.word	0x10120000
 8006e9c:	10110000 	.word	0x10110000
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	40010000 	.word	0x40010000
 8006ea8:	40010800 	.word	0x40010800
 8006eac:	40010c00 	.word	0x40010c00
 8006eb0:	40011000 	.word	0x40011000
 8006eb4:	40011400 	.word	0x40011400
 8006eb8:	40011800 	.word	0x40011800
 8006ebc:	40011c00 	.word	0x40011c00
 8006ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006ec4:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <HAL_GPIO_Init+0x324>)
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	4913      	ldr	r1, [pc, #76]	; (8006f1c <HAL_GPIO_Init+0x324>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <HAL_GPIO_Init+0x324>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	490e      	ldr	r1, [pc, #56]	; (8006f1c <HAL_GPIO_Init+0x324>)
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	600b      	str	r3, [r1, #0]
 8006eea:	e006      	b.n	8006efa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006eec:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <HAL_GPIO_Init+0x324>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	4909      	ldr	r1, [pc, #36]	; (8006f1c <HAL_GPIO_Init+0x324>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	3301      	adds	r3, #1
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f47f ae7e 	bne.w	8006c0c <HAL_GPIO_Init+0x14>
  }
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	372c      	adds	r7, #44	; 0x2c
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	40010400 	.word	0x40010400

08006f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	887b      	ldrh	r3, [r7, #2]
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
 8006f3c:	e001      	b.n	8006f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	807b      	strh	r3, [r7, #2]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f5e:	787b      	ldrb	r3, [r7, #1]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f64:	887a      	ldrh	r2, [r7, #2]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006f6a:	e003      	b.n	8006f74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006f6c:	887b      	ldrh	r3, [r7, #2]
 8006f6e:	041a      	lsls	r2, r3, #16
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	611a      	str	r2, [r3, #16]
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bc80      	pop	{r7}
 8006f7c:	4770      	bx	lr
	...

08006f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f8a:	4b08      	ldr	r3, [pc, #32]	; (8006fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f8c:	695a      	ldr	r2, [r3, #20]
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d006      	beq.n	8006fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f96:	4a05      	ldr	r2, [pc, #20]	; (8006fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fa2a 	bl	80063f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40010400 	.word	0x40010400

08006fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e272      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8087 	beq.w	80070de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fd0:	4b92      	ldr	r3, [pc, #584]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f003 030c 	and.w	r3, r3, #12
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d00c      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006fdc:	4b8f      	ldr	r3, [pc, #572]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f003 030c 	and.w	r3, r3, #12
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d112      	bne.n	800700e <HAL_RCC_OscConfig+0x5e>
 8006fe8:	4b8c      	ldr	r3, [pc, #560]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff4:	d10b      	bne.n	800700e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff6:	4b89      	ldr	r3, [pc, #548]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d06c      	beq.n	80070dc <HAL_RCC_OscConfig+0x12c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d168      	bne.n	80070dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e24c      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007016:	d106      	bne.n	8007026 <HAL_RCC_OscConfig+0x76>
 8007018:	4b80      	ldr	r3, [pc, #512]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a7f      	ldr	r2, [pc, #508]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 800701e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	e02e      	b.n	8007084 <HAL_RCC_OscConfig+0xd4>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10c      	bne.n	8007048 <HAL_RCC_OscConfig+0x98>
 800702e:	4b7b      	ldr	r3, [pc, #492]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a7a      	ldr	r2, [pc, #488]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4b78      	ldr	r3, [pc, #480]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a77      	ldr	r2, [pc, #476]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	e01d      	b.n	8007084 <HAL_RCC_OscConfig+0xd4>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0xbc>
 8007052:	4b72      	ldr	r3, [pc, #456]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a71      	ldr	r2, [pc, #452]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4b6f      	ldr	r3, [pc, #444]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6e      	ldr	r2, [pc, #440]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e00b      	b.n	8007084 <HAL_RCC_OscConfig+0xd4>
 800706c:	4b6b      	ldr	r3, [pc, #428]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a6a      	ldr	r2, [pc, #424]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b68      	ldr	r3, [pc, #416]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a67      	ldr	r2, [pc, #412]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 800707e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007082:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d013      	beq.n	80070b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800708c:	f7ff fb36 	bl	80066fc <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007094:	f7ff fb32 	bl	80066fc <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b64      	cmp	r3, #100	; 0x64
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e200      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a6:	4b5d      	ldr	r3, [pc, #372]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0f0      	beq.n	8007094 <HAL_RCC_OscConfig+0xe4>
 80070b2:	e014      	b.n	80070de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b4:	f7ff fb22 	bl	80066fc <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070bc:	f7ff fb1e 	bl	80066fc <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b64      	cmp	r3, #100	; 0x64
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e1ec      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ce:	4b53      	ldr	r3, [pc, #332]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0x10c>
 80070da:	e000      	b.n	80070de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d063      	beq.n	80071b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070ea:	4b4c      	ldr	r3, [pc, #304]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80070f6:	4b49      	ldr	r3, [pc, #292]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f003 030c 	and.w	r3, r3, #12
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d11c      	bne.n	800713c <HAL_RCC_OscConfig+0x18c>
 8007102:	4b46      	ldr	r3, [pc, #280]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d116      	bne.n	800713c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800710e:	4b43      	ldr	r3, [pc, #268]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_RCC_OscConfig+0x176>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d001      	beq.n	8007126 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e1c0      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007126:	4b3d      	ldr	r3, [pc, #244]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4939      	ldr	r1, [pc, #228]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713a:	e03a      	b.n	80071b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d020      	beq.n	8007186 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007144:	4b36      	ldr	r3, [pc, #216]	; (8007220 <HAL_RCC_OscConfig+0x270>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800714a:	f7ff fad7 	bl	80066fc <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007152:	f7ff fad3 	bl	80066fc <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e1a1      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007164:	4b2d      	ldr	r3, [pc, #180]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007170:	4b2a      	ldr	r3, [pc, #168]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4927      	ldr	r1, [pc, #156]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 8007180:	4313      	orrs	r3, r2
 8007182:	600b      	str	r3, [r1, #0]
 8007184:	e015      	b.n	80071b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007186:	4b26      	ldr	r3, [pc, #152]	; (8007220 <HAL_RCC_OscConfig+0x270>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718c:	f7ff fab6 	bl	80066fc <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007194:	f7ff fab2 	bl	80066fc <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e180      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a6:	4b1d      	ldr	r3, [pc, #116]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d03a      	beq.n	8007234 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d019      	beq.n	80071fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071c6:	4b17      	ldr	r3, [pc, #92]	; (8007224 <HAL_RCC_OscConfig+0x274>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071cc:	f7ff fa96 	bl	80066fc <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d4:	f7ff fa92 	bl	80066fc <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e160      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e6:	4b0d      	ldr	r3, [pc, #52]	; (800721c <HAL_RCC_OscConfig+0x26c>)
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80071f2:	2001      	movs	r0, #1
 80071f4:	f000 face 	bl	8007794 <RCC_Delay>
 80071f8:	e01c      	b.n	8007234 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <HAL_RCC_OscConfig+0x274>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007200:	f7ff fa7c 	bl	80066fc <HAL_GetTick>
 8007204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007206:	e00f      	b.n	8007228 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007208:	f7ff fa78 	bl	80066fc <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d908      	bls.n	8007228 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e146      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
 800721a:	bf00      	nop
 800721c:	40021000 	.word	0x40021000
 8007220:	42420000 	.word	0x42420000
 8007224:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007228:	4b92      	ldr	r3, [pc, #584]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e9      	bne.n	8007208 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80a6 	beq.w	800738e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007246:	4b8b      	ldr	r3, [pc, #556]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007252:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	4a87      	ldr	r2, [pc, #540]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800725c:	61d3      	str	r3, [r2, #28]
 800725e:	4b85      	ldr	r3, [pc, #532]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800726e:	4b82      	ldr	r3, [pc, #520]	; (8007478 <HAL_RCC_OscConfig+0x4c8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d118      	bne.n	80072ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800727a:	4b7f      	ldr	r3, [pc, #508]	; (8007478 <HAL_RCC_OscConfig+0x4c8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a7e      	ldr	r2, [pc, #504]	; (8007478 <HAL_RCC_OscConfig+0x4c8>)
 8007280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007286:	f7ff fa39 	bl	80066fc <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800728e:	f7ff fa35 	bl	80066fc <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b64      	cmp	r3, #100	; 0x64
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e103      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a0:	4b75      	ldr	r3, [pc, #468]	; (8007478 <HAL_RCC_OscConfig+0x4c8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0f0      	beq.n	800728e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d106      	bne.n	80072c2 <HAL_RCC_OscConfig+0x312>
 80072b4:	4b6f      	ldr	r3, [pc, #444]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	4a6e      	ldr	r2, [pc, #440]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072ba:	f043 0301 	orr.w	r3, r3, #1
 80072be:	6213      	str	r3, [r2, #32]
 80072c0:	e02d      	b.n	800731e <HAL_RCC_OscConfig+0x36e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10c      	bne.n	80072e4 <HAL_RCC_OscConfig+0x334>
 80072ca:	4b6a      	ldr	r3, [pc, #424]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	4a69      	ldr	r2, [pc, #420]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	6213      	str	r3, [r2, #32]
 80072d6:	4b67      	ldr	r3, [pc, #412]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	4a66      	ldr	r2, [pc, #408]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072dc:	f023 0304 	bic.w	r3, r3, #4
 80072e0:	6213      	str	r3, [r2, #32]
 80072e2:	e01c      	b.n	800731e <HAL_RCC_OscConfig+0x36e>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2b05      	cmp	r3, #5
 80072ea:	d10c      	bne.n	8007306 <HAL_RCC_OscConfig+0x356>
 80072ec:	4b61      	ldr	r3, [pc, #388]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	4a60      	ldr	r2, [pc, #384]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072f2:	f043 0304 	orr.w	r3, r3, #4
 80072f6:	6213      	str	r3, [r2, #32]
 80072f8:	4b5e      	ldr	r3, [pc, #376]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	4a5d      	ldr	r2, [pc, #372]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	6213      	str	r3, [r2, #32]
 8007304:	e00b      	b.n	800731e <HAL_RCC_OscConfig+0x36e>
 8007306:	4b5b      	ldr	r3, [pc, #364]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	4a5a      	ldr	r2, [pc, #360]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	6213      	str	r3, [r2, #32]
 8007312:	4b58      	ldr	r3, [pc, #352]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	4a57      	ldr	r2, [pc, #348]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d015      	beq.n	8007352 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007326:	f7ff f9e9 	bl	80066fc <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732c:	e00a      	b.n	8007344 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732e:	f7ff f9e5 	bl	80066fc <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	f241 3288 	movw	r2, #5000	; 0x1388
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e0b1      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007344:	4b4b      	ldr	r3, [pc, #300]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0ee      	beq.n	800732e <HAL_RCC_OscConfig+0x37e>
 8007350:	e014      	b.n	800737c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007352:	f7ff f9d3 	bl	80066fc <HAL_GetTick>
 8007356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007358:	e00a      	b.n	8007370 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735a:	f7ff f9cf 	bl	80066fc <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f241 3288 	movw	r2, #5000	; 0x1388
 8007368:	4293      	cmp	r3, r2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e09b      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007370:	4b40      	ldr	r3, [pc, #256]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1ee      	bne.n	800735a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d105      	bne.n	800738e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007382:	4b3c      	ldr	r3, [pc, #240]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	4a3b      	ldr	r2, [pc, #236]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800738c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8087 	beq.w	80074a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007398:	4b36      	ldr	r3, [pc, #216]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 030c 	and.w	r3, r3, #12
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d061      	beq.n	8007468 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d146      	bne.n	800743a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ac:	4b33      	ldr	r3, [pc, #204]	; (800747c <HAL_RCC_OscConfig+0x4cc>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b2:	f7ff f9a3 	bl	80066fc <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073b8:	e008      	b.n	80073cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ba:	f7ff f99f 	bl	80066fc <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e06d      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073cc:	4b29      	ldr	r3, [pc, #164]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1f0      	bne.n	80073ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e0:	d108      	bne.n	80073f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	4921      	ldr	r1, [pc, #132]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073f4:	4b1f      	ldr	r3, [pc, #124]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a19      	ldr	r1, [r3, #32]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	430b      	orrs	r3, r1
 8007406:	491b      	ldr	r1, [pc, #108]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 8007408:	4313      	orrs	r3, r2
 800740a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800740c:	4b1b      	ldr	r3, [pc, #108]	; (800747c <HAL_RCC_OscConfig+0x4cc>)
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007412:	f7ff f973 	bl	80066fc <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800741a:	f7ff f96f 	bl	80066fc <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e03d      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800742c:	4b11      	ldr	r3, [pc, #68]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCC_OscConfig+0x46a>
 8007438:	e035      	b.n	80074a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800743a:	4b10      	ldr	r3, [pc, #64]	; (800747c <HAL_RCC_OscConfig+0x4cc>)
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007440:	f7ff f95c 	bl	80066fc <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007448:	f7ff f958 	bl	80066fc <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e026      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800745a:	4b06      	ldr	r3, [pc, #24]	; (8007474 <HAL_RCC_OscConfig+0x4c4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f0      	bne.n	8007448 <HAL_RCC_OscConfig+0x498>
 8007466:	e01e      	b.n	80074a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d107      	bne.n	8007480 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e019      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
 8007474:	40021000 	.word	0x40021000
 8007478:	40007000 	.word	0x40007000
 800747c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <HAL_RCC_OscConfig+0x500>)
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	429a      	cmp	r2, r3
 8007492:	d106      	bne.n	80074a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749e:	429a      	cmp	r2, r3
 80074a0:	d001      	beq.n	80074a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40021000 	.word	0x40021000

080074b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0d0      	b.n	800766a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074c8:	4b6a      	ldr	r3, [pc, #424]	; (8007674 <HAL_RCC_ClockConfig+0x1c0>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d910      	bls.n	80074f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074d6:	4b67      	ldr	r3, [pc, #412]	; (8007674 <HAL_RCC_ClockConfig+0x1c0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f023 0207 	bic.w	r2, r3, #7
 80074de:	4965      	ldr	r1, [pc, #404]	; (8007674 <HAL_RCC_ClockConfig+0x1c0>)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074e6:	4b63      	ldr	r3, [pc, #396]	; (8007674 <HAL_RCC_ClockConfig+0x1c0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d001      	beq.n	80074f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0b8      	b.n	800766a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d020      	beq.n	8007546 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007510:	4b59      	ldr	r3, [pc, #356]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4a58      	ldr	r2, [pc, #352]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800751a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007528:	4b53      	ldr	r3, [pc, #332]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	4a52      	ldr	r2, [pc, #328]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 800752e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007532:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007534:	4b50      	ldr	r3, [pc, #320]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	494d      	ldr	r1, [pc, #308]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007542:	4313      	orrs	r3, r2
 8007544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d040      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d107      	bne.n	800756a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800755a:	4b47      	ldr	r3, [pc, #284]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d115      	bne.n	8007592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e07f      	b.n	800766a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b02      	cmp	r3, #2
 8007570:	d107      	bne.n	8007582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007572:	4b41      	ldr	r3, [pc, #260]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e073      	b.n	800766a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007582:	4b3d      	ldr	r3, [pc, #244]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e06b      	b.n	800766a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007592:	4b39      	ldr	r3, [pc, #228]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f023 0203 	bic.w	r2, r3, #3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	4936      	ldr	r1, [pc, #216]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075a4:	f7ff f8aa 	bl	80066fc <HAL_GetTick>
 80075a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075aa:	e00a      	b.n	80075c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075ac:	f7ff f8a6 	bl	80066fc <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e053      	b.n	800766a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c2:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f003 020c 	and.w	r2, r3, #12
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d1eb      	bne.n	80075ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075d4:	4b27      	ldr	r3, [pc, #156]	; (8007674 <HAL_RCC_ClockConfig+0x1c0>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d210      	bcs.n	8007604 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e2:	4b24      	ldr	r3, [pc, #144]	; (8007674 <HAL_RCC_ClockConfig+0x1c0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f023 0207 	bic.w	r2, r3, #7
 80075ea:	4922      	ldr	r1, [pc, #136]	; (8007674 <HAL_RCC_ClockConfig+0x1c0>)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f2:	4b20      	ldr	r3, [pc, #128]	; (8007674 <HAL_RCC_ClockConfig+0x1c0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d001      	beq.n	8007604 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e032      	b.n	800766a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d008      	beq.n	8007622 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007610:	4b19      	ldr	r3, [pc, #100]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	4916      	ldr	r1, [pc, #88]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0308 	and.w	r3, r3, #8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800762e:	4b12      	ldr	r3, [pc, #72]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	490e      	ldr	r1, [pc, #56]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 800763e:	4313      	orrs	r3, r2
 8007640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007642:	f000 f821 	bl	8007688 <HAL_RCC_GetSysClockFreq>
 8007646:	4602      	mov	r2, r0
 8007648:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	091b      	lsrs	r3, r3, #4
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	490a      	ldr	r1, [pc, #40]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007654:	5ccb      	ldrb	r3, [r1, r3]
 8007656:	fa22 f303 	lsr.w	r3, r2, r3
 800765a:	4a09      	ldr	r2, [pc, #36]	; (8007680 <HAL_RCC_ClockConfig+0x1cc>)
 800765c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <HAL_RCC_ClockConfig+0x1d0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff f808 	bl	8006678 <HAL_InitTick>

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	40022000 	.word	0x40022000
 8007678:	40021000 	.word	0x40021000
 800767c:	08009d44 	.word	0x08009d44
 8007680:	20000004 	.word	0x20000004
 8007684:	20000008 	.word	0x20000008

08007688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	2300      	movs	r3, #0
 800769c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80076a2:	4b1e      	ldr	r3, [pc, #120]	; (800771c <HAL_RCC_GetSysClockFreq+0x94>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f003 030c 	and.w	r3, r3, #12
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d002      	beq.n	80076b8 <HAL_RCC_GetSysClockFreq+0x30>
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d003      	beq.n	80076be <HAL_RCC_GetSysClockFreq+0x36>
 80076b6:	e027      	b.n	8007708 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076b8:	4b19      	ldr	r3, [pc, #100]	; (8007720 <HAL_RCC_GetSysClockFreq+0x98>)
 80076ba:	613b      	str	r3, [r7, #16]
      break;
 80076bc:	e027      	b.n	800770e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	0c9b      	lsrs	r3, r3, #18
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	4a17      	ldr	r2, [pc, #92]	; (8007724 <HAL_RCC_GetSysClockFreq+0x9c>)
 80076c8:	5cd3      	ldrb	r3, [r2, r3]
 80076ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d010      	beq.n	80076f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076d6:	4b11      	ldr	r3, [pc, #68]	; (800771c <HAL_RCC_GetSysClockFreq+0x94>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	0c5b      	lsrs	r3, r3, #17
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	4a11      	ldr	r2, [pc, #68]	; (8007728 <HAL_RCC_GetSysClockFreq+0xa0>)
 80076e2:	5cd3      	ldrb	r3, [r2, r3]
 80076e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a0d      	ldr	r2, [pc, #52]	; (8007720 <HAL_RCC_GetSysClockFreq+0x98>)
 80076ea:	fb03 f202 	mul.w	r2, r3, r2
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e004      	b.n	8007702 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a0c      	ldr	r2, [pc, #48]	; (800772c <HAL_RCC_GetSysClockFreq+0xa4>)
 80076fc:	fb02 f303 	mul.w	r3, r2, r3
 8007700:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	613b      	str	r3, [r7, #16]
      break;
 8007706:	e002      	b.n	800770e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <HAL_RCC_GetSysClockFreq+0x98>)
 800770a:	613b      	str	r3, [r7, #16]
      break;
 800770c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800770e:	693b      	ldr	r3, [r7, #16]
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40021000 	.word	0x40021000
 8007720:	007a1200 	.word	0x007a1200
 8007724:	08009d5c 	.word	0x08009d5c
 8007728:	08009d6c 	.word	0x08009d6c
 800772c:	003d0900 	.word	0x003d0900

08007730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <HAL_RCC_GetHCLKFreq+0x10>)
 8007736:	681b      	ldr	r3, [r3, #0]
}
 8007738:	4618      	mov	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr
 8007740:	20000004 	.word	0x20000004

08007744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007748:	f7ff fff2 	bl	8007730 <HAL_RCC_GetHCLKFreq>
 800774c:	4602      	mov	r2, r0
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	4903      	ldr	r1, [pc, #12]	; (8007768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800775a:	5ccb      	ldrb	r3, [r1, r3]
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40021000 	.word	0x40021000
 8007768:	08009d54 	.word	0x08009d54

0800776c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007770:	f7ff ffde 	bl	8007730 <HAL_RCC_GetHCLKFreq>
 8007774:	4602      	mov	r2, r0
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	0adb      	lsrs	r3, r3, #11
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	4903      	ldr	r1, [pc, #12]	; (8007790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007782:	5ccb      	ldrb	r3, [r1, r3]
 8007784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40021000 	.word	0x40021000
 8007790:	08009d54 	.word	0x08009d54

08007794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <RCC_Delay+0x34>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <RCC_Delay+0x38>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	0a5b      	lsrs	r3, r3, #9
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077b0:	bf00      	nop
  }
  while (Delay --);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	1e5a      	subs	r2, r3, #1
 80077b6:	60fa      	str	r2, [r7, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f9      	bne.n	80077b0 <RCC_Delay+0x1c>
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr
 80077c8:	20000004 	.word	0x20000004
 80077cc:	10624dd3 	.word	0x10624dd3

080077d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e042      	b.n	8007868 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fe feae 	bl	8006558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	; 0x24
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fdc5 	bl	80083a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695a      	ldr	r2, [r3, #20]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af02      	add	r7, sp, #8
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	4613      	mov	r3, r2
 800787e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b20      	cmp	r3, #32
 800788e:	d16d      	bne.n	800796c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_UART_Transmit+0x2c>
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e066      	b.n	800796e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2221      	movs	r2, #33	; 0x21
 80078aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ae:	f7fe ff25 	bl	80066fc <HAL_GetTick>
 80078b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	88fa      	ldrh	r2, [r7, #6]
 80078b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c8:	d108      	bne.n	80078dc <HAL_UART_Transmit+0x6c>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	e003      	b.n	80078e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078e4:	e02a      	b.n	800793c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2180      	movs	r1, #128	; 0x80
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fb14 	bl	8007f1e <UART_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e036      	b.n	800796e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10b      	bne.n	800791e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007914:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	3302      	adds	r3, #2
 800791a:	61bb      	str	r3, [r7, #24]
 800791c:	e007      	b.n	800792e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	3301      	adds	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1cf      	bne.n	80078e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2200      	movs	r2, #0
 800794e:	2140      	movs	r1, #64	; 0x40
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fae4 	bl	8007f1e <UART_WaitOnFlagUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e006      	b.n	800796e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	e000      	b.n	800796e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800796c:	2302      	movs	r3, #2
  }
}
 800796e:	4618      	mov	r0, r3
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	4613      	mov	r3, r2
 8007982:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b20      	cmp	r3, #32
 800798e:	d112      	bne.n	80079b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_UART_Receive_IT+0x26>
 8007996:	88fb      	ldrh	r3, [r7, #6]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e00b      	b.n	80079b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079a6:	88fb      	ldrh	r3, [r7, #6]
 80079a8:	461a      	mov	r2, r3
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fb24 	bl	8007ffa <UART_Start_Receive_IT>
 80079b2:	4603      	mov	r3, r0
 80079b4:	e000      	b.n	80079b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b0ba      	sub	sp, #232	; 0xe8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 030f 	and.w	r3, r3, #15
 80079fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10f      	bne.n	8007a26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <HAL_UART_IRQHandler+0x66>
 8007a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fc01 	bl	8008226 <UART_Receive_IT>
      return;
 8007a24:	e25b      	b.n	8007ede <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80de 	beq.w	8007bec <HAL_UART_IRQHandler+0x22c>
 8007a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 80d1 	beq.w	8007bec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <HAL_UART_IRQHandler+0xae>
 8007a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a66:	f043 0201 	orr.w	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <HAL_UART_IRQHandler+0xd2>
 8007a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8a:	f043 0202 	orr.w	r2, r3, #2
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <HAL_UART_IRQHandler+0xf6>
 8007a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aae:	f043 0204 	orr.w	r2, r3, #4
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d011      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x126>
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d105      	bne.n	8007ada <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ade:	f043 0208 	orr.w	r2, r3, #8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 81f2 	beq.w	8007ed4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d008      	beq.n	8007b0e <HAL_UART_IRQHandler+0x14e>
 8007afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fb8c 	bl	8008226 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d103      	bne.n	8007b3a <HAL_UART_IRQHandler+0x17a>
 8007b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d04f      	beq.n	8007bda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa96 	bl	800806c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d041      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3314      	adds	r3, #20
 8007b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3314      	adds	r3, #20
 8007b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1d9      	bne.n	8007b4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d013      	beq.n	8007bca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba6:	4a7e      	ldr	r2, [pc, #504]	; (8007da0 <HAL_UART_IRQHandler+0x3e0>)
 8007ba8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe ff1a 	bl	80069e8 <HAL_DMA_Abort_IT>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d016      	beq.n	8007be8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc8:	e00e      	b.n	8007be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f993 	bl	8007ef6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd0:	e00a      	b.n	8007be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f98f 	bl	8007ef6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd8:	e006      	b.n	8007be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f98b 	bl	8007ef6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007be6:	e175      	b.n	8007ed4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	bf00      	nop
    return;
 8007bea:	e173      	b.n	8007ed4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	f040 814f 	bne.w	8007e94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8148 	beq.w	8007e94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 8141 	beq.w	8007e94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60bb      	str	r3, [r7, #8]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80b6 	beq.w	8007da4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8145 	beq.w	8007ed8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c56:	429a      	cmp	r2, r3
 8007c58:	f080 813e 	bcs.w	8007ed8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	f000 8088 	beq.w	8007d80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ca8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1d9      	bne.n	8007c70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3314      	adds	r3, #20
 8007cc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3314      	adds	r3, #20
 8007cdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ce0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ce8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e1      	bne.n	8007cbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3314      	adds	r3, #20
 8007cfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3314      	adds	r3, #20
 8007d18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e3      	bne.n	8007cf8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	330c      	adds	r3, #12
 8007d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d50:	f023 0310 	bic.w	r3, r3, #16
 8007d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d62:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e3      	bne.n	8007d3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fdf9 	bl	8006972 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f8b6 	bl	8007f08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d9c:	e09c      	b.n	8007ed8 <HAL_UART_IRQHandler+0x518>
 8007d9e:	bf00      	nop
 8007da0:	08008131 	.word	0x08008131
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 808e 	beq.w	8007edc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8089 	beq.w	8007edc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	330c      	adds	r3, #12
 8007dea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007dee:	647a      	str	r2, [r7, #68]	; 0x44
 8007df0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e3      	bne.n	8007dca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3314      	adds	r3, #20
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	623b      	str	r3, [r7, #32]
   return(result);
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3314      	adds	r3, #20
 8007e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e26:	633a      	str	r2, [r7, #48]	; 0x30
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e3      	bne.n	8007e02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0310 	bic.w	r3, r3, #16
 8007e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	330c      	adds	r3, #12
 8007e68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e6c:	61fa      	str	r2, [r7, #28]
 8007e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	69b9      	ldr	r1, [r7, #24]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e3      	bne.n	8007e48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f83b 	bl	8007f08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e92:	e023      	b.n	8007edc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x4f4>
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f953 	bl	8008158 <UART_Transmit_IT>
    return;
 8007eb2:	e014      	b.n	8007ede <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00e      	beq.n	8007ede <HAL_UART_IRQHandler+0x51e>
 8007ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f992 	bl	80081f6 <UART_EndTransmit_IT>
    return;
 8007ed2:	e004      	b.n	8007ede <HAL_UART_IRQHandler+0x51e>
    return;
 8007ed4:	bf00      	nop
 8007ed6:	e002      	b.n	8007ede <HAL_UART_IRQHandler+0x51e>
      return;
 8007ed8:	bf00      	nop
 8007eda:	e000      	b.n	8007ede <HAL_UART_IRQHandler+0x51e>
      return;
 8007edc:	bf00      	nop
  }
}
 8007ede:	37e8      	adds	r7, #232	; 0xe8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bc80      	pop	{r7}
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr

08007f1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b090      	sub	sp, #64	; 0x40
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2e:	e050      	b.n	8007fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f36:	d04c      	beq.n	8007fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d007      	beq.n	8007f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f3e:	f7fe fbdd 	bl	80066fc <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d241      	bcs.n	8007fd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	330c      	adds	r3, #12
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f6e:	637a      	str	r2, [r7, #52]	; 0x34
 8007f70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e5      	bne.n	8007f4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3314      	adds	r3, #20
 8007f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	613b      	str	r3, [r7, #16]
   return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa2:	623a      	str	r2, [r7, #32]
 8007fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	69f9      	ldr	r1, [r7, #28]
 8007fa8:	6a3a      	ldr	r2, [r7, #32]
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e5      	bne.n	8007f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e00f      	b.n	8007ff2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	bf0c      	ite	eq
 8007fe2:	2301      	moveq	r3, #1
 8007fe4:	2300      	movne	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	461a      	mov	r2, r3
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d09f      	beq.n	8007f30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3740      	adds	r7, #64	; 0x40
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	4613      	mov	r3, r2
 8008006:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	88fa      	ldrh	r2, [r7, #6]
 8008012:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2222      	movs	r2, #34	; 0x22
 8008024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800803e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0220 	orr.w	r2, r2, #32
 800805e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	bc80      	pop	{r7}
 800806a:	4770      	bx	lr

0800806c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b095      	sub	sp, #84	; 0x54
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	330c      	adds	r3, #12
 800807a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800808a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	330c      	adds	r3, #12
 8008092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008094:	643a      	str	r2, [r7, #64]	; 0x40
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800809a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e5      	bne.n	8008074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3314      	adds	r3, #20
 80080ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	f023 0301 	bic.w	r3, r3, #1
 80080be:	64bb      	str	r3, [r7, #72]	; 0x48
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3314      	adds	r3, #20
 80080c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e5      	bne.n	80080a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d119      	bne.n	8008118 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	330c      	adds	r3, #12
 80080ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f023 0310 	bic.w	r3, r3, #16
 80080fa:	647b      	str	r3, [r7, #68]	; 0x44
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008104:	61ba      	str	r2, [r7, #24]
 8008106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	6979      	ldr	r1, [r7, #20]
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	e841 2300 	strex	r3, r2, [r1]
 8008110:	613b      	str	r3, [r7, #16]
   return(result);
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e5      	bne.n	80080e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008126:	bf00      	nop
 8008128:	3754      	adds	r7, #84	; 0x54
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	4770      	bx	lr

08008130 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f7ff fed3 	bl	8007ef6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b21      	cmp	r3, #33	; 0x21
 800816a:	d13e      	bne.n	80081ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008174:	d114      	bne.n	80081a0 <UART_Transmit_IT+0x48>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d110      	bne.n	80081a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008192:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	1c9a      	adds	r2, r3, #2
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	621a      	str	r2, [r3, #32]
 800819e:	e008      	b.n	80081b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	1c59      	adds	r1, r3, #1
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6211      	str	r1, [r2, #32]
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4619      	mov	r1, r3
 80081c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10f      	bne.n	80081e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	e000      	b.n	80081ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081ea:	2302      	movs	r3, #2
  }
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr

080081f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800820c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fe64 	bl	8007ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b08c      	sub	sp, #48	; 0x30
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b22      	cmp	r3, #34	; 0x22
 8008238:	f040 80ae 	bne.w	8008398 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008244:	d117      	bne.n	8008276 <UART_Receive_IT+0x50>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d113      	bne.n	8008276 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800824e:	2300      	movs	r3, #0
 8008250:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	b29b      	uxth	r3, r3
 8008260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008264:	b29a      	uxth	r2, r3
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	1c9a      	adds	r2, r3, #2
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	629a      	str	r2, [r3, #40]	; 0x28
 8008274:	e026      	b.n	80082c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008288:	d007      	beq.n	800829a <UART_Receive_IT+0x74>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <UART_Receive_IT+0x82>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d106      	bne.n	80082a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	e008      	b.n	80082ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	3b01      	subs	r3, #1
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4619      	mov	r1, r3
 80082d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d15d      	bne.n	8008394 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0220 	bic.w	r2, r2, #32
 80082e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0201 	bic.w	r2, r2, #1
 8008306:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	2b01      	cmp	r3, #1
 800831c:	d135      	bne.n	800838a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	330c      	adds	r3, #12
 800832a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	e853 3f00 	ldrex	r3, [r3]
 8008332:	613b      	str	r3, [r7, #16]
   return(result);
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f023 0310 	bic.w	r3, r3, #16
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008344:	623a      	str	r2, [r7, #32]
 8008346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	69f9      	ldr	r1, [r7, #28]
 800834a:	6a3a      	ldr	r2, [r7, #32]
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	61bb      	str	r3, [r7, #24]
   return(result);
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e5      	bne.n	8008324 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	2b10      	cmp	r3, #16
 8008364:	d10a      	bne.n	800837c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fdc0 	bl	8007f08 <HAL_UARTEx_RxEventCallback>
 8008388:	e002      	b.n	8008390 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fd fff4 	bl	8006378 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e002      	b.n	800839a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	e000      	b.n	800839a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008398:	2302      	movs	r3, #2
  }
}
 800839a:	4618      	mov	r0, r3
 800839c:	3730      	adds	r7, #48	; 0x30
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80083de:	f023 030c 	bic.w	r3, r3, #12
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6812      	ldr	r2, [r2, #0]
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	430b      	orrs	r3, r1
 80083ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	699a      	ldr	r2, [r3, #24]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a2c      	ldr	r2, [pc, #176]	; (80084b8 <UART_SetConfig+0x114>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d103      	bne.n	8008414 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800840c:	f7ff f9ae 	bl	800776c <HAL_RCC_GetPCLK2Freq>
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	e002      	b.n	800841a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008414:	f7ff f996 	bl	8007744 <HAL_RCC_GetPCLK1Freq>
 8008418:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009a      	lsls	r2, r3, #2
 8008424:	441a      	add	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008430:	4a22      	ldr	r2, [pc, #136]	; (80084bc <UART_SetConfig+0x118>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	0119      	lsls	r1, r3, #4
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009a      	lsls	r2, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008450:	4b1a      	ldr	r3, [pc, #104]	; (80084bc <UART_SetConfig+0x118>)
 8008452:	fba3 0302 	umull	r0, r3, r3, r2
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	2064      	movs	r0, #100	; 0x64
 800845a:	fb00 f303 	mul.w	r3, r0, r3
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	3332      	adds	r3, #50	; 0x32
 8008464:	4a15      	ldr	r2, [pc, #84]	; (80084bc <UART_SetConfig+0x118>)
 8008466:	fba2 2303 	umull	r2, r3, r2, r3
 800846a:	095b      	lsrs	r3, r3, #5
 800846c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008470:	4419      	add	r1, r3
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009a      	lsls	r2, r3, #2
 800847c:	441a      	add	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	fbb2 f2f3 	udiv	r2, r2, r3
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <UART_SetConfig+0x118>)
 800848a:	fba3 0302 	umull	r0, r3, r3, r2
 800848e:	095b      	lsrs	r3, r3, #5
 8008490:	2064      	movs	r0, #100	; 0x64
 8008492:	fb00 f303 	mul.w	r3, r0, r3
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	3332      	adds	r3, #50	; 0x32
 800849c:	4a07      	ldr	r2, [pc, #28]	; (80084bc <UART_SetConfig+0x118>)
 800849e:	fba2 2303 	umull	r2, r3, r2, r3
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	f003 020f 	and.w	r2, r3, #15
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	440a      	add	r2, r1
 80084ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	40013800 	.word	0x40013800
 80084bc:	51eb851f 	.word	0x51eb851f

080084c0 <memset>:
 80084c0:	4603      	mov	r3, r0
 80084c2:	4402      	add	r2, r0
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d100      	bne.n	80084ca <memset+0xa>
 80084c8:	4770      	bx	lr
 80084ca:	f803 1b01 	strb.w	r1, [r3], #1
 80084ce:	e7f9      	b.n	80084c4 <memset+0x4>

080084d0 <__libc_init_array>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	2600      	movs	r6, #0
 80084d4:	4d0c      	ldr	r5, [pc, #48]	; (8008508 <__libc_init_array+0x38>)
 80084d6:	4c0d      	ldr	r4, [pc, #52]	; (800850c <__libc_init_array+0x3c>)
 80084d8:	1b64      	subs	r4, r4, r5
 80084da:	10a4      	asrs	r4, r4, #2
 80084dc:	42a6      	cmp	r6, r4
 80084de:	d109      	bne.n	80084f4 <__libc_init_array+0x24>
 80084e0:	f000 f81a 	bl	8008518 <_init>
 80084e4:	2600      	movs	r6, #0
 80084e6:	4d0a      	ldr	r5, [pc, #40]	; (8008510 <__libc_init_array+0x40>)
 80084e8:	4c0a      	ldr	r4, [pc, #40]	; (8008514 <__libc_init_array+0x44>)
 80084ea:	1b64      	subs	r4, r4, r5
 80084ec:	10a4      	asrs	r4, r4, #2
 80084ee:	42a6      	cmp	r6, r4
 80084f0:	d105      	bne.n	80084fe <__libc_init_array+0x2e>
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f8:	4798      	blx	r3
 80084fa:	3601      	adds	r6, #1
 80084fc:	e7ee      	b.n	80084dc <__libc_init_array+0xc>
 80084fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008502:	4798      	blx	r3
 8008504:	3601      	adds	r6, #1
 8008506:	e7f2      	b.n	80084ee <__libc_init_array+0x1e>
 8008508:	08009d70 	.word	0x08009d70
 800850c:	08009d70 	.word	0x08009d70
 8008510:	08009d70 	.word	0x08009d70
 8008514:	08009d74 	.word	0x08009d74

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
