
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007998  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001808  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009388  08009388  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009388  08009388  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000010  080093a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080093a0  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fba  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b8c  00000000  00000000  00029036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002abc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000824  00000000  00000000  0002b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197b1  00000000  00000000  0002be7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c5b0  00000000  00000000  0004562d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095ef1  00000000  00000000  00051bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c2c  00000000  00000000  000e7ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ea6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08007b68 	.word	0x08007b68

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08007b68 	.word	0x08007b68

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	; 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	; 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_GPIO_Init+0x74>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <MX_GPIO_Init+0x74>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_GPIO_Init+0x74>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_GPIO_Init+0x74>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <MX_GPIO_Init+0x74>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_GPIO_Init+0x74>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8000888:	2301      	movs	r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_GPIO_Init+0x78>)
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000890:	2302      	movs	r3, #2
 8000892:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	4619      	mov	r1, r3
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_GPIO_Init+0x7c>)
 800089c:	f005 ff64 	bl	8006768 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	2006      	movs	r0, #6
 80008a6:	f005 ff28 	bl	80066fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008aa:	2006      	movs	r0, #6
 80008ac:	f005 ff41 	bl	8006732 <HAL_NVIC_EnableIRQ>

}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	10110000 	.word	0x10110000
 80008c0:	40010800 	.word	0x40010800

080008c4 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <LCD_WR_REG+0x40>)
 80008d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d4:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <LCD_WR_REG+0x40>)
 80008d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008dc:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <LCD_WR_REG+0x44>)
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <LCD_WR_REG+0x40>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <LCD_WR_REG+0x40>)
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <LCD_WR_REG+0x40>)
 80008f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f6:	611a      	str	r2, [r3, #16]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40011000 	.word	0x40011000
 8000908:	40010c00 	.word	0x40010c00

0800090c <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <LCD_WR_DATAX+0x40>)
 8000918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091c:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <LCD_WR_DATAX+0x40>)
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LCD_WR_DATAX+0x44>)
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <LCD_WR_DATAX+0x40>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <LCD_WR_DATAX+0x40>)
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <LCD_WR_DATAX+0x40>)
 800093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093e:	611a      	str	r2, [r3, #16]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40011000 	.word	0x40011000
 8000950:	40010c00 	.word	0x40010c00

08000954 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <LCD_RD_DATA+0x7c>)
 800095c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000960:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <LCD_RD_DATA+0x7c>)
 8000964:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000968:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <LCD_RD_DATA+0x7c>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <LCD_RD_DATA+0x80>)
 8000972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000976:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <LCD_RD_DATA+0x80>)
 800097a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097e:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <LCD_RD_DATA+0x80>)
 8000982:	2240      	movs	r2, #64	; 0x40
 8000984:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <LCD_RD_DATA+0x84>)
 8000988:	889b      	ldrh	r3, [r3, #4]
 800098a:	f648 1289 	movw	r2, #35209	; 0x8989
 800098e:	4293      	cmp	r3, r2
 8000990:	d102      	bne.n	8000998 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000992:	2001      	movs	r0, #1
 8000994:	f005 fdb6 	bl	8006504 <HAL_Delay>
	t = DATAIN
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <LCD_RD_DATA+0x7c>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <LCD_RD_DATA+0x80>)
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <LCD_RD_DATA+0x80>)
 80009a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009aa:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <LCD_RD_DATA+0x7c>)
 80009ae:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80009b2:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <LCD_RD_DATA+0x7c>)
 80009b6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80009ba:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <LCD_RD_DATA+0x7c>)
 80009be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c2:	60da      	str	r2, [r3, #12]
	return t;
 80009c4:	88fb      	ldrh	r3, [r7, #6]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010c00 	.word	0x40010c00
 80009d4:	40011000 	.word	0x40011000
 80009d8:	20000030 	.word	0x20000030

080009dc <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	80fb      	strh	r3, [r7, #6]
 80009e8:	4613      	mov	r3, r2
 80009ea:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff68 	bl	80008c4 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <LCD_WriteReg+0x4c>)
 80009f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009fa:	611a      	str	r2, [r3, #16]
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <LCD_WriteReg+0x4c>)
 80009fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <LCD_WriteReg+0x50>)
 8000a06:	88bb      	ldrh	r3, [r7, #4]
 8000a08:	60d3      	str	r3, [r2, #12]
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <LCD_WriteReg+0x4c>)
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <LCD_WriteReg+0x4c>)
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <LCD_WriteReg+0x4c>)
 8000a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1c:	611a      	str	r2, [r3, #16]
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff41 	bl	80008c4 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000a42:	f7ff ff87 	bl	8000954 <LCD_RD_DATA>
 8000a46:	4603      	mov	r3, r0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <LCD_WriteRAM_Prepare+0x14>)
 8000a56:	891b      	ldrh	r3, [r3, #8]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff33 	bl	80008c4 <LCD_WR_REG>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000030 	.word	0x20000030

08000a68 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	460a      	mov	r2, r1
 8000a72:	80fb      	strh	r3, [r7, #6]
 8000a74:	4613      	mov	r3, r2
 8000a76:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000a78:	4b73      	ldr	r3, [pc, #460]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000a7a:	889b      	ldrh	r3, [r3, #4]
 8000a7c:	f249 3241 	movw	r2, #37697	; 0x9341
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d005      	beq.n	8000a90 <LCD_SetCursor+0x28>
 8000a84:	4b70      	ldr	r3, [pc, #448]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000a86:	889b      	ldrh	r3, [r3, #4]
 8000a88:	f245 3210 	movw	r2, #21264	; 0x5310
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d164      	bne.n	8000b5a <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000a90:	4b6d      	ldr	r3, [pc, #436]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000a92:	895b      	ldrh	r3, [r3, #10]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff15 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000a9a:	4b6c      	ldr	r3, [pc, #432]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	4b6a      	ldr	r3, [pc, #424]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b67      	ldr	r3, [pc, #412]	; (8000c50 <LCD_SetCursor+0x1e8>)
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	4b65      	ldr	r3, [pc, #404]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	4b64      	ldr	r3, [pc, #400]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	4b62      	ldr	r3, [pc, #392]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000ac8:	4b60      	ldr	r3, [pc, #384]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	4b5e      	ldr	r3, [pc, #376]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	4a5d      	ldr	r2, [pc, #372]	; (8000c50 <LCD_SetCursor+0x1e8>)
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	60d3      	str	r3, [r2, #12]
 8000ae0:	4b5a      	ldr	r3, [pc, #360]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	615a      	str	r2, [r3, #20]
 8000ae6:	4b59      	ldr	r3, [pc, #356]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	4b57      	ldr	r3, [pc, #348]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000af4:	4b54      	ldr	r3, [pc, #336]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fee3 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000afe:	4b53      	ldr	r3, [pc, #332]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	4b51      	ldr	r3, [pc, #324]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <LCD_SetCursor+0x1e8>)
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	4b4b      	ldr	r3, [pc, #300]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	4b49      	ldr	r3, [pc, #292]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000b2c:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	4a44      	ldr	r2, [pc, #272]	; (8000c50 <LCD_SetCursor+0x1e8>)
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	60d3      	str	r3, [r2, #12]
 8000b44:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	4b40      	ldr	r3, [pc, #256]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	4b3e      	ldr	r3, [pc, #248]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b56:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000b58:	e248      	b.n	8000fec <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000b5c:	889b      	ldrh	r3, [r3, #4]
 8000b5e:	f646 0204 	movw	r2, #26628	; 0x6804
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d176      	bne.n	8000c54 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000b66:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000b68:	799b      	ldrb	r3, [r3, #6]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d106      	bne.n	8000b7c <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000b70:	881a      	ldrh	r2, [r3, #0]
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000b7e:	895b      	ldrh	r3, [r3, #10]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe9f 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <LCD_SetCursor+0x1e8>)
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <LCD_SetCursor+0x1e8>)
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	60d3      	str	r3, [r2, #12]
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bde:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <LCD_SetCursor+0x1e0>)
 8000be2:	899b      	ldrh	r3, [r3, #12]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe6d 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <LCD_SetCursor+0x1e8>)
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <LCD_SetCursor+0x1e8>)
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	60d3      	str	r3, [r2, #12]
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <LCD_SetCursor+0x1e4>)
 8000c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c42:	611a      	str	r2, [r3, #16]
}
 8000c44:	e1d2      	b.n	8000fec <LCD_SetCursor+0x584>
 8000c46:	bf00      	nop
 8000c48:	20000030 	.word	0x20000030
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000c54:	4b99      	ldr	r3, [pc, #612]	; (8000ebc <LCD_SetCursor+0x454>)
 8000c56:	889b      	ldrh	r3, [r3, #4]
 8000c58:	f641 1263 	movw	r2, #6499	; 0x1963
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	f040 8133 	bne.w	8000ec8 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000c62:	4b96      	ldr	r3, [pc, #600]	; (8000ebc <LCD_SetCursor+0x454>)
 8000c64:	799b      	ldrb	r3, [r3, #6]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d163      	bne.n	8000d32 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000c6a:	4b94      	ldr	r3, [pc, #592]	; (8000ebc <LCD_SetCursor+0x454>)
 8000c6c:	881a      	ldrh	r2, [r3, #0]
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3b01      	subs	r3, #1
 8000c76:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000c78:	4b90      	ldr	r3, [pc, #576]	; (8000ebc <LCD_SetCursor+0x454>)
 8000c7a:	895b      	ldrh	r3, [r3, #10]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe21 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000c82:	4b8f      	ldr	r3, [pc, #572]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c88:	611a      	str	r2, [r3, #16]
 8000c8a:	4b8d      	ldr	r3, [pc, #564]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	4b8c      	ldr	r3, [pc, #560]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	4b89      	ldr	r3, [pc, #548]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	615a      	str	r2, [r3, #20]
 8000c9e:	4b88      	ldr	r3, [pc, #544]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	4b86      	ldr	r3, [pc, #536]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000caa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000cac:	4b84      	ldr	r3, [pc, #528]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	4b82      	ldr	r3, [pc, #520]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	4b81      	ldr	r3, [pc, #516]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	4b7f      	ldr	r3, [pc, #508]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	4b7d      	ldr	r3, [pc, #500]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	4b7c      	ldr	r3, [pc, #496]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000cd6:	4b7a      	ldr	r3, [pc, #488]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	4b78      	ldr	r3, [pc, #480]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b75      	ldr	r3, [pc, #468]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	4b73      	ldr	r3, [pc, #460]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	4b70      	ldr	r3, [pc, #448]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d02:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000d04:	4b6e      	ldr	r3, [pc, #440]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	4b6c      	ldr	r3, [pc, #432]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4a6b      	ldr	r2, [pc, #428]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	60d3      	str	r3, [r2, #12]
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	4b67      	ldr	r3, [pc, #412]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	e061      	b.n	8000df6 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000d32:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <LCD_SetCursor+0x454>)
 8000d34:	895b      	ldrh	r3, [r3, #10]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fdc4 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000d3c:	4b60      	ldr	r3, [pc, #384]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	4b5e      	ldr	r3, [pc, #376]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	4b5a      	ldr	r3, [pc, #360]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	4b58      	ldr	r3, [pc, #352]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000d6a:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4a51      	ldr	r2, [pc, #324]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	60d3      	str	r3, [r2, #12]
 8000d82:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000d96:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <LCD_SetCursor+0x454>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	121a      	asrs	r2, r3, #8
 8000dae:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	4b40      	ldr	r3, [pc, #256]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000dc6:	4b3e      	ldr	r3, [pc, #248]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	4b3c      	ldr	r3, [pc, #240]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd4:	615a      	str	r2, [r3, #20]
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <LCD_SetCursor+0x454>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	60d3      	str	r3, [r2, #12]
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <LCD_SetCursor+0x454>)
 8000df8:	899b      	ldrh	r3, [r3, #12]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fd62 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	615a      	str	r2, [r3, #20]
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	60d3      	str	r3, [r2, #12]
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <LCD_SetCursor+0x454>)
 8000e6c:	885b      	ldrh	r3, [r3, #2]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	121a      	asrs	r2, r3, #8
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e78:	2280      	movs	r2, #128	; 0x80
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e98:	615a      	str	r2, [r3, #20]
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <LCD_SetCursor+0x454>)
 8000e9c:	885b      	ldrh	r3, [r3, #2]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <LCD_SetCursor+0x45c>)
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	60d3      	str	r3, [r2, #12]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	615a      	str	r2, [r3, #20]
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <LCD_SetCursor+0x458>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	611a      	str	r2, [r3, #16]
}
 8000eba:	e097      	b.n	8000fec <LCD_SetCursor+0x584>
 8000ebc:	20000030 	.word	0x20000030
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000eca:	889b      	ldrh	r3, [r3, #4]
 8000ecc:	f245 5210 	movw	r2, #21776	; 0x5510
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d172      	bne.n	8000fba <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000ed4:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000ed6:	895b      	ldrh	r3, [r3, #10]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fcf3 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000ede:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	4b44      	ldr	r3, [pc, #272]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <LCD_SetCursor+0x594>)
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	4b3c      	ldr	r3, [pc, #240]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000f0c:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000f0e:	895b      	ldrh	r3, [r3, #10]
 8000f10:	3301      	adds	r3, #1
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fcd5 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f20:	611a      	str	r2, [r3, #16]
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4a33      	ldr	r2, [pc, #204]	; (8000ffc <LCD_SetCursor+0x594>)
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	60d3      	str	r3, [r2, #12]
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f44:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000f48:	899b      	ldrh	r3, [r3, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fcba 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <LCD_SetCursor+0x594>)
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000f80:	899b      	ldrh	r3, [r3, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fc9c 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	88bb      	ldrh	r3, [r7, #4]
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <LCD_SetCursor+0x594>)
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	60d3      	str	r3, [r2, #12]
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <LCD_SetCursor+0x590>)
 8000fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb6:	611a      	str	r2, [r3, #16]
}
 8000fb8:	e018      	b.n	8000fec <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000fbc:	799b      	ldrb	r3, [r3, #6]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000fd2:	895b      	ldrh	r3, [r3, #10]
 8000fd4:	88fa      	ldrh	r2, [r7, #6]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fcff 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <LCD_SetCursor+0x58c>)
 8000fe0:	899b      	ldrh	r3, [r3, #12]
 8000fe2:	88ba      	ldrh	r2, [r7, #4]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fcf8 	bl	80009dc <LCD_WriteReg>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000030 	.word	0x20000030
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8001012:	4b78      	ldr	r3, [pc, #480]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 8001014:	799b      	ldrb	r3, [r3, #6]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10b      	bne.n	8001032 <LCD_Scan_Dir+0x32>
 800101a:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001022:	4293      	cmp	r3, r2
 8001024:	d005      	beq.n	8001032 <LCD_Scan_Dir+0x32>
 8001026:	4b73      	ldr	r3, [pc, #460]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 8001028:	889b      	ldrh	r3, [r3, #4]
 800102a:	f641 1263 	movw	r2, #6499	; 0x1963
 800102e:	4293      	cmp	r3, r2
 8001030:	d109      	bne.n	8001046 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001032:	4b70      	ldr	r3, [pc, #448]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 8001034:	799b      	ldrb	r3, [r3, #6]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d134      	bne.n	80010a4 <LCD_Scan_Dir+0xa4>
 800103a:	4b6e      	ldr	r3, [pc, #440]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001042:	4293      	cmp	r3, r2
 8001044:	d12e      	bne.n	80010a4 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b07      	cmp	r3, #7
 800104a:	d82b      	bhi.n	80010a4 <LCD_Scan_Dir+0xa4>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <LCD_Scan_Dir+0x54>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001075 	.word	0x08001075
 8001058:	0800107b 	.word	0x0800107b
 800105c:	08001081 	.word	0x08001081
 8001060:	08001087 	.word	0x08001087
 8001064:	0800108d 	.word	0x0800108d
 8001068:	08001093 	.word	0x08001093
 800106c:	08001099 	.word	0x08001099
 8001070:	0800109f 	.word	0x0800109f
		{
		case 0:
			dir = 6;
 8001074:	2306      	movs	r3, #6
 8001076:	71fb      	strb	r3, [r7, #7]
			break;
 8001078:	e014      	b.n	80010a4 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 800107a:	2307      	movs	r3, #7
 800107c:	71fb      	strb	r3, [r7, #7]
			break;
 800107e:	e011      	b.n	80010a4 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001080:	2304      	movs	r3, #4
 8001082:	71fb      	strb	r3, [r7, #7]
			break;
 8001084:	e00e      	b.n	80010a4 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8001086:	2305      	movs	r3, #5
 8001088:	71fb      	strb	r3, [r7, #7]
			break;
 800108a:	e00b      	b.n	80010a4 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	71fb      	strb	r3, [r7, #7]
			break;
 8001090:	e008      	b.n	80010a4 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	71fb      	strb	r3, [r7, #7]
			break;
 8001096:	e005      	b.n	80010a4 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001098:	2303      	movs	r3, #3
 800109a:	71fb      	strb	r3, [r7, #7]
			break;
 800109c:	e002      	b.n	80010a4 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	71fb      	strb	r3, [r7, #7]
			break;
 80010a2:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80010a4:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80010a6:	889b      	ldrh	r3, [r3, #4]
 80010a8:	f249 3241 	movw	r2, #37697	; 0x9341
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d018      	beq.n	80010e2 <LCD_Scan_Dir+0xe2>
 80010b0:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80010b2:	889b      	ldrh	r3, [r3, #4]
 80010b4:	f646 0204 	movw	r2, #26628	; 0x6804
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d012      	beq.n	80010e2 <LCD_Scan_Dir+0xe2>
 80010bc:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	f245 3210 	movw	r2, #21264	; 0x5310
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d00c      	beq.n	80010e2 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80010ca:	889b      	ldrh	r3, [r3, #4]
 80010cc:	f245 5210 	movw	r2, #21776	; 0x5510
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d006      	beq.n	80010e2 <LCD_Scan_Dir+0xe2>
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80010d6:	889b      	ldrh	r3, [r3, #4]
 80010d8:	f641 1263 	movw	r2, #6499	; 0x1963
 80010dc:	4293      	cmp	r3, r2
 80010de:	f040 8250 	bne.w	8001582 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	d836      	bhi.n	8001156 <LCD_Scan_Dir+0x156>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <LCD_Scan_Dir+0xf0>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001157 	.word	0x08001157
 80010f4:	08001111 	.word	0x08001111
 80010f8:	0800111b 	.word	0x0800111b
 80010fc:	08001125 	.word	0x08001125
 8001100:	0800112f 	.word	0x0800112f
 8001104:	08001139 	.word	0x08001139
 8001108:	08001143 	.word	0x08001143
 800110c:	0800114d 	.word	0x0800114d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001116:	81fb      	strh	r3, [r7, #14]
			break;
 8001118:	e01d      	b.n	8001156 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001120:	81fb      	strh	r3, [r7, #14]
			break;
 8001122:	e018      	b.n	8001156 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001124:	89fb      	ldrh	r3, [r7, #14]
 8001126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800112a:	81fb      	strh	r3, [r7, #14]
			break;
 800112c:	e013      	b.n	8001156 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	f043 0320 	orr.w	r3, r3, #32
 8001134:	81fb      	strh	r3, [r7, #14]
			break;
 8001136:	e00e      	b.n	8001156 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001138:	89fb      	ldrh	r3, [r7, #14]
 800113a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800113e:	81fb      	strh	r3, [r7, #14]
			break;
 8001140:	e009      	b.n	8001156 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001142:	89fb      	ldrh	r3, [r7, #14]
 8001144:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001148:	81fb      	strh	r3, [r7, #14]
			break;
 800114a:	e004      	b.n	8001156 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001152:	81fb      	strh	r3, [r7, #14]
			break;
 8001154:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 8001158:	889b      	ldrh	r3, [r3, #4]
 800115a:	f245 5210 	movw	r2, #21776	; 0x5510
 800115e:	4293      	cmp	r3, r2
 8001160:	d103      	bne.n	800116a <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8001162:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001166:	81bb      	strh	r3, [r7, #12]
 8001168:	e001      	b.n	800116e <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800116a:	2336      	movs	r3, #54	; 0x36
 800116c:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	f245 3210 	movw	r2, #21264	; 0x5310
 8001176:	4293      	cmp	r3, r2
 8001178:	d00f      	beq.n	800119a <LCD_Scan_Dir+0x19a>
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 800117c:	889b      	ldrh	r3, [r3, #4]
 800117e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001182:	4293      	cmp	r3, r2
 8001184:	d009      	beq.n	800119a <LCD_Scan_Dir+0x19a>
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 8001188:	889b      	ldrh	r3, [r3, #4]
 800118a:	f641 1263 	movw	r2, #6499	; 0x1963
 800118e:	4293      	cmp	r3, r2
 8001190:	d003      	beq.n	800119a <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 800119c:	889b      	ldrh	r3, [r3, #4]
 800119e:	f646 0204 	movw	r2, #26628	; 0x6804
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d103      	bne.n	80011ae <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80011ae:	89fa      	ldrh	r2, [r7, #14]
 80011b0:	89bb      	ldrh	r3, [r7, #12]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fc11 	bl	80009dc <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80011bc:	889b      	ldrh	r3, [r3, #4]
 80011be:	f641 1263 	movw	r2, #6499	; 0x1963
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d028      	beq.n	8001218 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80011d6:	885b      	ldrh	r3, [r3, #2]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d21d      	bcs.n	8001218 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80011e4:	885a      	ldrh	r2, [r3, #2]
 80011e6:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80011e8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80011ea:	4a02      	ldr	r2, [pc, #8]	; (80011f4 <LCD_Scan_Dir+0x1f4>)
 80011ec:	897b      	ldrh	r3, [r7, #10]
 80011ee:	8053      	strh	r3, [r2, #2]
 80011f0:	e012      	b.n	8001218 <LCD_Scan_Dir+0x218>
 80011f2:	bf00      	nop
 80011f4:	20000030 	.word	0x20000030
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80011f8:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 80011fa:	881a      	ldrh	r2, [r3, #0]
 80011fc:	4b7e      	ldr	r3, [pc, #504]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 80011fe:	885b      	ldrh	r3, [r3, #2]
 8001200:	429a      	cmp	r2, r3
 8001202:	d909      	bls.n	8001218 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001204:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800120a:	4b7b      	ldr	r3, [pc, #492]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 800120c:	885a      	ldrh	r2, [r3, #2]
 800120e:	4b7a      	ldr	r3, [pc, #488]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 8001210:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001212:	4a79      	ldr	r2, [pc, #484]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 8001214:	897b      	ldrh	r3, [r7, #10]
 8001216:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001218:	4b77      	ldr	r3, [pc, #476]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001220:	4293      	cmp	r3, r2
 8001222:	f040 80ef 	bne.w	8001404 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001226:	4b74      	ldr	r3, [pc, #464]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 8001228:	895b      	ldrh	r3, [r3, #10]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fb4a 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001230:	4b72      	ldr	r3, [pc, #456]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	4b70      	ldr	r3, [pc, #448]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800123a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	4b6f      	ldr	r3, [pc, #444]	; (8001400 <LCD_Scan_Dir+0x400>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001258:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 800125a:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 800125c:	895b      	ldrh	r3, [r3, #10]
 800125e:	3301      	adds	r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fb2e 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001268:	4b64      	ldr	r3, [pc, #400]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	4b62      	ldr	r3, [pc, #392]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	4b61      	ldr	r3, [pc, #388]	; (8001400 <LCD_Scan_Dir+0x400>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800128c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001290:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001292:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 8001294:	895b      	ldrh	r3, [r3, #10]
 8001296:	3302      	adds	r3, #2
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fb12 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80012a0:	4b56      	ldr	r3, [pc, #344]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80012a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	4b54      	ldr	r3, [pc, #336]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80012aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	121a      	asrs	r2, r3, #8
 80012b8:	4b51      	ldr	r3, [pc, #324]	; (8001400 <LCD_Scan_Dir+0x400>)
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	4b4f      	ldr	r3, [pc, #316]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	4b4c      	ldr	r3, [pc, #304]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80012ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ce:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80012d0:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 80012d2:	895b      	ldrh	r3, [r3, #10]
 80012d4:	3303      	adds	r3, #3
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff faf3 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80012e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	4b45      	ldr	r3, [pc, #276]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80012e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	4a42      	ldr	r2, [pc, #264]	; (8001400 <LCD_Scan_Dir+0x400>)
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	60d3      	str	r3, [r2, #12]
 80012fa:	4b40      	ldr	r3, [pc, #256]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800130e:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 8001310:	899b      	ldrh	r3, [r3, #12]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fad6 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800131a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <LCD_Scan_Dir+0x400>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800133c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001340:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 8001344:	899b      	ldrh	r3, [r3, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	b29b      	uxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff faba 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800135a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <LCD_Scan_Dir+0x400>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	615a      	str	r2, [r3, #20]
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001378:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 800137c:	899b      	ldrh	r3, [r3, #12]
 800137e:	3302      	adds	r3, #2
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fa9e 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 800138a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 8001392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	3b01      	subs	r3, #1
 800139e:	121a      	asrs	r2, r3, #8
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <LCD_Scan_Dir+0x400>)
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80013b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b6:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 80013ba:	899b      	ldrh	r3, [r3, #12]
 80013bc:	3303      	adds	r3, #3
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fa7f 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80013c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <LCD_Scan_Dir+0x3f8>)
 80013d8:	885b      	ldrh	r3, [r3, #2]
 80013da:	3b01      	subs	r3, #1
 80013dc:	4a08      	ldr	r2, [pc, #32]	; (8001400 <LCD_Scan_Dir+0x400>)
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	60d3      	str	r3, [r2, #12]
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	4b03      	ldr	r3, [pc, #12]	; (80013fc <LCD_Scan_Dir+0x3fc>)
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80013f6:	e10b      	b.n	8001610 <LCD_Scan_Dir+0x610>
 80013f8:	20000030 	.word	0x20000030
 80013fc:	40011000 	.word	0x40011000
 8001400:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001404:	4b84      	ldr	r3, [pc, #528]	; (8001618 <LCD_Scan_Dir+0x618>)
 8001406:	895b      	ldrh	r3, [r3, #10]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fa5b 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800140e:	4b83      	ldr	r3, [pc, #524]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	4b81      	ldr	r3, [pc, #516]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	4b80      	ldr	r3, [pc, #512]	; (8001620 <LCD_Scan_Dir+0x620>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	4b7d      	ldr	r3, [pc, #500]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <LCD_Scan_Dir+0x61c>)
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001436:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001438:	4b78      	ldr	r3, [pc, #480]	; (800161c <LCD_Scan_Dir+0x61c>)
 800143a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	4b76      	ldr	r3, [pc, #472]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	4b75      	ldr	r3, [pc, #468]	; (8001620 <LCD_Scan_Dir+0x620>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	4b73      	ldr	r3, [pc, #460]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	4b71      	ldr	r3, [pc, #452]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	4b70      	ldr	r3, [pc, #448]	; (800161c <LCD_Scan_Dir+0x61c>)
 800145c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001460:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	4b6c      	ldr	r3, [pc, #432]	; (800161c <LCD_Scan_Dir+0x61c>)
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	4b69      	ldr	r3, [pc, #420]	; (8001618 <LCD_Scan_Dir+0x618>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	3b01      	subs	r3, #1
 8001478:	121a      	asrs	r2, r3, #8
 800147a:	4b69      	ldr	r3, [pc, #420]	; (8001620 <LCD_Scan_Dir+0x620>)
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	4b65      	ldr	r3, [pc, #404]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <LCD_Scan_Dir+0x61c>)
 800148c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001490:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001492:	4b62      	ldr	r3, [pc, #392]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	4b60      	ldr	r3, [pc, #384]	; (800161c <LCD_Scan_Dir+0x61c>)
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <LCD_Scan_Dir+0x618>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	4a5d      	ldr	r2, [pc, #372]	; (8001620 <LCD_Scan_Dir+0x620>)
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	60d3      	str	r3, [r2, #12]
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	4b59      	ldr	r3, [pc, #356]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	4b58      	ldr	r3, [pc, #352]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80014c2:	4b55      	ldr	r3, [pc, #340]	; (8001618 <LCD_Scan_Dir+0x618>)
 80014c4:	899b      	ldrh	r3, [r3, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f9fc 	bl	80008c4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014cc:	4b53      	ldr	r3, [pc, #332]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	4b51      	ldr	r3, [pc, #324]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	4b50      	ldr	r3, [pc, #320]	; (8001620 <LCD_Scan_Dir+0x620>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	4b4e      	ldr	r3, [pc, #312]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	4b4c      	ldr	r3, [pc, #304]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <LCD_Scan_Dir+0x61c>)
 80014f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fc:	611a      	str	r2, [r3, #16]
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <LCD_Scan_Dir+0x620>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <LCD_Scan_Dir+0x61c>)
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	4b40      	ldr	r3, [pc, #256]	; (800161c <LCD_Scan_Dir+0x61c>)
 800151a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001520:	4b3e      	ldr	r3, [pc, #248]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <LCD_Scan_Dir+0x61c>)
 800152a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	4b39      	ldr	r3, [pc, #228]	; (8001618 <LCD_Scan_Dir+0x618>)
 8001532:	885b      	ldrh	r3, [r3, #2]
 8001534:	3b01      	subs	r3, #1
 8001536:	121a      	asrs	r2, r3, #8
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <LCD_Scan_Dir+0x620>)
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	4b37      	ldr	r3, [pc, #220]	; (800161c <LCD_Scan_Dir+0x61c>)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	615a      	str	r2, [r3, #20]
 8001542:	4b36      	ldr	r3, [pc, #216]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <LCD_Scan_Dir+0x61c>)
 800154a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <LCD_Scan_Dir+0x61c>)
 800155a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <LCD_Scan_Dir+0x618>)
 8001562:	885b      	ldrh	r3, [r3, #2]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <LCD_Scan_Dir+0x620>)
 8001568:	b2db      	uxtb	r3, r3
 800156a:	60d3      	str	r3, [r2, #12]
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <LCD_Scan_Dir+0x61c>)
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <LCD_Scan_Dir+0x61c>)
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <LCD_Scan_Dir+0x61c>)
 800157a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157e:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001580:	e046      	b.n	8001610 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b07      	cmp	r3, #7
 8001586:	d836      	bhi.n	80015f6 <LCD_Scan_Dir+0x5f6>
 8001588:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <LCD_Scan_Dir+0x590>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015b1 	.word	0x080015b1
 8001594:	080015bb 	.word	0x080015bb
 8001598:	080015c5 	.word	0x080015c5
 800159c:	080015f7 	.word	0x080015f7
 80015a0:	080015cf 	.word	0x080015cf
 80015a4:	080015d9 	.word	0x080015d9
 80015a8:	080015e3 	.word	0x080015e3
 80015ac:	080015ed 	.word	0x080015ed
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80015b0:	89fb      	ldrh	r3, [r7, #14]
 80015b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80015b6:	81fb      	strh	r3, [r7, #14]
			break;
 80015b8:	e01d      	b.n	80015f6 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	81fb      	strh	r3, [r7, #14]
			break;
 80015c2:	e018      	b.n	80015f6 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	f043 0320 	orr.w	r3, r3, #32
 80015ca:	81fb      	strh	r3, [r7, #14]
			break;
 80015cc:	e013      	b.n	80015f6 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80015d4:	81fb      	strh	r3, [r7, #14]
			break;
 80015d6:	e00e      	b.n	80015f6 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80015d8:	89fb      	ldrh	r3, [r7, #14]
 80015da:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80015de:	81fb      	strh	r3, [r7, #14]
			break;
 80015e0:	e009      	b.n	80015f6 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	f043 0318 	orr.w	r3, r3, #24
 80015e8:	81fb      	strh	r3, [r7, #14]
			break;
 80015ea:	e004      	b.n	80015f6 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	81fb      	strh	r3, [r7, #14]
			break;
 80015f4:	bf00      	nop
		}
		dirreg = 0X03;
 80015f6:	2303      	movs	r3, #3
 80015f8:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001600:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001602:	89fa      	ldrh	r2, [r7, #14]
 8001604:	89bb      	ldrh	r3, [r7, #12]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff f9e7 	bl	80009dc <LCD_WriteReg>
	}
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000030 	.word	0x20000030
 800161c:	40011000 	.word	0x40011000
 8001620:	40010c00 	.word	0x40010c00

08001624 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
 800162e:	460b      	mov	r3, r1
 8001630:	80bb      	strh	r3, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001636:	4b75      	ldr	r3, [pc, #468]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	f249 3241 	movw	r2, #37697	; 0x9341
 800163e:	4293      	cmp	r3, r2
 8001640:	d005      	beq.n	800164e <LCD_Fast_DrawPoint+0x2a>
 8001642:	4b72      	ldr	r3, [pc, #456]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 8001644:	889b      	ldrh	r3, [r3, #4]
 8001646:	f245 3210 	movw	r2, #21264	; 0x5310
 800164a:	4293      	cmp	r3, r2
 800164c:	d164      	bne.n	8001718 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 8001650:	895b      	ldrh	r3, [r3, #10]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f936 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001658:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 800165a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b69      	ldr	r3, [pc, #420]	; (8001814 <LCD_Fast_DrawPoint+0x1f0>)
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	4b65      	ldr	r3, [pc, #404]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	4b64      	ldr	r3, [pc, #400]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001684:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001686:	4b62      	ldr	r3, [pc, #392]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	4b60      	ldr	r3, [pc, #384]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	4a5e      	ldr	r2, [pc, #376]	; (8001814 <LCD_Fast_DrawPoint+0x1f0>)
 800169a:	b2db      	uxtb	r3, r3
 800169c:	60d3      	str	r3, [r2, #12]
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	4b59      	ldr	r3, [pc, #356]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80016b2:	4b56      	ldr	r3, [pc, #344]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 80016b4:	899b      	ldrh	r3, [r3, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f904 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80016bc:	4b54      	ldr	r3, [pc, #336]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	88bb      	ldrh	r3, [r7, #4]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b50      	ldr	r3, [pc, #320]	; (8001814 <LCD_Fast_DrawPoint+0x1f0>)
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	4b4b      	ldr	r3, [pc, #300]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80016ea:	4b49      	ldr	r3, [pc, #292]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	4a45      	ldr	r2, [pc, #276]	; (8001814 <LCD_Fast_DrawPoint+0x1f0>)
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	60d3      	str	r3, [r2, #12]
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	4b41      	ldr	r3, [pc, #260]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	4b40      	ldr	r3, [pc, #256]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	e1e6      	b.n	8001ae6 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 800171a:	889b      	ldrh	r3, [r3, #4]
 800171c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001720:	4293      	cmp	r3, r2
 8001722:	d179      	bne.n	8001818 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 8001726:	895b      	ldrh	r3, [r3, #10]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f8cb 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800172e:	4b38      	ldr	r3, [pc, #224]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b36      	ldr	r3, [pc, #216]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <LCD_Fast_DrawPoint+0x1f0>)
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	4b31      	ldr	r3, [pc, #196]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	611a      	str	r2, [r3, #16]
 8001754:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 800175e:	895b      	ldrh	r3, [r3, #10]
 8001760:	3301      	adds	r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff f8ad 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 800176c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <LCD_Fast_DrawPoint+0x1f0>)
 800177e:	b2db      	uxtb	r3, r3
 8001780:	60d3      	str	r3, [r2, #12]
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001794:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 8001798:	899b      	ldrh	r3, [r3, #12]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f892 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <LCD_Fast_DrawPoint+0x1f0>)
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017cc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <LCD_Fast_DrawPoint+0x1e8>)
 80017d0:	899b      	ldrh	r3, [r3, #12]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f874 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <LCD_Fast_DrawPoint+0x1f0>)
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	60d3      	str	r3, [r2, #12]
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <LCD_Fast_DrawPoint+0x1ec>)
 8001802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	e16d      	b.n	8001ae6 <LCD_Fast_DrawPoint+0x4c2>
 800180a:	bf00      	nop
 800180c:	20000030 	.word	0x20000030
 8001810:	40011000 	.word	0x40011000
 8001814:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <LCD_Fast_DrawPoint+0x398>)
 800181a:	889b      	ldrh	r3, [r3, #4]
 800181c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001820:	4293      	cmp	r3, r2
 8001822:	f040 80d1 	bne.w	80019c8 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001826:	4b65      	ldr	r3, [pc, #404]	; (80019bc <LCD_Fast_DrawPoint+0x398>)
 8001828:	799b      	ldrb	r3, [r3, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <LCD_Fast_DrawPoint+0x398>)
 8001830:	881a      	ldrh	r2, [r3, #0]
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b29b      	uxth	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800183c:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <LCD_Fast_DrawPoint+0x398>)
 800183e:	895b      	ldrh	r3, [r3, #10]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f83f 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001846:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <LCD_Fast_DrawPoint+0x3a0>)
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	615a      	str	r2, [r3, #20]
 8001866:	4b56      	ldr	r3, [pc, #344]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800186e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001872:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001874:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800187e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4a4f      	ldr	r2, [pc, #316]	; (80019c4 <LCD_Fast_DrawPoint+0x3a0>)
 8001888:	b2db      	uxtb	r3, r3
 800188a:	60d3      	str	r3, [r2, #12]
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800189a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 80018a0:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <LCD_Fast_DrawPoint+0x3a0>)
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80018ce:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	4a38      	ldr	r2, [pc, #224]	; (80019c4 <LCD_Fast_DrawPoint+0x3a0>)
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	60d3      	str	r3, [r2, #12]
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80018f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <LCD_Fast_DrawPoint+0x398>)
 80018fc:	899b      	ldrh	r3, [r3, #12]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe ffe0 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001904:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800190e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <LCD_Fast_DrawPoint+0x3a0>)
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800192c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001930:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800193c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <LCD_Fast_DrawPoint+0x3a0>)
 8001946:	b2db      	uxtb	r3, r3
 8001948:	60d3      	str	r3, [r2, #12]
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196c:	615a      	str	r2, [r3, #20]
 800196e:	88bb      	ldrh	r3, [r7, #4]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <LCD_Fast_DrawPoint+0x3a0>)
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	615a      	str	r2, [r3, #20]
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 800198e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 8001996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199a:	615a      	str	r2, [r3, #20]
 800199c:	88bb      	ldrh	r3, [r7, #4]
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <LCD_Fast_DrawPoint+0x3a0>)
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	60d3      	str	r3, [r2, #12]
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <LCD_Fast_DrawPoint+0x39c>)
 80019b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	e095      	b.n	8001ae6 <LCD_Fast_DrawPoint+0x4c2>
 80019ba:	bf00      	nop
 80019bc:	20000030 	.word	0x20000030
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 80019c8:	4b5e      	ldr	r3, [pc, #376]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 80019ca:	889b      	ldrh	r3, [r3, #4]
 80019cc:	f646 0204 	movw	r2, #26628	; 0x6804
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d16f      	bne.n	8001ab4 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 80019d4:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 80019d6:	799b      	ldrb	r3, [r3, #6]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 80019dc:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 80019de:	881a      	ldrh	r2, [r3, #0]
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 80019ec:	895b      	ldrh	r3, [r3, #10]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe ff68 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80019f4:	4b54      	ldr	r3, [pc, #336]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 80019f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 80019fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a02:	615a      	str	r2, [r3, #20]
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <LCD_Fast_DrawPoint+0x528>)
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	611a      	str	r2, [r3, #16]
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	615a      	str	r2, [r3, #20]
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4a45      	ldr	r2, [pc, #276]	; (8001b4c <LCD_Fast_DrawPoint+0x528>)
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	60d3      	str	r3, [r2, #12]
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 8001a50:	899b      	ldrh	r3, [r3, #12]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe ff36 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a58:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	88bb      	ldrh	r3, [r7, #4]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <LCD_Fast_DrawPoint+0x528>)
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	615a      	str	r2, [r3, #20]
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a84:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	4a2c      	ldr	r2, [pc, #176]	; (8001b4c <LCD_Fast_DrawPoint+0x528>)
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	60d3      	str	r3, [r2, #12]
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	615a      	str	r2, [r3, #20]
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	e018      	b.n	8001ae6 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001ab4:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 8001ab6:	799b      	ldrb	r3, [r3, #6]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 8001abe:	881a      	ldrh	r2, [r3, #0]
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 8001acc:	895b      	ldrh	r3, [r3, #10]
 8001ace:	88fa      	ldrh	r2, [r7, #6]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe ff82 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 8001ada:	899b      	ldrh	r3, [r3, #12]
 8001adc:	88ba      	ldrh	r2, [r7, #4]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe ff7b 	bl	80009dc <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aec:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af4:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <LCD_Fast_DrawPoint+0x520>)
 8001af8:	891a      	ldrh	r2, [r3, #8]
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <LCD_Fast_DrawPoint+0x528>)
 8001afc:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b10:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b20:	615a      	str	r2, [r3, #20]
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <LCD_Fast_DrawPoint+0x528>)
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	60d3      	str	r3, [r2, #12]
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <LCD_Fast_DrawPoint+0x524>)
 8001b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3a:	611a      	str	r2, [r3, #16]
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000030 	.word	0x20000030
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40010c00 	.word	0x40010c00

08001b50 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001b5a:	20be      	movs	r0, #190	; 0xbe
 8001b5c:	f7fe feb2 	bl	80008c4 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b66:	611a      	str	r2, [r3, #16]
 8001b68:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <LCD_SSD_BackLightSet+0x144>)
 8001b72:	2205      	movs	r2, #5
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b98:	615a      	str	r2, [r3, #20]
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fdc7 	bl	8000730 <__aeabi_i2d>
 8001ba2:	a339      	add	r3, pc, #228	; (adr r3, 8001c88 <LCD_SSD_BackLightSet+0x138>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fb46 	bl	8000238 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4c38      	ldr	r4, [pc, #224]	; (8001c94 <LCD_SSD_BackLightSet+0x144>)
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe fe25 	bl	8000804 <__aeabi_d2uiz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	60e3      	str	r3, [r4, #12]
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be0:	615a      	str	r2, [r3, #20]
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <LCD_SSD_BackLightSet+0x144>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	615a      	str	r2, [r3, #20]
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfa:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <LCD_SSD_BackLightSet+0x144>)
 8001c0e:	22ff      	movs	r2, #255	; 0xff
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	615a      	str	r2, [r3, #20]
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c24:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	615a      	str	r2, [r3, #20]
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <LCD_SSD_BackLightSet+0x144>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <LCD_SSD_BackLightSet+0x144>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <LCD_SSD_BackLightSet+0x140>)
 8001c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c78:	611a      	str	r2, [r3, #16]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	f3af 8000 	nop.w
 8001c88:	66666666 	.word	0x66666666
 8001c8c:	40046666 	.word	0x40046666
 8001c90:	40011000 	.word	0x40011000
 8001c94:	40010c00 	.word	0x40010c00

08001c98 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d177      	bne.n	8001d98 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001ca8:	4b80      	ldr	r3, [pc, #512]	; (8001eac <LCD_Display_Dir+0x214>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001cae:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <LCD_Display_Dir+0x214>)
 8001cb0:	22f0      	movs	r2, #240	; 0xf0
 8001cb2:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001cb4:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <LCD_Display_Dir+0x214>)
 8001cb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cba:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cbc:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <LCD_Display_Dir+0x214>)
 8001cbe:	889b      	ldrh	r3, [r3, #4]
 8001cc0:	f249 3241 	movw	r2, #37697	; 0x9341
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00b      	beq.n	8001ce0 <LCD_Display_Dir+0x48>
 8001cc8:	4b78      	ldr	r3, [pc, #480]	; (8001eac <LCD_Display_Dir+0x214>)
 8001cca:	889b      	ldrh	r3, [r3, #4]
 8001ccc:	f646 0204 	movw	r2, #26628	; 0x6804
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d005      	beq.n	8001ce0 <LCD_Display_Dir+0x48>
 8001cd4:	4b75      	ldr	r3, [pc, #468]	; (8001eac <LCD_Display_Dir+0x214>)
 8001cd6:	889b      	ldrh	r3, [r3, #4]
 8001cd8:	f245 3210 	movw	r2, #21264	; 0x5310
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d11e      	bne.n	8001d1e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001ce0:	4b72      	ldr	r3, [pc, #456]	; (8001eac <LCD_Display_Dir+0x214>)
 8001ce2:	222c      	movs	r2, #44	; 0x2c
 8001ce4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001ce6:	4b71      	ldr	r3, [pc, #452]	; (8001eac <LCD_Display_Dir+0x214>)
 8001ce8:	222a      	movs	r2, #42	; 0x2a
 8001cea:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001cec:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <LCD_Display_Dir+0x214>)
 8001cee:	222b      	movs	r2, #43	; 0x2b
 8001cf0:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cf2:	4b6e      	ldr	r3, [pc, #440]	; (8001eac <LCD_Display_Dir+0x214>)
 8001cf4:	889b      	ldrh	r3, [r3, #4]
 8001cf6:	f646 0204 	movw	r2, #26628	; 0x6804
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d006      	beq.n	8001d0c <LCD_Display_Dir+0x74>
 8001cfe:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d00:	889b      	ldrh	r3, [r3, #4]
 8001d02:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d06:	4293      	cmp	r3, r2
 8001d08:	f040 80c7 	bne.w	8001e9a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001d0c:	4b67      	ldr	r3, [pc, #412]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d12:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001d14:	4b65      	ldr	r3, [pc, #404]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d1a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d1c:	e0bd      	b.n	8001e9a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d20:	889b      	ldrh	r3, [r3, #4]
 8001d22:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d114      	bne.n	8001d54 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001d2a:	4b60      	ldr	r3, [pc, #384]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d2c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001d30:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001d32:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d34:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001d38:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d3c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001d40:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001d42:	4b5a      	ldr	r3, [pc, #360]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d48:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d4c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d50:	805a      	strh	r2, [r3, #2]
 8001d52:	e0a3      	b.n	8001e9c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001d54:	4b55      	ldr	r3, [pc, #340]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d56:	889b      	ldrh	r3, [r3, #4]
 8001d58:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d111      	bne.n	8001d84 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001d60:	4b52      	ldr	r3, [pc, #328]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d62:	222c      	movs	r2, #44	; 0x2c
 8001d64:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001d66:	4b51      	ldr	r3, [pc, #324]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d68:	222b      	movs	r2, #43	; 0x2b
 8001d6a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001d6c:	4b4f      	ldr	r3, [pc, #316]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d6e:	222a      	movs	r2, #42	; 0x2a
 8001d70:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001d72:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d78:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001d7a:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d80:	805a      	strh	r2, [r3, #2]
 8001d82:	e08b      	b.n	8001e9c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001d84:	4b49      	ldr	r3, [pc, #292]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d86:	2222      	movs	r2, #34	; 0x22
 8001d88:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001d8a:	4b48      	ldr	r3, [pc, #288]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d92:	2221      	movs	r2, #33	; 0x21
 8001d94:	819a      	strh	r2, [r3, #12]
 8001d96:	e081      	b.n	8001e9c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001d98:	4b44      	ldr	r3, [pc, #272]	; (8001eac <LCD_Display_Dir+0x214>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <LCD_Display_Dir+0x214>)
 8001da0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001da4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <LCD_Display_Dir+0x214>)
 8001da8:	22f0      	movs	r2, #240	; 0xf0
 8001daa:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <LCD_Display_Dir+0x214>)
 8001dae:	889b      	ldrh	r3, [r3, #4]
 8001db0:	f249 3241 	movw	r2, #37697	; 0x9341
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d005      	beq.n	8001dc4 <LCD_Display_Dir+0x12c>
 8001db8:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <LCD_Display_Dir+0x214>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	f245 3210 	movw	r2, #21264	; 0x5310
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d109      	bne.n	8001dd8 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <LCD_Display_Dir+0x214>)
 8001dc6:	222c      	movs	r2, #44	; 0x2c
 8001dc8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <LCD_Display_Dir+0x214>)
 8001dcc:	222a      	movs	r2, #42	; 0x2a
 8001dce:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <LCD_Display_Dir+0x214>)
 8001dd2:	222b      	movs	r2, #43	; 0x2b
 8001dd4:	819a      	strh	r2, [r3, #12]
 8001dd6:	e04b      	b.n	8001e70 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <LCD_Display_Dir+0x214>)
 8001dda:	889b      	ldrh	r3, [r3, #4]
 8001ddc:	f646 0204 	movw	r2, #26628	; 0x6804
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d109      	bne.n	8001df8 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001de4:	4b31      	ldr	r3, [pc, #196]	; (8001eac <LCD_Display_Dir+0x214>)
 8001de6:	222c      	movs	r2, #44	; 0x2c
 8001de8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001dea:	4b30      	ldr	r3, [pc, #192]	; (8001eac <LCD_Display_Dir+0x214>)
 8001dec:	222b      	movs	r2, #43	; 0x2b
 8001dee:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001df0:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <LCD_Display_Dir+0x214>)
 8001df2:	222a      	movs	r2, #42	; 0x2a
 8001df4:	819a      	strh	r2, [r3, #12]
 8001df6:	e03b      	b.n	8001e70 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001df8:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <LCD_Display_Dir+0x214>)
 8001dfa:	889b      	ldrh	r3, [r3, #4]
 8001dfc:	f245 5210 	movw	r2, #21776	; 0x5510
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d114      	bne.n	8001e2e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e06:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001e0a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e0e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001e12:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e16:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001e1a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e1e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e22:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e2a:	805a      	strh	r2, [r3, #2]
 8001e2c:	e020      	b.n	8001e70 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e30:	889b      	ldrh	r3, [r3, #4]
 8001e32:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e3c:	222c      	movs	r2, #44	; 0x2c
 8001e3e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e42:	222a      	movs	r2, #42	; 0x2a
 8001e44:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e48:	222b      	movs	r2, #43	; 0x2b
 8001e4a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e4e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e52:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e5a:	805a      	strh	r2, [r3, #2]
 8001e5c:	e008      	b.n	8001e70 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e60:	2222      	movs	r2, #34	; 0x22
 8001e62:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e66:	2221      	movs	r2, #33	; 0x21
 8001e68:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e72:	889b      	ldrh	r3, [r3, #4]
 8001e74:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d005      	beq.n	8001e88 <LCD_Display_Dir+0x1f0>
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e7e:	889b      	ldrh	r3, [r3, #4]
 8001e80:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d109      	bne.n	8001e9c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e8e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <LCD_Display_Dir+0x214>)
 8001e92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e96:	805a      	strh	r2, [r3, #2]
 8001e98:	e000      	b.n	8001e9c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e9a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff f8af 	bl	8001000 <LCD_Scan_Dir>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000030 	.word	0x20000030

08001eb0 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001eb6:	4b90      	ldr	r3, [pc, #576]	; (80020f8 <LCD_Init+0x248>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	4a8f      	ldr	r2, [pc, #572]	; (80020f8 <LCD_Init+0x248>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6193      	str	r3, [r2, #24]
 8001ec2:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <LCD_Init+0x248>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001ece:	4b8a      	ldr	r3, [pc, #552]	; (80020f8 <LCD_Init+0x248>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	4a89      	ldr	r2, [pc, #548]	; (80020f8 <LCD_Init+0x248>)
 8001ed4:	f043 0310 	orr.w	r3, r3, #16
 8001ed8:	6193      	str	r3, [r2, #24]
 8001eda:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <LCD_Init+0x248>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001ee6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001eea:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001eec:	2301      	movs	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	4619      	mov	r1, r3
 8001efe:	487f      	ldr	r0, [pc, #508]	; (80020fc <LCD_Init+0x24c>)
 8001f00:	f004 fc32 	bl	8006768 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f08:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4619      	mov	r1, r3
 8001f10:	487b      	ldr	r0, [pc, #492]	; (8002100 <LCD_Init+0x250>)
 8001f12:	f004 fc29 	bl	8006768 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001f16:	2032      	movs	r0, #50	; 0x32
 8001f18:	f004 faf4 	bl	8006504 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7fe fd5c 	bl	80009dc <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001f24:	2032      	movs	r0, #50	; 0x32
 8001f26:	f004 faed 	bl	8006504 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7fe fd80 	bl	8000a30 <LCD_ReadReg>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b73      	ldr	r3, [pc, #460]	; (8002104 <LCD_Init+0x254>)
 8001f36:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001f38:	4b72      	ldr	r3, [pc, #456]	; (8002104 <LCD_Init+0x254>)
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	2bfe      	cmp	r3, #254	; 0xfe
 8001f3e:	d90b      	bls.n	8001f58 <LCD_Init+0xa8>
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <LCD_Init+0x254>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d005      	beq.n	8001f58 <LCD_Init+0xa8>
 8001f4c:	4b6d      	ldr	r3, [pc, #436]	; (8002104 <LCD_Init+0x254>)
 8001f4e:	889b      	ldrh	r3, [r3, #4]
 8001f50:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001f54:	f040 80c8 	bne.w	80020e8 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001f58:	20d3      	movs	r0, #211	; 0xd3
 8001f5a:	f7fe fcb3 	bl	80008c4 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001f5e:	f7fe fcf9 	bl	8000954 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001f62:	f7fe fcf7 	bl	8000954 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001f66:	f7fe fcf5 	bl	8000954 <LCD_RD_DATA>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b65      	ldr	r3, [pc, #404]	; (8002104 <LCD_Init+0x254>)
 8001f70:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001f72:	4b64      	ldr	r3, [pc, #400]	; (8002104 <LCD_Init+0x254>)
 8001f74:	889b      	ldrh	r3, [r3, #4]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b62      	ldr	r3, [pc, #392]	; (8002104 <LCD_Init+0x254>)
 8001f7c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001f7e:	f7fe fce9 	bl	8000954 <LCD_RD_DATA>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <LCD_Init+0x254>)
 8001f88:	889b      	ldrh	r3, [r3, #4]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <LCD_Init+0x254>)
 8001f90:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001f92:	4b5c      	ldr	r3, [pc, #368]	; (8002104 <LCD_Init+0x254>)
 8001f94:	889b      	ldrh	r3, [r3, #4]
 8001f96:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	f000 80a4 	beq.w	80020e8 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001fa0:	20bf      	movs	r0, #191	; 0xbf
 8001fa2:	f7fe fc8f 	bl	80008c4 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001fa6:	f7fe fcd5 	bl	8000954 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001faa:	f7fe fcd3 	bl	8000954 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001fae:	f7fe fcd1 	bl	8000954 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001fb2:	f7fe fccf 	bl	8000954 <LCD_RD_DATA>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <LCD_Init+0x254>)
 8001fbc:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001fbe:	4b51      	ldr	r3, [pc, #324]	; (8002104 <LCD_Init+0x254>)
 8001fc0:	889b      	ldrh	r3, [r3, #4]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <LCD_Init+0x254>)
 8001fc8:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001fca:	f7fe fcc3 	bl	8000954 <LCD_RD_DATA>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <LCD_Init+0x254>)
 8001fd4:	889b      	ldrh	r3, [r3, #4]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <LCD_Init+0x254>)
 8001fdc:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001fde:	4b49      	ldr	r3, [pc, #292]	; (8002104 <LCD_Init+0x254>)
 8001fe0:	889b      	ldrh	r3, [r3, #4]
 8001fe2:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d07e      	beq.n	80020e8 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001fea:	20d4      	movs	r0, #212	; 0xd4
 8001fec:	f7fe fc6a 	bl	80008c4 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001ff0:	f7fe fcb0 	bl	8000954 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001ff4:	f7fe fcae 	bl	8000954 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001ff8:	f7fe fcac 	bl	8000954 <LCD_RD_DATA>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <LCD_Init+0x254>)
 8002002:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8002004:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <LCD_Init+0x254>)
 8002006:	889b      	ldrh	r3, [r3, #4]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <LCD_Init+0x254>)
 800200e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002010:	f7fe fca0 	bl	8000954 <LCD_RD_DATA>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <LCD_Init+0x254>)
 800201a:	889b      	ldrh	r3, [r3, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b38      	ldr	r3, [pc, #224]	; (8002104 <LCD_Init+0x254>)
 8002022:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002024:	4b37      	ldr	r3, [pc, #220]	; (8002104 <LCD_Init+0x254>)
 8002026:	889b      	ldrh	r3, [r3, #4]
 8002028:	f245 3210 	movw	r2, #21264	; 0x5310
 800202c:	4293      	cmp	r3, r2
 800202e:	d05b      	beq.n	80020e8 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002030:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002034:	f7fe fc46 	bl	80008c4 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002038:	f7fe fc8c 	bl	8000954 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 800203c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002040:	f7fe fc40 	bl	80008c4 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8002044:	f7fe fc86 	bl	8000954 <LCD_RD_DATA>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <LCD_Init+0x254>)
 800204e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <LCD_Init+0x254>)
 8002052:	889b      	ldrh	r3, [r3, #4]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <LCD_Init+0x254>)
 800205a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800205c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002060:	f7fe fc30 	bl	80008c4 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8002064:	f7fe fc76 	bl	8000954 <LCD_RD_DATA>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <LCD_Init+0x254>)
 800206e:	889b      	ldrh	r3, [r3, #4]
 8002070:	4313      	orrs	r3, r2
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <LCD_Init+0x254>)
 8002076:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <LCD_Init+0x254>)
 800207a:	889b      	ldrh	r3, [r3, #4]
 800207c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002080:	d103      	bne.n	800208a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <LCD_Init+0x254>)
 8002084:	f245 5210 	movw	r2, #21776	; 0x5510
 8002088:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <LCD_Init+0x254>)
 800208c:	889b      	ldrh	r3, [r3, #4]
 800208e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002092:	4293      	cmp	r3, r2
 8002094:	d028      	beq.n	80020e8 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002096:	20a1      	movs	r0, #161	; 0xa1
 8002098:	f7fe fc14 	bl	80008c4 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800209c:	f7fe fc5a 	bl	8000954 <LCD_RD_DATA>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <LCD_Init+0x254>)
 80020a6:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 80020a8:	f7fe fc54 	bl	8000954 <LCD_RD_DATA>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <LCD_Init+0x254>)
 80020b2:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <LCD_Init+0x254>)
 80020b6:	889b      	ldrh	r3, [r3, #4]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <LCD_Init+0x254>)
 80020be:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80020c0:	f7fe fc48 	bl	8000954 <LCD_RD_DATA>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <LCD_Init+0x254>)
 80020ca:	889b      	ldrh	r3, [r3, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <LCD_Init+0x254>)
 80020d2:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <LCD_Init+0x254>)
 80020d6:	889b      	ldrh	r3, [r3, #4]
 80020d8:	f245 7261 	movw	r2, #22369	; 0x5761
 80020dc:	4293      	cmp	r3, r2
 80020de:	d103      	bne.n	80020e8 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <LCD_Init+0x254>)
 80020e2:	f641 1263 	movw	r2, #6499	; 0x1963
 80020e6:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <LCD_Init+0x254>)
 80020ea:	889b      	ldrh	r3, [r3, #4]
 80020ec:	f249 3241 	movw	r2, #37697	; 0x9341
 80020f0:	4293      	cmp	r3, r2
 80020f2:	f040 811f 	bne.w	8002334 <LCD_Init+0x484>
 80020f6:	e007      	b.n	8002108 <LCD_Init+0x258>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40011000 	.word	0x40011000
 8002100:	40010c00 	.word	0x40010c00
 8002104:	20000030 	.word	0x20000030
			{
		LCD_WR_REG(0xCF);
 8002108:	20cf      	movs	r0, #207	; 0xcf
 800210a:	f7fe fbdb 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800210e:	2000      	movs	r0, #0
 8002110:	f7fe fbfc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8002114:	20c1      	movs	r0, #193	; 0xc1
 8002116:	f7fe fbf9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 800211a:	2030      	movs	r0, #48	; 0x30
 800211c:	f7fe fbf6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002120:	20ed      	movs	r0, #237	; 0xed
 8002122:	f7fe fbcf 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002126:	2064      	movs	r0, #100	; 0x64
 8002128:	f7fe fbf0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800212c:	2003      	movs	r0, #3
 800212e:	f7fe fbed 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002132:	2012      	movs	r0, #18
 8002134:	f7fe fbea 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002138:	2081      	movs	r0, #129	; 0x81
 800213a:	f7fe fbe7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 800213e:	20e8      	movs	r0, #232	; 0xe8
 8002140:	f7fe fbc0 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8002144:	2085      	movs	r0, #133	; 0x85
 8002146:	f7fe fbe1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800214a:	2010      	movs	r0, #16
 800214c:	f7fe fbde 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002150:	207a      	movs	r0, #122	; 0x7a
 8002152:	f7fe fbdb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002156:	20cb      	movs	r0, #203	; 0xcb
 8002158:	f7fe fbb4 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 800215c:	2039      	movs	r0, #57	; 0x39
 800215e:	f7fe fbd5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002162:	202c      	movs	r0, #44	; 0x2c
 8002164:	f7fe fbd2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002168:	2000      	movs	r0, #0
 800216a:	f7fe fbcf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800216e:	2034      	movs	r0, #52	; 0x34
 8002170:	f7fe fbcc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002174:	2002      	movs	r0, #2
 8002176:	f7fe fbc9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800217a:	20f7      	movs	r0, #247	; 0xf7
 800217c:	f7fe fba2 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002180:	2020      	movs	r0, #32
 8002182:	f7fe fbc3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002186:	20ea      	movs	r0, #234	; 0xea
 8002188:	f7fe fb9c 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800218c:	2000      	movs	r0, #0
 800218e:	f7fe fbbd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002192:	2000      	movs	r0, #0
 8002194:	f7fe fbba 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002198:	20c0      	movs	r0, #192	; 0xc0
 800219a:	f7fe fb93 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800219e:	201b      	movs	r0, #27
 80021a0:	f7fe fbb4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 80021a4:	20c1      	movs	r0, #193	; 0xc1
 80021a6:	f7fe fb8d 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7fe fbae 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 80021b0:	20c5      	movs	r0, #197	; 0xc5
 80021b2:	f7fe fb87 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 80021b6:	2030      	movs	r0, #48	; 0x30
 80021b8:	f7fe fba8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 80021bc:	2030      	movs	r0, #48	; 0x30
 80021be:	f7fe fba5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 80021c2:	20c7      	movs	r0, #199	; 0xc7
 80021c4:	f7fe fb7e 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 80021c8:	20b7      	movs	r0, #183	; 0xb7
 80021ca:	f7fe fb9f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 80021ce:	2036      	movs	r0, #54	; 0x36
 80021d0:	f7fe fb78 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80021d4:	2048      	movs	r0, #72	; 0x48
 80021d6:	f7fe fb99 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80021da:	203a      	movs	r0, #58	; 0x3a
 80021dc:	f7fe fb72 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80021e0:	2055      	movs	r0, #85	; 0x55
 80021e2:	f7fe fb93 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80021e6:	20b1      	movs	r0, #177	; 0xb1
 80021e8:	f7fe fb6c 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7fe fb8d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80021f2:	201a      	movs	r0, #26
 80021f4:	f7fe fb8a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80021f8:	20b6      	movs	r0, #182	; 0xb6
 80021fa:	f7fe fb63 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80021fe:	200a      	movs	r0, #10
 8002200:	f7fe fb84 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002204:	20a2      	movs	r0, #162	; 0xa2
 8002206:	f7fe fb81 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800220a:	20f2      	movs	r0, #242	; 0xf2
 800220c:	f7fe fb5a 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002210:	2000      	movs	r0, #0
 8002212:	f7fe fb7b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8002216:	2026      	movs	r0, #38	; 0x26
 8002218:	f7fe fb54 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800221c:	2001      	movs	r0, #1
 800221e:	f7fe fb75 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002222:	20e0      	movs	r0, #224	; 0xe0
 8002224:	f7fe fb4e 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002228:	200f      	movs	r0, #15
 800222a:	f7fe fb6f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800222e:	202a      	movs	r0, #42	; 0x2a
 8002230:	f7fe fb6c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002234:	2028      	movs	r0, #40	; 0x28
 8002236:	f7fe fb69 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800223a:	2008      	movs	r0, #8
 800223c:	f7fe fb66 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002240:	200e      	movs	r0, #14
 8002242:	f7fe fb63 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002246:	2008      	movs	r0, #8
 8002248:	f7fe fb60 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800224c:	2054      	movs	r0, #84	; 0x54
 800224e:	f7fe fb5d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002252:	20a9      	movs	r0, #169	; 0xa9
 8002254:	f7fe fb5a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002258:	2043      	movs	r0, #67	; 0x43
 800225a:	f7fe fb57 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 800225e:	200a      	movs	r0, #10
 8002260:	f7fe fb54 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002264:	200f      	movs	r0, #15
 8002266:	f7fe fb51 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe fb4e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002270:	2000      	movs	r0, #0
 8002272:	f7fe fb4b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f7fe fb48 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe fb45 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002282:	20e1      	movs	r0, #225	; 0xe1
 8002284:	f7fe fb1e 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe fb3f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800228e:	2015      	movs	r0, #21
 8002290:	f7fe fb3c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002294:	2017      	movs	r0, #23
 8002296:	f7fe fb39 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800229a:	2007      	movs	r0, #7
 800229c:	f7fe fb36 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80022a0:	2011      	movs	r0, #17
 80022a2:	f7fe fb33 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 80022a6:	2006      	movs	r0, #6
 80022a8:	f7fe fb30 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 80022ac:	202b      	movs	r0, #43	; 0x2b
 80022ae:	f7fe fb2d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80022b2:	2056      	movs	r0, #86	; 0x56
 80022b4:	f7fe fb2a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80022b8:	203c      	movs	r0, #60	; 0x3c
 80022ba:	f7fe fb27 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80022be:	2005      	movs	r0, #5
 80022c0:	f7fe fb24 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80022c4:	2010      	movs	r0, #16
 80022c6:	f7fe fb21 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80022ca:	200f      	movs	r0, #15
 80022cc:	f7fe fb1e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80022d0:	203f      	movs	r0, #63	; 0x3f
 80022d2:	f7fe fb1b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80022d6:	203f      	movs	r0, #63	; 0x3f
 80022d8:	f7fe fb18 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80022dc:	200f      	movs	r0, #15
 80022de:	f7fe fb15 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80022e2:	202b      	movs	r0, #43	; 0x2b
 80022e4:	f7fe faee 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7fe fb0f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7fe fb0c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe fb09 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80022fa:	203f      	movs	r0, #63	; 0x3f
 80022fc:	f7fe fb06 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002300:	202a      	movs	r0, #42	; 0x2a
 8002302:	f7fe fadf 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe fb00 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7fe fafd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe fafa 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002318:	20ef      	movs	r0, #239	; 0xef
 800231a:	f7fe faf7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 800231e:	2011      	movs	r0, #17
 8002320:	f7fe fad0 	bl	80008c4 <LCD_WR_REG>
		HAL_Delay(120);
 8002324:	2078      	movs	r0, #120	; 0x78
 8002326:	f004 f8ed 	bl	8006504 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800232a:	2029      	movs	r0, #41	; 0x29
 800232c:	f7fe faca 	bl	80008c4 <LCD_WR_REG>
 8002330:	f003 bcd8 	b.w	8005ce4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <LCD_Init+0x5e8>)
 8002336:	889b      	ldrh	r3, [r3, #4]
 8002338:	f646 0204 	movw	r2, #26628	; 0x6804
 800233c:	4293      	cmp	r3, r2
 800233e:	f040 80ad 	bne.w	800249c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8002342:	2011      	movs	r0, #17
 8002344:	f7fe fabe 	bl	80008c4 <LCD_WR_REG>
		HAL_Delay(20);
 8002348:	2014      	movs	r0, #20
 800234a:	f004 f8db 	bl	8006504 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 800234e:	20d0      	movs	r0, #208	; 0xd0
 8002350:	f7fe fab8 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002354:	2007      	movs	r0, #7
 8002356:	f7fe fad9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 800235a:	2042      	movs	r0, #66	; 0x42
 800235c:	f7fe fad6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002360:	201d      	movs	r0, #29
 8002362:	f7fe fad3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002366:	20d1      	movs	r0, #209	; 0xd1
 8002368:	f7fe faac 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7fe facd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002372:	201a      	movs	r0, #26
 8002374:	f7fe faca 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002378:	2009      	movs	r0, #9
 800237a:	f7fe fac7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800237e:	20d2      	movs	r0, #210	; 0xd2
 8002380:	f7fe faa0 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002384:	2001      	movs	r0, #1
 8002386:	f7fe fac1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800238a:	2022      	movs	r0, #34	; 0x22
 800238c:	f7fe fabe 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002390:	20c0      	movs	r0, #192	; 0xc0
 8002392:	f7fe fa97 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002396:	2010      	movs	r0, #16
 8002398:	f7fe fab8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800239c:	203b      	movs	r0, #59	; 0x3b
 800239e:	f7fe fab5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fe fab2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80023a8:	2002      	movs	r0, #2
 80023aa:	f7fe faaf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80023ae:	2011      	movs	r0, #17
 80023b0:	f7fe faac 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80023b4:	20c5      	movs	r0, #197	; 0xc5
 80023b6:	f7fe fa85 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 80023ba:	2003      	movs	r0, #3
 80023bc:	f7fe faa6 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80023c0:	20c8      	movs	r0, #200	; 0xc8
 80023c2:	f7fe fa7f 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe faa0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80023cc:	2025      	movs	r0, #37	; 0x25
 80023ce:	f7fe fa9d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80023d2:	2021      	movs	r0, #33	; 0x21
 80023d4:	f7fe fa9a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80023d8:	2005      	movs	r0, #5
 80023da:	f7fe fa97 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fa94 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80023e4:	200a      	movs	r0, #10
 80023e6:	f7fe fa91 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80023ea:	2065      	movs	r0, #101	; 0x65
 80023ec:	f7fe fa8e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80023f0:	2025      	movs	r0, #37	; 0x25
 80023f2:	f7fe fa8b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80023f6:	2077      	movs	r0, #119	; 0x77
 80023f8:	f7fe fa88 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80023fc:	2050      	movs	r0, #80	; 0x50
 80023fe:	f7fe fa85 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002402:	200f      	movs	r0, #15
 8002404:	f7fe fa82 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe fa7f 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800240e:	20f8      	movs	r0, #248	; 0xf8
 8002410:	f7fe fa58 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002414:	2001      	movs	r0, #1
 8002416:	f7fe fa79 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 800241a:	20fe      	movs	r0, #254	; 0xfe
 800241c:	f7fe fa52 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fa73 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002426:	2002      	movs	r0, #2
 8002428:	f7fe fa70 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800242c:	2020      	movs	r0, #32
 800242e:	f7fe fa49 	bl	80008c4 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002432:	2036      	movs	r0, #54	; 0x36
 8002434:	f7fe fa46 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002438:	2008      	movs	r0, #8
 800243a:	f7fe fa67 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800243e:	203a      	movs	r0, #58	; 0x3a
 8002440:	f7fe fa40 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8002444:	2055      	movs	r0, #85	; 0x55
 8002446:	f7fe fa61 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 800244a:	202b      	movs	r0, #43	; 0x2b
 800244c:	f7fe fa3a 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fa5b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fa58 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800245c:	2001      	movs	r0, #1
 800245e:	f7fe fa55 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002462:	203f      	movs	r0, #63	; 0x3f
 8002464:	f7fe fa52 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002468:	202a      	movs	r0, #42	; 0x2a
 800246a:	f7fe fa2b 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe fa4c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fa49 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800247a:	2001      	movs	r0, #1
 800247c:	f7fe fa46 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002480:	20df      	movs	r0, #223	; 0xdf
 8002482:	f7fe fa43 	bl	800090c <LCD_WR_DATAX>
		HAL_Delay(120);
 8002486:	2078      	movs	r0, #120	; 0x78
 8002488:	f004 f83c 	bl	8006504 <HAL_Delay>
		LCD_WR_REG(0X29);
 800248c:	2029      	movs	r0, #41	; 0x29
 800248e:	f7fe fa19 	bl	80008c4 <LCD_WR_REG>
 8002492:	f003 bc27 	b.w	8005ce4 <LCD_Init+0x3e34>
 8002496:	bf00      	nop
 8002498:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5310) {
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <LCD_Init+0x5fc>)
 800249e:	889b      	ldrh	r3, [r3, #4]
 80024a0:	f245 3210 	movw	r2, #21264	; 0x5310
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f040 877c 	bne.w	80033a2 <LCD_Init+0x14f2>
 80024aa:	e001      	b.n	80024b0 <LCD_Init+0x600>
 80024ac:	20000030 	.word	0x20000030
		LCD_WR_REG(0xED);
 80024b0:	20ed      	movs	r0, #237	; 0xed
 80024b2:	f7fe fa07 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7fe fa28 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80024bc:	20fe      	movs	r0, #254	; 0xfe
 80024be:	f7fe fa25 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80024c2:	20ee      	movs	r0, #238	; 0xee
 80024c4:	f7fe f9fe 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80024c8:	20de      	movs	r0, #222	; 0xde
 80024ca:	f7fe fa1f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80024ce:	2021      	movs	r0, #33	; 0x21
 80024d0:	f7fe fa1c 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80024d4:	20f1      	movs	r0, #241	; 0xf1
 80024d6:	f7fe f9f5 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024da:	2001      	movs	r0, #1
 80024dc:	f7fe fa16 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80024e0:	20df      	movs	r0, #223	; 0xdf
 80024e2:	f7fe f9ef 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80024e6:	2010      	movs	r0, #16
 80024e8:	f7fe fa10 	bl	800090c <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80024ec:	20c4      	movs	r0, #196	; 0xc4
 80024ee:	f7fe f9e9 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80024f2:	208f      	movs	r0, #143	; 0x8f
 80024f4:	f7fe fa0a 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80024f8:	20c6      	movs	r0, #198	; 0xc6
 80024fa:	f7fe f9e3 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe fa04 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002504:	20e2      	movs	r0, #226	; 0xe2
 8002506:	f7fe fa01 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800250a:	20e2      	movs	r0, #226	; 0xe2
 800250c:	f7fe f9fe 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002510:	20e2      	movs	r0, #226	; 0xe2
 8002512:	f7fe f9fb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002516:	20bf      	movs	r0, #191	; 0xbf
 8002518:	f7fe f9d4 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800251c:	20aa      	movs	r0, #170	; 0xaa
 800251e:	f7fe f9f5 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002522:	20b0      	movs	r0, #176	; 0xb0
 8002524:	f7fe f9ce 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002528:	200d      	movs	r0, #13
 800252a:	f7fe f9ef 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe f9ec 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002534:	200d      	movs	r0, #13
 8002536:	f7fe f9e9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe f9e6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002540:	2011      	movs	r0, #17
 8002542:	f7fe f9e3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe f9e0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 800254c:	2019      	movs	r0, #25
 800254e:	f7fe f9dd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe f9da 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002558:	2021      	movs	r0, #33	; 0x21
 800255a:	f7fe f9d7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe f9d4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002564:	202d      	movs	r0, #45	; 0x2d
 8002566:	f7fe f9d1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe f9ce 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002570:	203d      	movs	r0, #61	; 0x3d
 8002572:	f7fe f9cb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe f9c8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800257c:	205d      	movs	r0, #93	; 0x5d
 800257e:	f7fe f9c5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe f9c2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002588:	205d      	movs	r0, #93	; 0x5d
 800258a:	f7fe f9bf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe f9bc 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002594:	20b1      	movs	r0, #177	; 0xb1
 8002596:	f7fe f995 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800259a:	2080      	movs	r0, #128	; 0x80
 800259c:	f7fe f9b6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe f9b3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80025a6:	208b      	movs	r0, #139	; 0x8b
 80025a8:	f7fe f9b0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe f9ad 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80025b2:	2096      	movs	r0, #150	; 0x96
 80025b4:	f7fe f9aa 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe f9a7 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80025be:	20b2      	movs	r0, #178	; 0xb2
 80025c0:	f7fe f980 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe f9a1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe f99e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80025d0:	2002      	movs	r0, #2
 80025d2:	f7fe f99b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe f998 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80025dc:	2003      	movs	r0, #3
 80025de:	f7fe f995 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe f992 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80025e8:	20b3      	movs	r0, #179	; 0xb3
 80025ea:	f7fe f96b 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe f98c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe f989 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe f986 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe f983 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe f980 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe f97d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe f97a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe f977 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe f974 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe f971 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe f96e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe f96b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe f968 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe f965 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002642:	2000      	movs	r0, #0
 8002644:	f7fe f962 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe f95f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe f95c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe f959 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe f956 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe f953 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002666:	2000      	movs	r0, #0
 8002668:	f7fe f950 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe f94d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe f94a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe f947 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800267e:	20b4      	movs	r0, #180	; 0xb4
 8002680:	f7fe f920 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002684:	208b      	movs	r0, #139	; 0x8b
 8002686:	f7fe f941 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe f93e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002690:	2096      	movs	r0, #150	; 0x96
 8002692:	f7fe f93b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe f938 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800269c:	20a1      	movs	r0, #161	; 0xa1
 800269e:	f7fe f935 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe f932 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80026a8:	20b5      	movs	r0, #181	; 0xb5
 80026aa:	f7fe f90b 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80026ae:	2002      	movs	r0, #2
 80026b0:	f7fe f92c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe f929 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80026ba:	2003      	movs	r0, #3
 80026bc:	f7fe f926 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe f923 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80026c6:	2004      	movs	r0, #4
 80026c8:	f7fe f920 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe f91d 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80026d2:	20b6      	movs	r0, #182	; 0xb6
 80026d4:	f7fe f8f6 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe f917 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe f914 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80026e4:	20b7      	movs	r0, #183	; 0xb7
 80026e6:	f7fe f8ed 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe f90e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe f90b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80026f6:	203f      	movs	r0, #63	; 0x3f
 80026f8:	f7fe f908 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe f905 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002702:	205e      	movs	r0, #94	; 0x5e
 8002704:	f7fe f902 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe f8ff 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800270e:	2064      	movs	r0, #100	; 0x64
 8002710:	f7fe f8fc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe f8f9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 800271a:	208c      	movs	r0, #140	; 0x8c
 800271c:	f7fe f8f6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe f8f3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002726:	20ac      	movs	r0, #172	; 0xac
 8002728:	f7fe f8f0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe f8ed 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002732:	20dc      	movs	r0, #220	; 0xdc
 8002734:	f7fe f8ea 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe f8e7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 800273e:	2070      	movs	r0, #112	; 0x70
 8002740:	f7fe f8e4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe f8e1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 800274a:	2090      	movs	r0, #144	; 0x90
 800274c:	f7fe f8de 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe f8db 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002756:	20eb      	movs	r0, #235	; 0xeb
 8002758:	f7fe f8d8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe f8d5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002762:	20dc      	movs	r0, #220	; 0xdc
 8002764:	f7fe f8d2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f8cf 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 800276e:	20b8      	movs	r0, #184	; 0xb8
 8002770:	f7fe f8a8 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe f8c9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fe f8c6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe f8c3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe f8c0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe f8bd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe f8ba 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe f8b7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe f8b4 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80027a4:	20ba      	movs	r0, #186	; 0xba
 80027a6:	f7fe f88d 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80027aa:	2024      	movs	r0, #36	; 0x24
 80027ac:	f7fe f8ae 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe f8ab 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe f8a8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe f8a5 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80027c2:	20c1      	movs	r0, #193	; 0xc1
 80027c4:	f7fe f87e 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80027c8:	2020      	movs	r0, #32
 80027ca:	f7fe f89f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe f89c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80027d4:	2054      	movs	r0, #84	; 0x54
 80027d6:	f7fe f899 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7fe f896 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80027e0:	20ff      	movs	r0, #255	; 0xff
 80027e2:	f7fe f893 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe f890 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80027ec:	20c2      	movs	r0, #194	; 0xc2
 80027ee:	f7fe f869 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80027f2:	200a      	movs	r0, #10
 80027f4:	f7fe f88a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe f887 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80027fe:	2004      	movs	r0, #4
 8002800:	f7fe f884 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe f881 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 800280a:	20c3      	movs	r0, #195	; 0xc3
 800280c:	f7fe f85a 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002810:	203c      	movs	r0, #60	; 0x3c
 8002812:	f7fe f87b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe f878 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 800281c:	203a      	movs	r0, #58	; 0x3a
 800281e:	f7fe f875 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe f872 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002828:	2039      	movs	r0, #57	; 0x39
 800282a:	f7fe f86f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe f86c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002834:	2037      	movs	r0, #55	; 0x37
 8002836:	f7fe f869 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f866 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002840:	203c      	movs	r0, #60	; 0x3c
 8002842:	f7fe f863 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f860 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800284c:	2036      	movs	r0, #54	; 0x36
 800284e:	f7fe f85d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe f85a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002858:	2032      	movs	r0, #50	; 0x32
 800285a:	f7fe f857 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe f854 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002864:	202f      	movs	r0, #47	; 0x2f
 8002866:	f7fe f851 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe f84e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002870:	202c      	movs	r0, #44	; 0x2c
 8002872:	f7fe f84b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe f848 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800287c:	2029      	movs	r0, #41	; 0x29
 800287e:	f7fe f845 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe f842 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002888:	2026      	movs	r0, #38	; 0x26
 800288a:	f7fe f83f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe f83c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002894:	2024      	movs	r0, #36	; 0x24
 8002896:	f7fe f839 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe f836 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80028a0:	2024      	movs	r0, #36	; 0x24
 80028a2:	f7fe f833 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe f830 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80028ac:	2023      	movs	r0, #35	; 0x23
 80028ae:	f7fe f82d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe f82a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80028b8:	203c      	movs	r0, #60	; 0x3c
 80028ba:	f7fe f827 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe f824 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80028c4:	2036      	movs	r0, #54	; 0x36
 80028c6:	f7fe f821 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe f81e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80028d0:	2032      	movs	r0, #50	; 0x32
 80028d2:	f7fe f81b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe f818 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80028dc:	202f      	movs	r0, #47	; 0x2f
 80028de:	f7fe f815 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe f812 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80028e8:	202c      	movs	r0, #44	; 0x2c
 80028ea:	f7fe f80f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe f80c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80028f4:	2029      	movs	r0, #41	; 0x29
 80028f6:	f7fe f809 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe f806 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002900:	2026      	movs	r0, #38	; 0x26
 8002902:	f7fe f803 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe f800 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800290c:	2024      	movs	r0, #36	; 0x24
 800290e:	f7fd fffd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fd fffa 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002918:	2024      	movs	r0, #36	; 0x24
 800291a:	f7fd fff7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fd fff4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002924:	2023      	movs	r0, #35	; 0x23
 8002926:	f7fd fff1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fd ffee 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002930:	20c4      	movs	r0, #196	; 0xc4
 8002932:	f7fd ffc7 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002936:	2062      	movs	r0, #98	; 0x62
 8002938:	f7fd ffe8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293c:	2000      	movs	r0, #0
 800293e:	f7fd ffe5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002942:	2005      	movs	r0, #5
 8002944:	f7fd ffe2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002948:	2000      	movs	r0, #0
 800294a:	f7fd ffdf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800294e:	2084      	movs	r0, #132	; 0x84
 8002950:	f7fd ffdc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7fd ffd9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 800295a:	20f0      	movs	r0, #240	; 0xf0
 800295c:	f7fd ffd6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fd ffd3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002966:	2018      	movs	r0, #24
 8002968:	f7fd ffd0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fd ffcd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002972:	20a4      	movs	r0, #164	; 0xa4
 8002974:	f7fd ffca 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fd ffc7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800297e:	2018      	movs	r0, #24
 8002980:	f7fd ffc4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fd ffc1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800298a:	2050      	movs	r0, #80	; 0x50
 800298c:	f7fd ffbe 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fd ffbb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002996:	200c      	movs	r0, #12
 8002998:	f7fd ffb8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fd ffb5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80029a2:	2017      	movs	r0, #23
 80029a4:	f7fd ffb2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fd ffaf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80029ae:	2095      	movs	r0, #149	; 0x95
 80029b0:	f7fd ffac 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fd ffa9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80029ba:	20f3      	movs	r0, #243	; 0xf3
 80029bc:	f7fd ffa6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fd ffa3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80029c6:	20e6      	movs	r0, #230	; 0xe6
 80029c8:	f7fd ffa0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fd ff9d 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80029d2:	20c5      	movs	r0, #197	; 0xc5
 80029d4:	f7fd ff76 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80029d8:	2032      	movs	r0, #50	; 0x32
 80029da:	f7fd ff97 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fd ff94 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80029e4:	2044      	movs	r0, #68	; 0x44
 80029e6:	f7fd ff91 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7fd ff8e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 80029f0:	2065      	movs	r0, #101	; 0x65
 80029f2:	f7fd ff8b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fd ff88 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80029fc:	2076      	movs	r0, #118	; 0x76
 80029fe:	f7fd ff85 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fd ff82 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002a08:	2088      	movs	r0, #136	; 0x88
 8002a0a:	f7fd ff7f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fd ff7c 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002a14:	20c6      	movs	r0, #198	; 0xc6
 8002a16:	f7fd ff55 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002a1a:	2020      	movs	r0, #32
 8002a1c:	f7fd ff76 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fd ff73 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002a26:	2017      	movs	r0, #23
 8002a28:	f7fd ff70 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fd ff6d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7fd ff6a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fd ff67 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002a3e:	20c7      	movs	r0, #199	; 0xc7
 8002a40:	f7fd ff40 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fd ff61 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fd ff5e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fd ff5b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7fd ff58 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002a5c:	20c8      	movs	r0, #200	; 0xc8
 8002a5e:	f7fd ff31 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fd ff52 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fd ff4f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fd ff4c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fd ff49 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002a7a:	20c9      	movs	r0, #201	; 0xc9
 8002a7c:	f7fd ff22 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fd ff43 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fd ff40 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fd ff3d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fd ff3a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fd ff37 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fd ff34 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fd ff31 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fd ff2e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fd ff2b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fd ff28 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fd ff25 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fd ff22 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fd ff1f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fd ff1c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fd ff19 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fd ff16 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002ae0:	20e0      	movs	r0, #224	; 0xe0
 8002ae2:	f7fd feef 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002ae6:	2016      	movs	r0, #22
 8002ae8:	f7fd ff10 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fd ff0d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002af2:	201c      	movs	r0, #28
 8002af4:	f7fd ff0a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fd ff07 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002afe:	2021      	movs	r0, #33	; 0x21
 8002b00:	f7fd ff04 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fd ff01 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b0a:	2036      	movs	r0, #54	; 0x36
 8002b0c:	f7fd fefe 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fd fefb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002b16:	2046      	movs	r0, #70	; 0x46
 8002b18:	f7fd fef8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fd fef5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002b22:	2052      	movs	r0, #82	; 0x52
 8002b24:	f7fd fef2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fd feef 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002b2e:	2064      	movs	r0, #100	; 0x64
 8002b30:	f7fd feec 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fd fee9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002b3a:	207a      	movs	r0, #122	; 0x7a
 8002b3c:	f7fd fee6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fd fee3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002b46:	208b      	movs	r0, #139	; 0x8b
 8002b48:	f7fd fee0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fd fedd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002b52:	2099      	movs	r0, #153	; 0x99
 8002b54:	f7fd feda 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fd fed7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002b5e:	20a8      	movs	r0, #168	; 0xa8
 8002b60:	f7fd fed4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fd fed1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002b6a:	20b9      	movs	r0, #185	; 0xb9
 8002b6c:	f7fd fece 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fd fecb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b76:	20c4      	movs	r0, #196	; 0xc4
 8002b78:	f7fd fec8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fd fec5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002b82:	20ca      	movs	r0, #202	; 0xca
 8002b84:	f7fd fec2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fd febf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002b8e:	20d2      	movs	r0, #210	; 0xd2
 8002b90:	f7fd febc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fd feb9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002b9a:	20d9      	movs	r0, #217	; 0xd9
 8002b9c:	f7fd feb6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fd feb3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002ba6:	20e0      	movs	r0, #224	; 0xe0
 8002ba8:	f7fd feb0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fd fead 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002bb2:	20f3      	movs	r0, #243	; 0xf3
 8002bb4:	f7fd feaa 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fd fea7 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002bbe:	20e1      	movs	r0, #225	; 0xe1
 8002bc0:	f7fd fe80 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002bc4:	2016      	movs	r0, #22
 8002bc6:	f7fd fea1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7fd fe9e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002bd0:	201c      	movs	r0, #28
 8002bd2:	f7fd fe9b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7fd fe98 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002bdc:	2022      	movs	r0, #34	; 0x22
 8002bde:	f7fd fe95 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fd fe92 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002be8:	2036      	movs	r0, #54	; 0x36
 8002bea:	f7fd fe8f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fd fe8c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002bf4:	2045      	movs	r0, #69	; 0x45
 8002bf6:	f7fd fe89 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fd fe86 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002c00:	2052      	movs	r0, #82	; 0x52
 8002c02:	f7fd fe83 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fd fe80 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002c0c:	2064      	movs	r0, #100	; 0x64
 8002c0e:	f7fd fe7d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fd fe7a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002c18:	207a      	movs	r0, #122	; 0x7a
 8002c1a:	f7fd fe77 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fd fe74 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002c24:	208b      	movs	r0, #139	; 0x8b
 8002c26:	f7fd fe71 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fd fe6e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c30:	2099      	movs	r0, #153	; 0x99
 8002c32:	f7fd fe6b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fd fe68 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002c3c:	20a8      	movs	r0, #168	; 0xa8
 8002c3e:	f7fd fe65 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fd fe62 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c48:	20b9      	movs	r0, #185	; 0xb9
 8002c4a:	f7fd fe5f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fd fe5c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c54:	20c4      	movs	r0, #196	; 0xc4
 8002c56:	f7fd fe59 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fd fe56 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c60:	20ca      	movs	r0, #202	; 0xca
 8002c62:	f7fd fe53 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fd fe50 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c6c:	20d2      	movs	r0, #210	; 0xd2
 8002c6e:	f7fd fe4d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fd fe4a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002c78:	20d8      	movs	r0, #216	; 0xd8
 8002c7a:	f7fd fe47 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fd fe44 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c84:	20e0      	movs	r0, #224	; 0xe0
 8002c86:	f7fd fe41 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fd fe3e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c90:	20f3      	movs	r0, #243	; 0xf3
 8002c92:	f7fd fe3b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fd fe38 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002c9c:	20e2      	movs	r0, #226	; 0xe2
 8002c9e:	f7fd fe11 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002ca2:	2005      	movs	r0, #5
 8002ca4:	f7fd fe32 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7fd fe2f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002cae:	200b      	movs	r0, #11
 8002cb0:	f7fd fe2c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fd fe29 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002cba:	201b      	movs	r0, #27
 8002cbc:	f7fd fe26 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fd fe23 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002cc6:	2034      	movs	r0, #52	; 0x34
 8002cc8:	f7fd fe20 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fd fe1d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cd2:	2044      	movs	r0, #68	; 0x44
 8002cd4:	f7fd fe1a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fd fe17 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002cde:	204f      	movs	r0, #79	; 0x4f
 8002ce0:	f7fd fe14 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fd fe11 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002cea:	2061      	movs	r0, #97	; 0x61
 8002cec:	f7fd fe0e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fd fe0b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002cf6:	2079      	movs	r0, #121	; 0x79
 8002cf8:	f7fd fe08 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fd fe05 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d02:	2088      	movs	r0, #136	; 0x88
 8002d04:	f7fd fe02 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fd fdff 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002d0e:	2097      	movs	r0, #151	; 0x97
 8002d10:	f7fd fdfc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fd fdf9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002d1a:	20a6      	movs	r0, #166	; 0xa6
 8002d1c:	f7fd fdf6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fd fdf3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002d26:	20b7      	movs	r0, #183	; 0xb7
 8002d28:	f7fd fdf0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fd fded 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002d32:	20c2      	movs	r0, #194	; 0xc2
 8002d34:	f7fd fdea 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fd fde7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002d3e:	20c7      	movs	r0, #199	; 0xc7
 8002d40:	f7fd fde4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fd fde1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002d4a:	20d1      	movs	r0, #209	; 0xd1
 8002d4c:	f7fd fdde 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fd fddb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002d56:	20d6      	movs	r0, #214	; 0xd6
 8002d58:	f7fd fdd8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fd fdd5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002d62:	20dd      	movs	r0, #221	; 0xdd
 8002d64:	f7fd fdd2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fd fdcf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d6e:	20f3      	movs	r0, #243	; 0xf3
 8002d70:	f7fd fdcc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fd fdc9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002d7a:	20e3      	movs	r0, #227	; 0xe3
 8002d7c:	f7fd fda2 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d80:	2005      	movs	r0, #5
 8002d82:	f7fd fdc3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7fd fdc0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002d8c:	200a      	movs	r0, #10
 8002d8e:	f7fd fdbd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fd fdba 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002d98:	201c      	movs	r0, #28
 8002d9a:	f7fd fdb7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fd fdb4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002da4:	2033      	movs	r0, #51	; 0x33
 8002da6:	f7fd fdb1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fd fdae 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002db0:	2044      	movs	r0, #68	; 0x44
 8002db2:	f7fd fdab 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fd fda8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002dbc:	2050      	movs	r0, #80	; 0x50
 8002dbe:	f7fd fda5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fd fda2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002dc8:	2062      	movs	r0, #98	; 0x62
 8002dca:	f7fd fd9f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7fd fd9c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002dd4:	2078      	movs	r0, #120	; 0x78
 8002dd6:	f7fd fd99 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fd96 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002de0:	2088      	movs	r0, #136	; 0x88
 8002de2:	f7fd fd93 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fd fd90 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002dec:	2097      	movs	r0, #151	; 0x97
 8002dee:	f7fd fd8d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fd fd8a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002df8:	20a6      	movs	r0, #166	; 0xa6
 8002dfa:	f7fd fd87 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fd fd84 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002e04:	20b7      	movs	r0, #183	; 0xb7
 8002e06:	f7fd fd81 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fd fd7e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002e10:	20c2      	movs	r0, #194	; 0xc2
 8002e12:	f7fd fd7b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fd fd78 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002e1c:	20c7      	movs	r0, #199	; 0xc7
 8002e1e:	f7fd fd75 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fd fd72 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002e28:	20d1      	movs	r0, #209	; 0xd1
 8002e2a:	f7fd fd6f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fd fd6c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002e34:	20d5      	movs	r0, #213	; 0xd5
 8002e36:	f7fd fd69 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fd fd66 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e40:	20dd      	movs	r0, #221	; 0xdd
 8002e42:	f7fd fd63 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fd fd60 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e4c:	20f3      	movs	r0, #243	; 0xf3
 8002e4e:	f7fd fd5d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fd fd5a 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002e58:	20e4      	movs	r0, #228	; 0xe4
 8002e5a:	f7fd fd33 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7fd fd54 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7fd fd51 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7fd fd4e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fd4b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002e76:	2002      	movs	r0, #2
 8002e78:	f7fd fd48 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fd fd45 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002e82:	202a      	movs	r0, #42	; 0x2a
 8002e84:	f7fd fd42 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fd fd3f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002e8e:	203c      	movs	r0, #60	; 0x3c
 8002e90:	f7fd fd3c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7fd fd39 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002e9a:	204b      	movs	r0, #75	; 0x4b
 8002e9c:	f7fd fd36 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fd fd33 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002ea6:	205d      	movs	r0, #93	; 0x5d
 8002ea8:	f7fd fd30 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fd fd2d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002eb2:	2074      	movs	r0, #116	; 0x74
 8002eb4:	f7fd fd2a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fd fd27 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002ebe:	2084      	movs	r0, #132	; 0x84
 8002ec0:	f7fd fd24 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fd fd21 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002eca:	2093      	movs	r0, #147	; 0x93
 8002ecc:	f7fd fd1e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fd fd1b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002ed6:	20a2      	movs	r0, #162	; 0xa2
 8002ed8:	f7fd fd18 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fd fd15 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002ee2:	20b3      	movs	r0, #179	; 0xb3
 8002ee4:	f7fd fd12 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fd fd0f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002eee:	20be      	movs	r0, #190	; 0xbe
 8002ef0:	f7fd fd0c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fd fd09 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002efa:	20c4      	movs	r0, #196	; 0xc4
 8002efc:	f7fd fd06 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fd fd03 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002f06:	20cd      	movs	r0, #205	; 0xcd
 8002f08:	f7fd fd00 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fd fcfd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002f12:	20d3      	movs	r0, #211	; 0xd3
 8002f14:	f7fd fcfa 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fd fcf7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002f1e:	20dd      	movs	r0, #221	; 0xdd
 8002f20:	f7fd fcf4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fd fcf1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f2a:	20f3      	movs	r0, #243	; 0xf3
 8002f2c:	f7fd fcee 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fd fceb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002f36:	20e5      	movs	r0, #229	; 0xe5
 8002f38:	f7fd fcc4 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fd fce5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fd fce2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fd fcdf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fd fcdc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7fd fcd9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fd fcd6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002f60:	2029      	movs	r0, #41	; 0x29
 8002f62:	f7fd fcd3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fd fcd0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f6c:	203c      	movs	r0, #60	; 0x3c
 8002f6e:	f7fd fccd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fd fcca 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f78:	204b      	movs	r0, #75	; 0x4b
 8002f7a:	f7fd fcc7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fd fcc4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f84:	205d      	movs	r0, #93	; 0x5d
 8002f86:	f7fd fcc1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fd fcbe 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f90:	2074      	movs	r0, #116	; 0x74
 8002f92:	f7fd fcbb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fd fcb8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f9c:	2084      	movs	r0, #132	; 0x84
 8002f9e:	f7fd fcb5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fd fcb2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002fa8:	2093      	movs	r0, #147	; 0x93
 8002faa:	f7fd fcaf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fd fcac 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002fb4:	20a2      	movs	r0, #162	; 0xa2
 8002fb6:	f7fd fca9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fd fca6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002fc0:	20b3      	movs	r0, #179	; 0xb3
 8002fc2:	f7fd fca3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fd fca0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002fcc:	20be      	movs	r0, #190	; 0xbe
 8002fce:	f7fd fc9d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fd fc9a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002fd8:	20c4      	movs	r0, #196	; 0xc4
 8002fda:	f7fd fc97 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fd fc94 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002fe4:	20cd      	movs	r0, #205	; 0xcd
 8002fe6:	f7fd fc91 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fd fc8e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002ff0:	20d3      	movs	r0, #211	; 0xd3
 8002ff2:	f7fd fc8b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fd fc88 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002ffc:	20dc      	movs	r0, #220	; 0xdc
 8002ffe:	f7fd fc85 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fd fc82 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003008:	20f3      	movs	r0, #243	; 0xf3
 800300a:	f7fd fc7f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fd fc7c 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8003014:	20e6      	movs	r0, #230	; 0xe6
 8003016:	f7fd fc55 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 800301a:	2011      	movs	r0, #17
 800301c:	f7fd fc76 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f7fd fc73 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003026:	2034      	movs	r0, #52	; 0x34
 8003028:	f7fd fc70 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f7fd fc6d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003032:	2056      	movs	r0, #86	; 0x56
 8003034:	f7fd fc6a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd fc67 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800303e:	2076      	movs	r0, #118	; 0x76
 8003040:	f7fd fc64 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003044:	2000      	movs	r0, #0
 8003046:	f7fd fc61 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800304a:	2077      	movs	r0, #119	; 0x77
 800304c:	f7fd fc5e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003050:	2000      	movs	r0, #0
 8003052:	f7fd fc5b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003056:	2066      	movs	r0, #102	; 0x66
 8003058:	f7fd fc58 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305c:	2000      	movs	r0, #0
 800305e:	f7fd fc55 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003062:	2088      	movs	r0, #136	; 0x88
 8003064:	f7fd fc52 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003068:	2000      	movs	r0, #0
 800306a:	f7fd fc4f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800306e:	2099      	movs	r0, #153	; 0x99
 8003070:	f7fd fc4c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003074:	2000      	movs	r0, #0
 8003076:	f7fd fc49 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800307a:	20bb      	movs	r0, #187	; 0xbb
 800307c:	f7fd fc46 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003080:	2000      	movs	r0, #0
 8003082:	f7fd fc43 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003086:	2099      	movs	r0, #153	; 0x99
 8003088:	f7fd fc40 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308c:	2000      	movs	r0, #0
 800308e:	f7fd fc3d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003092:	2066      	movs	r0, #102	; 0x66
 8003094:	f7fd fc3a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003098:	2000      	movs	r0, #0
 800309a:	f7fd fc37 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800309e:	2055      	movs	r0, #85	; 0x55
 80030a0:	f7fd fc34 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7fd fc31 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80030aa:	2055      	movs	r0, #85	; 0x55
 80030ac:	f7fd fc2e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7fd fc2b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80030b6:	2045      	movs	r0, #69	; 0x45
 80030b8:	f7fd fc28 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fd fc25 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80030c2:	2043      	movs	r0, #67	; 0x43
 80030c4:	f7fd fc22 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7fd fc1f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80030ce:	2044      	movs	r0, #68	; 0x44
 80030d0:	f7fd fc1c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7fd fc19 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80030da:	20e7      	movs	r0, #231	; 0xe7
 80030dc:	f7fd fbf2 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80030e0:	2032      	movs	r0, #50	; 0x32
 80030e2:	f7fd fc13 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f7fd fc10 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80030ec:	2055      	movs	r0, #85	; 0x55
 80030ee:	f7fd fc0d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7fd fc0a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80030f8:	2076      	movs	r0, #118	; 0x76
 80030fa:	f7fd fc07 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fd fc04 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003104:	2066      	movs	r0, #102	; 0x66
 8003106:	f7fd fc01 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fd fbfe 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003110:	2067      	movs	r0, #103	; 0x67
 8003112:	f7fd fbfb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fd fbf8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 800311c:	2067      	movs	r0, #103	; 0x67
 800311e:	f7fd fbf5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003122:	2000      	movs	r0, #0
 8003124:	f7fd fbf2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003128:	2087      	movs	r0, #135	; 0x87
 800312a:	f7fd fbef 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312e:	2000      	movs	r0, #0
 8003130:	f7fd fbec 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003134:	2099      	movs	r0, #153	; 0x99
 8003136:	f7fd fbe9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313a:	2000      	movs	r0, #0
 800313c:	f7fd fbe6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003140:	20bb      	movs	r0, #187	; 0xbb
 8003142:	f7fd fbe3 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003146:	2000      	movs	r0, #0
 8003148:	f7fd fbe0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800314c:	2099      	movs	r0, #153	; 0x99
 800314e:	f7fd fbdd 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003152:	2000      	movs	r0, #0
 8003154:	f7fd fbda 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003158:	2077      	movs	r0, #119	; 0x77
 800315a:	f7fd fbd7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315e:	2000      	movs	r0, #0
 8003160:	f7fd fbd4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003164:	2044      	movs	r0, #68	; 0x44
 8003166:	f7fd fbd1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316a:	2000      	movs	r0, #0
 800316c:	f7fd fbce 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003170:	2056      	movs	r0, #86	; 0x56
 8003172:	f7fd fbcb 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003176:	2000      	movs	r0, #0
 8003178:	f7fd fbc8 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800317c:	2023      	movs	r0, #35	; 0x23
 800317e:	f7fd fbc5 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003182:	2000      	movs	r0, #0
 8003184:	f7fd fbc2 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003188:	2033      	movs	r0, #51	; 0x33
 800318a:	f7fd fbbf 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318e:	2000      	movs	r0, #0
 8003190:	f7fd fbbc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003194:	2045      	movs	r0, #69	; 0x45
 8003196:	f7fd fbb9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800319a:	2000      	movs	r0, #0
 800319c:	f7fd fbb6 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 80031a0:	20e8      	movs	r0, #232	; 0xe8
 80031a2:	f7fd fb8f 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fd fbb0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7fd fbad 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031b2:	2099      	movs	r0, #153	; 0x99
 80031b4:	f7fd fbaa 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b8:	2000      	movs	r0, #0
 80031ba:	f7fd fba7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80031be:	2087      	movs	r0, #135	; 0x87
 80031c0:	f7fd fba4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7fd fba1 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80031ca:	2088      	movs	r0, #136	; 0x88
 80031cc:	f7fd fb9e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fd fb9b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80031d6:	2077      	movs	r0, #119	; 0x77
 80031d8:	f7fd fb98 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031dc:	2000      	movs	r0, #0
 80031de:	f7fd fb95 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031e2:	2066      	movs	r0, #102	; 0x66
 80031e4:	f7fd fb92 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7fd fb8f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80031ee:	2088      	movs	r0, #136	; 0x88
 80031f0:	f7fd fb8c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd fb89 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80031fa:	20aa      	movs	r0, #170	; 0xaa
 80031fc:	f7fd fb86 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003200:	2000      	movs	r0, #0
 8003202:	f7fd fb83 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003206:	20bb      	movs	r0, #187	; 0xbb
 8003208:	f7fd fb80 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320c:	2000      	movs	r0, #0
 800320e:	f7fd fb7d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003212:	2099      	movs	r0, #153	; 0x99
 8003214:	f7fd fb7a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003218:	2000      	movs	r0, #0
 800321a:	f7fd fb77 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800321e:	2066      	movs	r0, #102	; 0x66
 8003220:	f7fd fb74 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fd fb71 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800322a:	2055      	movs	r0, #85	; 0x55
 800322c:	f7fd fb6e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fb6b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003236:	2055      	movs	r0, #85	; 0x55
 8003238:	f7fd fb68 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323c:	2000      	movs	r0, #0
 800323e:	f7fd fb65 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003242:	2044      	movs	r0, #68	; 0x44
 8003244:	f7fd fb62 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003248:	2000      	movs	r0, #0
 800324a:	f7fd fb5f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800324e:	2044      	movs	r0, #68	; 0x44
 8003250:	f7fd fb5c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fb59 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800325a:	2055      	movs	r0, #85	; 0x55
 800325c:	f7fd fb56 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd fb53 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003266:	20e9      	movs	r0, #233	; 0xe9
 8003268:	f7fd fb2c 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800326c:	20aa      	movs	r0, #170	; 0xaa
 800326e:	f7fd fb4d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003272:	2000      	movs	r0, #0
 8003274:	f7fd fb4a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd fb47 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f7fd fb44 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f7fd fb1d 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800328a:	20aa      	movs	r0, #170	; 0xaa
 800328c:	f7fd fb3e 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003290:	20cf      	movs	r0, #207	; 0xcf
 8003292:	f7fd fb17 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003296:	2000      	movs	r0, #0
 8003298:	f7fd fb38 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329c:	2000      	movs	r0, #0
 800329e:	f7fd fb35 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7fd fb32 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7fd fb2f 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7fd fb2c 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b4:	2000      	movs	r0, #0
 80032b6:	f7fd fb29 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7fd fb26 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7fd fb23 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7fd fb20 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fd fb1d 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7fd fb1a 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fd fb17 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fd fb14 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7fd fb11 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ea:	2000      	movs	r0, #0
 80032ec:	f7fd fb0e 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fd fb0b 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7fd fb08 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80032fc:	20f0      	movs	r0, #240	; 0xf0
 80032fe:	f7fd fae1 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003302:	2000      	movs	r0, #0
 8003304:	f7fd fb02 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003308:	2050      	movs	r0, #80	; 0x50
 800330a:	f7fd faff 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330e:	2000      	movs	r0, #0
 8003310:	f7fd fafc 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003314:	2000      	movs	r0, #0
 8003316:	f7fd faf9 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331a:	2000      	movs	r0, #0
 800331c:	f7fd faf6 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003320:	20f3      	movs	r0, #243	; 0xf3
 8003322:	f7fd facf 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd faf0 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800332c:	20f9      	movs	r0, #249	; 0xf9
 800332e:	f7fd fac9 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003332:	2006      	movs	r0, #6
 8003334:	f7fd faea 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003338:	2010      	movs	r0, #16
 800333a:	f7fd fae7 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800333e:	2029      	movs	r0, #41	; 0x29
 8003340:	f7fd fae4 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003344:	2000      	movs	r0, #0
 8003346:	f7fd fae1 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 800334a:	203a      	movs	r0, #58	; 0x3a
 800334c:	f7fd faba 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003350:	2055      	movs	r0, #85	; 0x55
 8003352:	f7fd fadb 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003356:	2011      	movs	r0, #17
 8003358:	f7fd fab4 	bl	80008c4 <LCD_WR_REG>
		HAL_Delay(100);
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	f003 f8d1 	bl	8006504 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003362:	2029      	movs	r0, #41	; 0x29
 8003364:	f7fd faae 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003368:	2035      	movs	r0, #53	; 0x35
 800336a:	f7fd faab 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800336e:	2000      	movs	r0, #0
 8003370:	f7fd facc 	bl	800090c <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003374:	2051      	movs	r0, #81	; 0x51
 8003376:	f7fd faa5 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800337a:	20ff      	movs	r0, #255	; 0xff
 800337c:	f7fd fac6 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003380:	2053      	movs	r0, #83	; 0x53
 8003382:	f7fd fa9f 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003386:	202c      	movs	r0, #44	; 0x2c
 8003388:	f7fd fac0 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800338c:	2055      	movs	r0, #85	; 0x55
 800338e:	f7fd fa99 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003392:	2082      	movs	r0, #130	; 0x82
 8003394:	f7fd faba 	bl	800090c <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003398:	202c      	movs	r0, #44	; 0x2c
 800339a:	f7fd fa93 	bl	80008c4 <LCD_WR_REG>
 800339e:	f002 bca1 	b.w	8005ce4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <LCD_Init+0x1504>)
 80033a4:	889b      	ldrh	r3, [r3, #4]
 80033a6:	f245 5210 	movw	r2, #21776	; 0x5510
 80033aa:	4293      	cmp	r3, r2
 80033ac:	f040 8782 	bne.w	80042b4 <LCD_Init+0x2404>
 80033b0:	e002      	b.n	80033b8 <LCD_Init+0x1508>
 80033b2:	bf00      	nop
 80033b4:	20000030 	.word	0x20000030
		LCD_WriteReg(0xF000, 0x55);
 80033b8:	2155      	movs	r1, #85	; 0x55
 80033ba:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80033be:	f7fd fb0d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80033c2:	21aa      	movs	r1, #170	; 0xaa
 80033c4:	f24f 0001 	movw	r0, #61441	; 0xf001
 80033c8:	f7fd fb08 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80033cc:	2152      	movs	r1, #82	; 0x52
 80033ce:	f24f 0002 	movw	r0, #61442	; 0xf002
 80033d2:	f7fd fb03 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80033d6:	2108      	movs	r1, #8
 80033d8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80033dc:	f7fd fafe 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80033e0:	2101      	movs	r1, #1
 80033e2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80033e6:	f7fd faf9 	bl	80009dc <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80033ea:	210d      	movs	r1, #13
 80033ec:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80033f0:	f7fd faf4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80033f4:	210d      	movs	r1, #13
 80033f6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80033fa:	f7fd faef 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80033fe:	210d      	movs	r1, #13
 8003400:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003404:	f7fd faea 	bl	80009dc <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003408:	2134      	movs	r1, #52	; 0x34
 800340a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800340e:	f7fd fae5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8003412:	2134      	movs	r1, #52	; 0x34
 8003414:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003418:	f7fd fae0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 800341c:	2134      	movs	r1, #52	; 0x34
 800341e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003422:	f7fd fadb 	bl	80009dc <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003426:	210d      	movs	r1, #13
 8003428:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800342c:	f7fd fad6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003430:	210d      	movs	r1, #13
 8003432:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003436:	f7fd fad1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800343a:	210d      	movs	r1, #13
 800343c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003440:	f7fd facc 	bl	80009dc <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8003444:	2134      	movs	r1, #52	; 0x34
 8003446:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800344a:	f7fd fac7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 800344e:	2134      	movs	r1, #52	; 0x34
 8003450:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003454:	f7fd fac2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003458:	2134      	movs	r1, #52	; 0x34
 800345a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800345e:	f7fd fabd 	bl	80009dc <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8003462:	2100      	movs	r1, #0
 8003464:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003468:	f7fd fab8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 800346c:	2100      	movs	r1, #0
 800346e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003472:	f7fd fab3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003476:	2100      	movs	r1, #0
 8003478:	f24b 2002 	movw	r0, #45570	; 0xb202
 800347c:	f7fd faae 	bl	80009dc <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003480:	2124      	movs	r1, #36	; 0x24
 8003482:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003486:	f7fd faa9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800348a:	2124      	movs	r1, #36	; 0x24
 800348c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003490:	f7fd faa4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003494:	2124      	movs	r1, #36	; 0x24
 8003496:	f64b 0002 	movw	r0, #47106	; 0xb802
 800349a:	f7fd fa9f 	bl	80009dc <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800349e:	2101      	movs	r1, #1
 80034a0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80034a4:	f7fd fa9a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80034a8:	210f      	movs	r1, #15
 80034aa:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80034ae:	f7fd fa95 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80034b2:	210f      	movs	r1, #15
 80034b4:	f24b 3001 	movw	r0, #45825	; 0xb301
 80034b8:	f7fd fa90 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80034bc:	210f      	movs	r1, #15
 80034be:	f24b 3002 	movw	r0, #45826	; 0xb302
 80034c2:	f7fd fa8b 	bl	80009dc <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80034c6:	2134      	movs	r1, #52	; 0x34
 80034c8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80034cc:	f7fd fa86 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80034d0:	2134      	movs	r1, #52	; 0x34
 80034d2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80034d6:	f7fd fa81 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80034da:	2134      	movs	r1, #52	; 0x34
 80034dc:	f64b 1002 	movw	r0, #47362	; 0xb902
 80034e0:	f7fd fa7c 	bl	80009dc <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80034e4:	2108      	movs	r1, #8
 80034e6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80034ea:	f7fd fa77 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80034ee:	2108      	movs	r1, #8
 80034f0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80034f4:	f7fd fa72 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80034f8:	2108      	movs	r1, #8
 80034fa:	f24b 5002 	movw	r0, #46338	; 0xb502
 80034fe:	f7fd fa6d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003502:	2103      	movs	r1, #3
 8003504:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003508:	f7fd fa68 	bl	80009dc <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800350c:	2124      	movs	r1, #36	; 0x24
 800350e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003512:	f7fd fa63 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8003516:	2124      	movs	r1, #36	; 0x24
 8003518:	f64b 2001 	movw	r0, #47617	; 0xba01
 800351c:	f7fd fa5e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003520:	2124      	movs	r1, #36	; 0x24
 8003522:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003526:	f7fd fa59 	bl	80009dc <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800352a:	2100      	movs	r1, #0
 800352c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003530:	f7fd fa54 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003534:	2178      	movs	r1, #120	; 0x78
 8003536:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800353a:	f7fd fa4f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800353e:	2100      	movs	r1, #0
 8003540:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003544:	f7fd fa4a 	bl	80009dc <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003548:	2100      	movs	r1, #0
 800354a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800354e:	f7fd fa45 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8003552:	2178      	movs	r1, #120	; 0x78
 8003554:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003558:	f7fd fa40 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 800355c:	2100      	movs	r1, #0
 800355e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003562:	f7fd fa3b 	bl	80009dc <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8003566:	2100      	movs	r1, #0
 8003568:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800356c:	f7fd fa36 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003570:	2164      	movs	r1, #100	; 0x64
 8003572:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003576:	f7fd fa31 	bl	80009dc <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800357a:	2100      	movs	r1, #0
 800357c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003580:	f7fd fa2c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003584:	2133      	movs	r1, #51	; 0x33
 8003586:	f24d 1001 	movw	r0, #53505	; 0xd101
 800358a:	f7fd fa27 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800358e:	2100      	movs	r1, #0
 8003590:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003594:	f7fd fa22 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003598:	2134      	movs	r1, #52	; 0x34
 800359a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800359e:	f7fd fa1d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80035a2:	2100      	movs	r1, #0
 80035a4:	f24d 1004 	movw	r0, #53508	; 0xd104
 80035a8:	f7fd fa18 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80035ac:	213a      	movs	r1, #58	; 0x3a
 80035ae:	f24d 1005 	movw	r0, #53509	; 0xd105
 80035b2:	f7fd fa13 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80035b6:	2100      	movs	r1, #0
 80035b8:	f24d 1006 	movw	r0, #53510	; 0xd106
 80035bc:	f7fd fa0e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80035c0:	214a      	movs	r1, #74	; 0x4a
 80035c2:	f24d 1007 	movw	r0, #53511	; 0xd107
 80035c6:	f7fd fa09 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80035ca:	2100      	movs	r1, #0
 80035cc:	f24d 1008 	movw	r0, #53512	; 0xd108
 80035d0:	f7fd fa04 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80035d4:	215c      	movs	r1, #92	; 0x5c
 80035d6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80035da:	f7fd f9ff 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80035de:	2100      	movs	r1, #0
 80035e0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80035e4:	f7fd f9fa 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80035e8:	2181      	movs	r1, #129	; 0x81
 80035ea:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80035ee:	f7fd f9f5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80035f2:	2100      	movs	r1, #0
 80035f4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80035f8:	f7fd f9f0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80035fc:	21a6      	movs	r1, #166	; 0xa6
 80035fe:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003602:	f7fd f9eb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003606:	2100      	movs	r1, #0
 8003608:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800360c:	f7fd f9e6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003610:	21e5      	movs	r1, #229	; 0xe5
 8003612:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003616:	f7fd f9e1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800361a:	2101      	movs	r1, #1
 800361c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003620:	f7fd f9dc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003624:	2113      	movs	r1, #19
 8003626:	f24d 1011 	movw	r0, #53521	; 0xd111
 800362a:	f7fd f9d7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800362e:	2101      	movs	r1, #1
 8003630:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003634:	f7fd f9d2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003638:	2154      	movs	r1, #84	; 0x54
 800363a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800363e:	f7fd f9cd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003642:	2101      	movs	r1, #1
 8003644:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003648:	f7fd f9c8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 800364c:	2182      	movs	r1, #130	; 0x82
 800364e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003652:	f7fd f9c3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003656:	2101      	movs	r1, #1
 8003658:	f24d 1016 	movw	r0, #53526	; 0xd116
 800365c:	f7fd f9be 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003660:	21ca      	movs	r1, #202	; 0xca
 8003662:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003666:	f7fd f9b9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 800366a:	2102      	movs	r1, #2
 800366c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003670:	f7fd f9b4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003674:	2100      	movs	r1, #0
 8003676:	f24d 1019 	movw	r0, #53529	; 0xd119
 800367a:	f7fd f9af 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800367e:	2102      	movs	r1, #2
 8003680:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003684:	f7fd f9aa 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003688:	2101      	movs	r1, #1
 800368a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800368e:	f7fd f9a5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003692:	2102      	movs	r1, #2
 8003694:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003698:	f7fd f9a0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800369c:	2134      	movs	r1, #52	; 0x34
 800369e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80036a2:	f7fd f99b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80036a6:	2102      	movs	r1, #2
 80036a8:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80036ac:	f7fd f996 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80036b0:	2167      	movs	r1, #103	; 0x67
 80036b2:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80036b6:	f7fd f991 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80036ba:	2102      	movs	r1, #2
 80036bc:	f24d 1020 	movw	r0, #53536	; 0xd120
 80036c0:	f7fd f98c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80036c4:	2184      	movs	r1, #132	; 0x84
 80036c6:	f24d 1021 	movw	r0, #53537	; 0xd121
 80036ca:	f7fd f987 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80036ce:	2102      	movs	r1, #2
 80036d0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80036d4:	f7fd f982 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80036d8:	21a4      	movs	r1, #164	; 0xa4
 80036da:	f24d 1023 	movw	r0, #53539	; 0xd123
 80036de:	f7fd f97d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80036e2:	2102      	movs	r1, #2
 80036e4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80036e8:	f7fd f978 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80036ec:	21b7      	movs	r1, #183	; 0xb7
 80036ee:	f24d 1025 	movw	r0, #53541	; 0xd125
 80036f2:	f7fd f973 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80036f6:	2102      	movs	r1, #2
 80036f8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80036fc:	f7fd f96e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003700:	21cf      	movs	r1, #207	; 0xcf
 8003702:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003706:	f7fd f969 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800370a:	2102      	movs	r1, #2
 800370c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003710:	f7fd f964 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003714:	21de      	movs	r1, #222	; 0xde
 8003716:	f24d 1029 	movw	r0, #53545	; 0xd129
 800371a:	f7fd f95f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 800371e:	2102      	movs	r1, #2
 8003720:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003724:	f7fd f95a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003728:	21f2      	movs	r1, #242	; 0xf2
 800372a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800372e:	f7fd f955 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003732:	2102      	movs	r1, #2
 8003734:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003738:	f7fd f950 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 800373c:	21fe      	movs	r1, #254	; 0xfe
 800373e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003742:	f7fd f94b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003746:	2103      	movs	r1, #3
 8003748:	f24d 102e 	movw	r0, #53550	; 0xd12e
 800374c:	f7fd f946 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003750:	2110      	movs	r1, #16
 8003752:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003756:	f7fd f941 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 800375a:	2103      	movs	r1, #3
 800375c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003760:	f7fd f93c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003764:	2133      	movs	r1, #51	; 0x33
 8003766:	f24d 1031 	movw	r0, #53553	; 0xd131
 800376a:	f7fd f937 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 800376e:	2103      	movs	r1, #3
 8003770:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003774:	f7fd f932 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003778:	216d      	movs	r1, #109	; 0x6d
 800377a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800377e:	f7fd f92d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003782:	2100      	movs	r1, #0
 8003784:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003788:	f7fd f928 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 800378c:	2133      	movs	r1, #51	; 0x33
 800378e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003792:	f7fd f923 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003796:	2100      	movs	r1, #0
 8003798:	f24d 2002 	movw	r0, #53762	; 0xd202
 800379c:	f7fd f91e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80037a0:	2134      	movs	r1, #52	; 0x34
 80037a2:	f24d 2003 	movw	r0, #53763	; 0xd203
 80037a6:	f7fd f919 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80037aa:	2100      	movs	r1, #0
 80037ac:	f24d 2004 	movw	r0, #53764	; 0xd204
 80037b0:	f7fd f914 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80037b4:	213a      	movs	r1, #58	; 0x3a
 80037b6:	f24d 2005 	movw	r0, #53765	; 0xd205
 80037ba:	f7fd f90f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80037be:	2100      	movs	r1, #0
 80037c0:	f24d 2006 	movw	r0, #53766	; 0xd206
 80037c4:	f7fd f90a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80037c8:	214a      	movs	r1, #74	; 0x4a
 80037ca:	f24d 2007 	movw	r0, #53767	; 0xd207
 80037ce:	f7fd f905 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80037d2:	2100      	movs	r1, #0
 80037d4:	f24d 2008 	movw	r0, #53768	; 0xd208
 80037d8:	f7fd f900 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80037dc:	215c      	movs	r1, #92	; 0x5c
 80037de:	f24d 2009 	movw	r0, #53769	; 0xd209
 80037e2:	f7fd f8fb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80037e6:	2100      	movs	r1, #0
 80037e8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80037ec:	f7fd f8f6 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80037f0:	2181      	movs	r1, #129	; 0x81
 80037f2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80037f6:	f7fd f8f1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80037fa:	2100      	movs	r1, #0
 80037fc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003800:	f7fd f8ec 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003804:	21a6      	movs	r1, #166	; 0xa6
 8003806:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800380a:	f7fd f8e7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 800380e:	2100      	movs	r1, #0
 8003810:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003814:	f7fd f8e2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003818:	21e5      	movs	r1, #229	; 0xe5
 800381a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800381e:	f7fd f8dd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003822:	2101      	movs	r1, #1
 8003824:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003828:	f7fd f8d8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 800382c:	2113      	movs	r1, #19
 800382e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003832:	f7fd f8d3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003836:	2101      	movs	r1, #1
 8003838:	f24d 2012 	movw	r0, #53778	; 0xd212
 800383c:	f7fd f8ce 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003840:	2154      	movs	r1, #84	; 0x54
 8003842:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003846:	f7fd f8c9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 800384a:	2101      	movs	r1, #1
 800384c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003850:	f7fd f8c4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003854:	2182      	movs	r1, #130	; 0x82
 8003856:	f24d 2015 	movw	r0, #53781	; 0xd215
 800385a:	f7fd f8bf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 800385e:	2101      	movs	r1, #1
 8003860:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003864:	f7fd f8ba 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003868:	21ca      	movs	r1, #202	; 0xca
 800386a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800386e:	f7fd f8b5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003872:	2102      	movs	r1, #2
 8003874:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003878:	f7fd f8b0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 800387c:	2100      	movs	r1, #0
 800387e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003882:	f7fd f8ab 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003886:	2102      	movs	r1, #2
 8003888:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800388c:	f7fd f8a6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003890:	2101      	movs	r1, #1
 8003892:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003896:	f7fd f8a1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800389a:	2102      	movs	r1, #2
 800389c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80038a0:	f7fd f89c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80038a4:	2134      	movs	r1, #52	; 0x34
 80038a6:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80038aa:	f7fd f897 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80038ae:	2102      	movs	r1, #2
 80038b0:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80038b4:	f7fd f892 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80038b8:	2167      	movs	r1, #103	; 0x67
 80038ba:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80038be:	f7fd f88d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80038c2:	2102      	movs	r1, #2
 80038c4:	f24d 2020 	movw	r0, #53792	; 0xd220
 80038c8:	f7fd f888 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80038cc:	2184      	movs	r1, #132	; 0x84
 80038ce:	f24d 2021 	movw	r0, #53793	; 0xd221
 80038d2:	f7fd f883 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80038d6:	2102      	movs	r1, #2
 80038d8:	f24d 2022 	movw	r0, #53794	; 0xd222
 80038dc:	f7fd f87e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80038e0:	21a4      	movs	r1, #164	; 0xa4
 80038e2:	f24d 2023 	movw	r0, #53795	; 0xd223
 80038e6:	f7fd f879 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80038ea:	2102      	movs	r1, #2
 80038ec:	f24d 2024 	movw	r0, #53796	; 0xd224
 80038f0:	f7fd f874 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80038f4:	21b7      	movs	r1, #183	; 0xb7
 80038f6:	f24d 2025 	movw	r0, #53797	; 0xd225
 80038fa:	f7fd f86f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80038fe:	2102      	movs	r1, #2
 8003900:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003904:	f7fd f86a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003908:	21cf      	movs	r1, #207	; 0xcf
 800390a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800390e:	f7fd f865 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003912:	2102      	movs	r1, #2
 8003914:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003918:	f7fd f860 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 800391c:	21de      	movs	r1, #222	; 0xde
 800391e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003922:	f7fd f85b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003926:	2102      	movs	r1, #2
 8003928:	f24d 202a 	movw	r0, #53802	; 0xd22a
 800392c:	f7fd f856 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003930:	21f2      	movs	r1, #242	; 0xf2
 8003932:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003936:	f7fd f851 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 800393a:	2102      	movs	r1, #2
 800393c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003940:	f7fd f84c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003944:	21fe      	movs	r1, #254	; 0xfe
 8003946:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800394a:	f7fd f847 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 800394e:	2103      	movs	r1, #3
 8003950:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003954:	f7fd f842 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003958:	2110      	movs	r1, #16
 800395a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800395e:	f7fd f83d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003962:	2103      	movs	r1, #3
 8003964:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003968:	f7fd f838 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 800396c:	2133      	movs	r1, #51	; 0x33
 800396e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003972:	f7fd f833 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003976:	2103      	movs	r1, #3
 8003978:	f24d 2032 	movw	r0, #53810	; 0xd232
 800397c:	f7fd f82e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003980:	216d      	movs	r1, #109	; 0x6d
 8003982:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003986:	f7fd f829 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 800398a:	2100      	movs	r1, #0
 800398c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003990:	f7fd f824 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003994:	2133      	movs	r1, #51	; 0x33
 8003996:	f24d 3001 	movw	r0, #54017	; 0xd301
 800399a:	f7fd f81f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 800399e:	2100      	movs	r1, #0
 80039a0:	f24d 3002 	movw	r0, #54018	; 0xd302
 80039a4:	f7fd f81a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80039a8:	2134      	movs	r1, #52	; 0x34
 80039aa:	f24d 3003 	movw	r0, #54019	; 0xd303
 80039ae:	f7fd f815 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80039b2:	2100      	movs	r1, #0
 80039b4:	f24d 3004 	movw	r0, #54020	; 0xd304
 80039b8:	f7fd f810 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80039bc:	213a      	movs	r1, #58	; 0x3a
 80039be:	f24d 3005 	movw	r0, #54021	; 0xd305
 80039c2:	f7fd f80b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80039c6:	2100      	movs	r1, #0
 80039c8:	f24d 3006 	movw	r0, #54022	; 0xd306
 80039cc:	f7fd f806 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80039d0:	214a      	movs	r1, #74	; 0x4a
 80039d2:	f24d 3007 	movw	r0, #54023	; 0xd307
 80039d6:	f7fd f801 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 80039da:	2100      	movs	r1, #0
 80039dc:	f24d 3008 	movw	r0, #54024	; 0xd308
 80039e0:	f7fc fffc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 80039e4:	215c      	movs	r1, #92	; 0x5c
 80039e6:	f24d 3009 	movw	r0, #54025	; 0xd309
 80039ea:	f7fc fff7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 80039ee:	2100      	movs	r1, #0
 80039f0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80039f4:	f7fc fff2 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 80039f8:	2181      	movs	r1, #129	; 0x81
 80039fa:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80039fe:	f7fc ffed 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003a02:	2100      	movs	r1, #0
 8003a04:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003a08:	f7fc ffe8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003a0c:	21a6      	movs	r1, #166	; 0xa6
 8003a0e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003a12:	f7fc ffe3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003a16:	2100      	movs	r1, #0
 8003a18:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003a1c:	f7fc ffde 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003a20:	21e5      	movs	r1, #229	; 0xe5
 8003a22:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003a26:	f7fc ffd9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003a30:	f7fc ffd4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003a34:	2113      	movs	r1, #19
 8003a36:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003a3a:	f7fc ffcf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003a3e:	2101      	movs	r1, #1
 8003a40:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003a44:	f7fc ffca 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003a48:	2154      	movs	r1, #84	; 0x54
 8003a4a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003a4e:	f7fc ffc5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003a52:	2101      	movs	r1, #1
 8003a54:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003a58:	f7fc ffc0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003a5c:	2182      	movs	r1, #130	; 0x82
 8003a5e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003a62:	f7fc ffbb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003a66:	2101      	movs	r1, #1
 8003a68:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003a6c:	f7fc ffb6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003a70:	21ca      	movs	r1, #202	; 0xca
 8003a72:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003a76:	f7fc ffb1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003a80:	f7fc ffac 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003a84:	2100      	movs	r1, #0
 8003a86:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003a8a:	f7fc ffa7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003a8e:	2102      	movs	r1, #2
 8003a90:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003a94:	f7fc ffa2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003a98:	2101      	movs	r1, #1
 8003a9a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003a9e:	f7fc ff9d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003aa8:	f7fc ff98 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003aac:	2134      	movs	r1, #52	; 0x34
 8003aae:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003ab2:	f7fc ff93 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003abc:	f7fc ff8e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003ac0:	2167      	movs	r1, #103	; 0x67
 8003ac2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003ac6:	f7fc ff89 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003aca:	2102      	movs	r1, #2
 8003acc:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003ad0:	f7fc ff84 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003ad4:	2184      	movs	r1, #132	; 0x84
 8003ad6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003ada:	f7fc ff7f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003ade:	2102      	movs	r1, #2
 8003ae0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003ae4:	f7fc ff7a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003ae8:	21a4      	movs	r1, #164	; 0xa4
 8003aea:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003aee:	f7fc ff75 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003af2:	2102      	movs	r1, #2
 8003af4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003af8:	f7fc ff70 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003afc:	21b7      	movs	r1, #183	; 0xb7
 8003afe:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003b02:	f7fc ff6b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003b06:	2102      	movs	r1, #2
 8003b08:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003b0c:	f7fc ff66 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003b10:	21cf      	movs	r1, #207	; 0xcf
 8003b12:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003b16:	f7fc ff61 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003b20:	f7fc ff5c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003b24:	21de      	movs	r1, #222	; 0xde
 8003b26:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003b2a:	f7fc ff57 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003b2e:	2102      	movs	r1, #2
 8003b30:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003b34:	f7fc ff52 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003b38:	21f2      	movs	r1, #242	; 0xf2
 8003b3a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003b3e:	f7fc ff4d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003b42:	2102      	movs	r1, #2
 8003b44:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003b48:	f7fc ff48 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003b4c:	21fe      	movs	r1, #254	; 0xfe
 8003b4e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003b52:	f7fc ff43 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003b56:	2103      	movs	r1, #3
 8003b58:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003b5c:	f7fc ff3e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003b60:	2110      	movs	r1, #16
 8003b62:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003b66:	f7fc ff39 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003b70:	f7fc ff34 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003b74:	2133      	movs	r1, #51	; 0x33
 8003b76:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003b7a:	f7fc ff2f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003b7e:	2103      	movs	r1, #3
 8003b80:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003b84:	f7fc ff2a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003b88:	216d      	movs	r1, #109	; 0x6d
 8003b8a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003b8e:	f7fc ff25 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003b92:	2100      	movs	r1, #0
 8003b94:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003b98:	f7fc ff20 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003b9c:	2133      	movs	r1, #51	; 0x33
 8003b9e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003ba2:	f7fc ff1b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003bac:	f7fc ff16 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003bb0:	2134      	movs	r1, #52	; 0x34
 8003bb2:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003bb6:	f7fc ff11 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003bba:	2100      	movs	r1, #0
 8003bbc:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003bc0:	f7fc ff0c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003bc4:	213a      	movs	r1, #58	; 0x3a
 8003bc6:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003bca:	f7fc ff07 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003bd4:	f7fc ff02 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003bd8:	214a      	movs	r1, #74	; 0x4a
 8003bda:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003bde:	f7fc fefd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003be2:	2100      	movs	r1, #0
 8003be4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003be8:	f7fc fef8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003bec:	215c      	movs	r1, #92	; 0x5c
 8003bee:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003bf2:	f7fc fef3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003bfc:	f7fc feee 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003c00:	2181      	movs	r1, #129	; 0x81
 8003c02:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003c06:	f7fc fee9 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003c10:	f7fc fee4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003c14:	21a6      	movs	r1, #166	; 0xa6
 8003c16:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003c1a:	f7fc fedf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003c1e:	2100      	movs	r1, #0
 8003c20:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003c24:	f7fc feda 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003c28:	21e5      	movs	r1, #229	; 0xe5
 8003c2a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003c2e:	f7fc fed5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003c32:	2101      	movs	r1, #1
 8003c34:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003c38:	f7fc fed0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003c3c:	2113      	movs	r1, #19
 8003c3e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003c42:	f7fc fecb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003c46:	2101      	movs	r1, #1
 8003c48:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003c4c:	f7fc fec6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003c50:	2154      	movs	r1, #84	; 0x54
 8003c52:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003c56:	f7fc fec1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003c60:	f7fc febc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003c64:	2182      	movs	r1, #130	; 0x82
 8003c66:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003c6a:	f7fc feb7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003c6e:	2101      	movs	r1, #1
 8003c70:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003c74:	f7fc feb2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003c78:	21ca      	movs	r1, #202	; 0xca
 8003c7a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003c7e:	f7fc fead 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003c82:	2102      	movs	r1, #2
 8003c84:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003c88:	f7fc fea8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003c92:	f7fc fea3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003c96:	2102      	movs	r1, #2
 8003c98:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003c9c:	f7fc fe9e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003ca6:	f7fc fe99 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003caa:	2102      	movs	r1, #2
 8003cac:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003cb0:	f7fc fe94 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003cb4:	2134      	movs	r1, #52	; 0x34
 8003cb6:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003cba:	f7fc fe8f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003cc4:	f7fc fe8a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003cc8:	2167      	movs	r1, #103	; 0x67
 8003cca:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003cce:	f7fc fe85 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003cd8:	f7fc fe80 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003cdc:	2184      	movs	r1, #132	; 0x84
 8003cde:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003ce2:	f7fc fe7b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003cec:	f7fc fe76 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003cf0:	21a4      	movs	r1, #164	; 0xa4
 8003cf2:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003cf6:	f7fc fe71 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003d00:	f7fc fe6c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003d04:	21b7      	movs	r1, #183	; 0xb7
 8003d06:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003d0a:	f7fc fe67 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003d0e:	2102      	movs	r1, #2
 8003d10:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003d14:	f7fc fe62 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003d18:	21cf      	movs	r1, #207	; 0xcf
 8003d1a:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003d1e:	f7fc fe5d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003d22:	2102      	movs	r1, #2
 8003d24:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003d28:	f7fc fe58 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003d2c:	21de      	movs	r1, #222	; 0xde
 8003d2e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003d32:	f7fc fe53 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003d36:	2102      	movs	r1, #2
 8003d38:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003d3c:	f7fc fe4e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003d40:	21f2      	movs	r1, #242	; 0xf2
 8003d42:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003d46:	f7fc fe49 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003d50:	f7fc fe44 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003d54:	21fe      	movs	r1, #254	; 0xfe
 8003d56:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003d5a:	f7fc fe3f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003d5e:	2103      	movs	r1, #3
 8003d60:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003d64:	f7fc fe3a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003d68:	2110      	movs	r1, #16
 8003d6a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003d6e:	f7fc fe35 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003d72:	2103      	movs	r1, #3
 8003d74:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003d78:	f7fc fe30 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003d7c:	2133      	movs	r1, #51	; 0x33
 8003d7e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003d82:	f7fc fe2b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003d86:	2103      	movs	r1, #3
 8003d88:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003d8c:	f7fc fe26 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003d90:	216d      	movs	r1, #109	; 0x6d
 8003d92:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003d96:	f7fc fe21 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003da0:	f7fc fe1c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003da4:	2133      	movs	r1, #51	; 0x33
 8003da6:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003daa:	f7fc fe17 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003dae:	2100      	movs	r1, #0
 8003db0:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003db4:	f7fc fe12 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003db8:	2134      	movs	r1, #52	; 0x34
 8003dba:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003dbe:	f7fc fe0d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003dc8:	f7fc fe08 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003dcc:	213a      	movs	r1, #58	; 0x3a
 8003dce:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003dd2:	f7fc fe03 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003ddc:	f7fc fdfe 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003de0:	214a      	movs	r1, #74	; 0x4a
 8003de2:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003de6:	f7fc fdf9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003dea:	2100      	movs	r1, #0
 8003dec:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003df0:	f7fc fdf4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003df4:	215c      	movs	r1, #92	; 0x5c
 8003df6:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003dfa:	f7fc fdef 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003e04:	f7fc fdea 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003e08:	2181      	movs	r1, #129	; 0x81
 8003e0a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003e0e:	f7fc fde5 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003e12:	2100      	movs	r1, #0
 8003e14:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003e18:	f7fc fde0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003e1c:	21a6      	movs	r1, #166	; 0xa6
 8003e1e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003e22:	f7fc fddb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003e26:	2100      	movs	r1, #0
 8003e28:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003e2c:	f7fc fdd6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003e30:	21e5      	movs	r1, #229	; 0xe5
 8003e32:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003e36:	f7fc fdd1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003e40:	f7fc fdcc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003e44:	2113      	movs	r1, #19
 8003e46:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003e4a:	f7fc fdc7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003e4e:	2101      	movs	r1, #1
 8003e50:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003e54:	f7fc fdc2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003e58:	2154      	movs	r1, #84	; 0x54
 8003e5a:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003e5e:	f7fc fdbd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003e62:	2101      	movs	r1, #1
 8003e64:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003e68:	f7fc fdb8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003e6c:	2182      	movs	r1, #130	; 0x82
 8003e6e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003e72:	f7fc fdb3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003e76:	2101      	movs	r1, #1
 8003e78:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003e7c:	f7fc fdae 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003e80:	21ca      	movs	r1, #202	; 0xca
 8003e82:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003e86:	f7fc fda9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003e90:	f7fc fda4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003e94:	2100      	movs	r1, #0
 8003e96:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003e9a:	f7fc fd9f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003ea4:	f7fc fd9a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003eae:	f7fc fd95 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003eb8:	f7fc fd90 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003ebc:	2134      	movs	r1, #52	; 0x34
 8003ebe:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003ec2:	f7fc fd8b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003ecc:	f7fc fd86 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003ed0:	2167      	movs	r1, #103	; 0x67
 8003ed2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003ed6:	f7fc fd81 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003eda:	2102      	movs	r1, #2
 8003edc:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003ee0:	f7fc fd7c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003ee4:	2184      	movs	r1, #132	; 0x84
 8003ee6:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003eea:	f7fc fd77 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003eee:	2102      	movs	r1, #2
 8003ef0:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003ef4:	f7fc fd72 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003ef8:	21a4      	movs	r1, #164	; 0xa4
 8003efa:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003efe:	f7fc fd6d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003f02:	2102      	movs	r1, #2
 8003f04:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003f08:	f7fc fd68 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003f0c:	21b7      	movs	r1, #183	; 0xb7
 8003f0e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003f12:	f7fc fd63 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003f16:	2102      	movs	r1, #2
 8003f18:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003f1c:	f7fc fd5e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003f20:	21cf      	movs	r1, #207	; 0xcf
 8003f22:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003f26:	f7fc fd59 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003f30:	f7fc fd54 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003f34:	21de      	movs	r1, #222	; 0xde
 8003f36:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003f3a:	f7fc fd4f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003f3e:	2102      	movs	r1, #2
 8003f40:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003f44:	f7fc fd4a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003f48:	21f2      	movs	r1, #242	; 0xf2
 8003f4a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003f4e:	f7fc fd45 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003f52:	2102      	movs	r1, #2
 8003f54:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003f58:	f7fc fd40 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003f5c:	21fe      	movs	r1, #254	; 0xfe
 8003f5e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003f62:	f7fc fd3b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003f66:	2103      	movs	r1, #3
 8003f68:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003f6c:	f7fc fd36 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003f70:	2110      	movs	r1, #16
 8003f72:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003f76:	f7fc fd31 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003f7a:	2103      	movs	r1, #3
 8003f7c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003f80:	f7fc fd2c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003f84:	2133      	movs	r1, #51	; 0x33
 8003f86:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003f8a:	f7fc fd27 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003f8e:	2103      	movs	r1, #3
 8003f90:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003f94:	f7fc fd22 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003f98:	216d      	movs	r1, #109	; 0x6d
 8003f9a:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003f9e:	f7fc fd1d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003fa8:	f7fc fd18 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003fac:	2133      	movs	r1, #51	; 0x33
 8003fae:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003fb2:	f7fc fd13 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003fbc:	f7fc fd0e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003fc0:	2134      	movs	r1, #52	; 0x34
 8003fc2:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003fc6:	f7fc fd09 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003fca:	2100      	movs	r1, #0
 8003fcc:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003fd0:	f7fc fd04 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003fd4:	213a      	movs	r1, #58	; 0x3a
 8003fd6:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003fda:	f7fc fcff 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003fde:	2100      	movs	r1, #0
 8003fe0:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003fe4:	f7fc fcfa 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003fe8:	214a      	movs	r1, #74	; 0x4a
 8003fea:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003fee:	f7fc fcf5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003ff8:	f7fc fcf0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003ffc:	215c      	movs	r1, #92	; 0x5c
 8003ffe:	f24d 6009 	movw	r0, #54793	; 0xd609
 8004002:	f7fc fceb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8004006:	2100      	movs	r1, #0
 8004008:	f24d 600a 	movw	r0, #54794	; 0xd60a
 800400c:	f7fc fce6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004010:	2181      	movs	r1, #129	; 0x81
 8004012:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8004016:	f7fc fce1 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 800401a:	2100      	movs	r1, #0
 800401c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004020:	f7fc fcdc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8004024:	21a6      	movs	r1, #166	; 0xa6
 8004026:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800402a:	f7fc fcd7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 800402e:	2100      	movs	r1, #0
 8004030:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004034:	f7fc fcd2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004038:	21e5      	movs	r1, #229	; 0xe5
 800403a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800403e:	f7fc fccd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8004042:	2101      	movs	r1, #1
 8004044:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004048:	f7fc fcc8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 800404c:	2113      	movs	r1, #19
 800404e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004052:	f7fc fcc3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8004056:	2101      	movs	r1, #1
 8004058:	f24d 6012 	movw	r0, #54802	; 0xd612
 800405c:	f7fc fcbe 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004060:	2154      	movs	r1, #84	; 0x54
 8004062:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004066:	f7fc fcb9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800406a:	2101      	movs	r1, #1
 800406c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004070:	f7fc fcb4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004074:	2182      	movs	r1, #130	; 0x82
 8004076:	f24d 6015 	movw	r0, #54805	; 0xd615
 800407a:	f7fc fcaf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800407e:	2101      	movs	r1, #1
 8004080:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004084:	f7fc fcaa 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004088:	21ca      	movs	r1, #202	; 0xca
 800408a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800408e:	f7fc fca5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004092:	2102      	movs	r1, #2
 8004094:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004098:	f7fc fca0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800409c:	2100      	movs	r1, #0
 800409e:	f24d 6019 	movw	r0, #54809	; 0xd619
 80040a2:	f7fc fc9b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 80040a6:	2102      	movs	r1, #2
 80040a8:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80040ac:	f7fc fc96 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 80040b0:	2101      	movs	r1, #1
 80040b2:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80040b6:	f7fc fc91 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 80040ba:	2102      	movs	r1, #2
 80040bc:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80040c0:	f7fc fc8c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80040c4:	2134      	movs	r1, #52	; 0x34
 80040c6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80040ca:	f7fc fc87 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80040ce:	2102      	movs	r1, #2
 80040d0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80040d4:	f7fc fc82 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80040d8:	2167      	movs	r1, #103	; 0x67
 80040da:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80040de:	f7fc fc7d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80040e2:	2102      	movs	r1, #2
 80040e4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80040e8:	f7fc fc78 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80040ec:	2184      	movs	r1, #132	; 0x84
 80040ee:	f24d 6021 	movw	r0, #54817	; 0xd621
 80040f2:	f7fc fc73 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80040f6:	2102      	movs	r1, #2
 80040f8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80040fc:	f7fc fc6e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004100:	21a4      	movs	r1, #164	; 0xa4
 8004102:	f24d 6023 	movw	r0, #54819	; 0xd623
 8004106:	f7fc fc69 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 800410a:	2102      	movs	r1, #2
 800410c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004110:	f7fc fc64 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8004114:	21b7      	movs	r1, #183	; 0xb7
 8004116:	f24d 6025 	movw	r0, #54821	; 0xd625
 800411a:	f7fc fc5f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 800411e:	2102      	movs	r1, #2
 8004120:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004124:	f7fc fc5a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004128:	21cf      	movs	r1, #207	; 0xcf
 800412a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800412e:	f7fc fc55 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004132:	2102      	movs	r1, #2
 8004134:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004138:	f7fc fc50 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 800413c:	21de      	movs	r1, #222	; 0xde
 800413e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004142:	f7fc fc4b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8004146:	2102      	movs	r1, #2
 8004148:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800414c:	f7fc fc46 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004150:	21f2      	movs	r1, #242	; 0xf2
 8004152:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004156:	f7fc fc41 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 800415a:	2102      	movs	r1, #2
 800415c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004160:	f7fc fc3c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004164:	21fe      	movs	r1, #254	; 0xfe
 8004166:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800416a:	f7fc fc37 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800416e:	2103      	movs	r1, #3
 8004170:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004174:	f7fc fc32 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004178:	2110      	movs	r1, #16
 800417a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800417e:	f7fc fc2d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004182:	2103      	movs	r1, #3
 8004184:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004188:	f7fc fc28 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800418c:	2133      	movs	r1, #51	; 0x33
 800418e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004192:	f7fc fc23 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004196:	2103      	movs	r1, #3
 8004198:	f24d 6032 	movw	r0, #54834	; 0xd632
 800419c:	f7fc fc1e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 80041a0:	216d      	movs	r1, #109	; 0x6d
 80041a2:	f24d 6033 	movw	r0, #54835	; 0xd633
 80041a6:	f7fc fc19 	bl	80009dc <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 80041aa:	2155      	movs	r1, #85	; 0x55
 80041ac:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80041b0:	f7fc fc14 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80041b4:	21aa      	movs	r1, #170	; 0xaa
 80041b6:	f24f 0001 	movw	r0, #61441	; 0xf001
 80041ba:	f7fc fc0f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80041be:	2152      	movs	r1, #82	; 0x52
 80041c0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80041c4:	f7fc fc0a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80041c8:	2108      	movs	r1, #8
 80041ca:	f24f 0003 	movw	r0, #61443	; 0xf003
 80041ce:	f7fc fc05 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80041d2:	2100      	movs	r1, #0
 80041d4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80041d8:	f7fc fc00 	bl	80009dc <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80041dc:	21cc      	movs	r1, #204	; 0xcc
 80041de:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80041e2:	f7fc fbfb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80041e6:	2100      	movs	r1, #0
 80041e8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80041ec:	f7fc fbf6 	bl	80009dc <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80041f0:	2105      	movs	r1, #5
 80041f2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80041f6:	f7fc fbf1 	bl	80009dc <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80041fa:	2170      	movs	r1, #112	; 0x70
 80041fc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004200:	f7fc fbec 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8004204:	2170      	movs	r1, #112	; 0x70
 8004206:	f24b 7001 	movw	r0, #46849	; 0xb701
 800420a:	f7fc fbe7 	bl	80009dc <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 800420e:	2101      	movs	r1, #1
 8004210:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004214:	f7fc fbe2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004218:	2103      	movs	r1, #3
 800421a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800421e:	f7fc fbdd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004222:	2103      	movs	r1, #3
 8004224:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004228:	f7fc fbd8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800422c:	2103      	movs	r1, #3
 800422e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004232:	f7fc fbd3 	bl	80009dc <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004236:	2102      	movs	r1, #2
 8004238:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800423c:	f7fc fbce 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004240:	2100      	movs	r1, #0
 8004242:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004246:	f7fc fbc9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800424a:	2100      	movs	r1, #0
 800424c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004250:	f7fc fbc4 	bl	80009dc <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004254:	21d0      	movs	r1, #208	; 0xd0
 8004256:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800425a:	f7fc fbbf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 800425e:	2102      	movs	r1, #2
 8004260:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004264:	f7fc fbba 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004268:	2150      	movs	r1, #80	; 0x50
 800426a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800426e:	f7fc fbb5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004272:	2150      	movs	r1, #80	; 0x50
 8004274:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004278:	f7fc fbb0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800427c:	2150      	movs	r1, #80	; 0x50
 800427e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004282:	f7fc fbab 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004286:	2100      	movs	r1, #0
 8004288:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800428c:	f7fc fba6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004290:	2155      	movs	r1, #85	; 0x55
 8004292:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004296:	f7fc fba1 	bl	80009dc <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800429a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800429e:	f7fc fb11 	bl	80008c4 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 80042a2:	2001      	movs	r0, #1
 80042a4:	f002 f92e 	bl	8006504 <HAL_Delay>
		LCD_WR_REG(0x2900);
 80042a8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80042ac:	f7fc fb0a 	bl	80008c4 <LCD_WR_REG>
 80042b0:	f001 bd18 	b.w	8005ce4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 80042b4:	4bec      	ldr	r3, [pc, #944]	; (8004668 <LCD_Init+0x27b8>)
 80042b6:	889b      	ldrh	r3, [r3, #4]
 80042b8:	f249 3225 	movw	r2, #37669	; 0x9325
 80042bc:	4293      	cmp	r3, r2
 80042be:	f040 80d7 	bne.w	8004470 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80042c2:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80042c6:	20e5      	movs	r0, #229	; 0xe5
 80042c8:	f7fc fb88 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80042cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7fc fb83 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80042d6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80042da:	2002      	movs	r0, #2
 80042dc:	f7fc fb7e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80042e0:	f241 0130 	movw	r1, #4144	; 0x1030
 80042e4:	2003      	movs	r0, #3
 80042e6:	f7fc fb79 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80042ea:	2100      	movs	r1, #0
 80042ec:	2004      	movs	r0, #4
 80042ee:	f7fc fb75 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80042f2:	f240 2102 	movw	r1, #514	; 0x202
 80042f6:	2008      	movs	r0, #8
 80042f8:	f7fc fb70 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80042fc:	2100      	movs	r1, #0
 80042fe:	2009      	movs	r0, #9
 8004300:	f7fc fb6c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004304:	2100      	movs	r1, #0
 8004306:	200a      	movs	r0, #10
 8004308:	f7fc fb68 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800430c:	2100      	movs	r1, #0
 800430e:	200c      	movs	r0, #12
 8004310:	f7fc fb64 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8004314:	2100      	movs	r1, #0
 8004316:	200d      	movs	r0, #13
 8004318:	f7fc fb60 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800431c:	2100      	movs	r1, #0
 800431e:	200f      	movs	r0, #15
 8004320:	f7fc fb5c 	bl	80009dc <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004324:	2100      	movs	r1, #0
 8004326:	2010      	movs	r0, #16
 8004328:	f7fc fb58 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800432c:	2107      	movs	r1, #7
 800432e:	2011      	movs	r0, #17
 8004330:	f7fc fb54 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004334:	2100      	movs	r1, #0
 8004336:	2012      	movs	r0, #18
 8004338:	f7fc fb50 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800433c:	2100      	movs	r1, #0
 800433e:	2013      	movs	r0, #19
 8004340:	f7fc fb4c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8004344:	2100      	movs	r1, #0
 8004346:	2007      	movs	r0, #7
 8004348:	f7fc fb48 	bl	80009dc <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 800434c:	f241 6190 	movw	r1, #5776	; 0x1690
 8004350:	2010      	movs	r0, #16
 8004352:	f7fc fb43 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004356:	f240 2127 	movw	r1, #551	; 0x227
 800435a:	2011      	movs	r0, #17
 800435c:	f7fc fb3e 	bl	80009dc <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004360:	219d      	movs	r1, #157	; 0x9d
 8004362:	2012      	movs	r0, #18
 8004364:	f7fc fb3a 	bl	80009dc <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004368:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800436c:	2013      	movs	r0, #19
 800436e:	f7fc fb35 	bl	80009dc <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004372:	2125      	movs	r1, #37	; 0x25
 8004374:	2029      	movs	r0, #41	; 0x29
 8004376:	f7fc fb31 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800437a:	210d      	movs	r1, #13
 800437c:	202b      	movs	r0, #43	; 0x2b
 800437e:	f7fc fb2d 	bl	80009dc <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004382:	2107      	movs	r1, #7
 8004384:	2030      	movs	r0, #48	; 0x30
 8004386:	f7fc fb29 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800438a:	f240 3103 	movw	r1, #771	; 0x303
 800438e:	2031      	movs	r0, #49	; 0x31
 8004390:	f7fc fb24 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004394:	2103      	movs	r1, #3
 8004396:	2032      	movs	r0, #50	; 0x32
 8004398:	f7fc fb20 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800439c:	f240 2106 	movw	r1, #518	; 0x206
 80043a0:	2035      	movs	r0, #53	; 0x35
 80043a2:	f7fc fb1b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 80043a6:	2108      	movs	r1, #8
 80043a8:	2036      	movs	r0, #54	; 0x36
 80043aa:	f7fc fb17 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80043ae:	f240 4106 	movw	r1, #1030	; 0x406
 80043b2:	2037      	movs	r0, #55	; 0x37
 80043b4:	f7fc fb12 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 80043b8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80043bc:	2038      	movs	r0, #56	; 0x38
 80043be:	f7fc fb0d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80043c2:	2107      	movs	r1, #7
 80043c4:	2039      	movs	r0, #57	; 0x39
 80043c6:	f7fc fb09 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80043ca:	f240 6102 	movw	r1, #1538	; 0x602
 80043ce:	203c      	movs	r0, #60	; 0x3c
 80043d0:	f7fc fb04 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80043d4:	2108      	movs	r1, #8
 80043d6:	203d      	movs	r0, #61	; 0x3d
 80043d8:	f7fc fb00 	bl	80009dc <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80043dc:	2100      	movs	r1, #0
 80043de:	2050      	movs	r0, #80	; 0x50
 80043e0:	f7fc fafc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80043e4:	21ef      	movs	r1, #239	; 0xef
 80043e6:	2051      	movs	r0, #81	; 0x51
 80043e8:	f7fc faf8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80043ec:	2100      	movs	r1, #0
 80043ee:	2052      	movs	r0, #82	; 0x52
 80043f0:	f7fc faf4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80043f4:	f240 113f 	movw	r1, #319	; 0x13f
 80043f8:	2053      	movs	r0, #83	; 0x53
 80043fa:	f7fc faef 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80043fe:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004402:	2060      	movs	r0, #96	; 0x60
 8004404:	f7fc faea 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004408:	2101      	movs	r1, #1
 800440a:	2061      	movs	r0, #97	; 0x61
 800440c:	f7fc fae6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004410:	2100      	movs	r1, #0
 8004412:	206a      	movs	r0, #106	; 0x6a
 8004414:	f7fc fae2 	bl	80009dc <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004418:	2100      	movs	r1, #0
 800441a:	2080      	movs	r0, #128	; 0x80
 800441c:	f7fc fade 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004420:	2100      	movs	r1, #0
 8004422:	2081      	movs	r0, #129	; 0x81
 8004424:	f7fc fada 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004428:	2100      	movs	r1, #0
 800442a:	2082      	movs	r0, #130	; 0x82
 800442c:	f7fc fad6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004430:	2100      	movs	r1, #0
 8004432:	2083      	movs	r0, #131	; 0x83
 8004434:	f7fc fad2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004438:	2100      	movs	r1, #0
 800443a:	2084      	movs	r0, #132	; 0x84
 800443c:	f7fc face 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004440:	2100      	movs	r1, #0
 8004442:	2085      	movs	r0, #133	; 0x85
 8004444:	f7fc faca 	bl	80009dc <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004448:	2110      	movs	r1, #16
 800444a:	2090      	movs	r0, #144	; 0x90
 800444c:	f7fc fac6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004450:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004454:	2092      	movs	r0, #146	; 0x92
 8004456:	f7fc fac1 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 800445a:	f240 1133 	movw	r1, #307	; 0x133
 800445e:	2007      	movs	r0, #7
 8004460:	f7fc fabc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8004464:	2122      	movs	r1, #34	; 0x22
 8004466:	2000      	movs	r0, #0
 8004468:	f7fc fab8 	bl	80009dc <LCD_WriteReg>
 800446c:	f001 bc3a 	b.w	8005ce4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004470:	4b7d      	ldr	r3, [pc, #500]	; (8004668 <LCD_Init+0x27b8>)
 8004472:	889b      	ldrh	r3, [r3, #4]
 8004474:	f249 3228 	movw	r2, #37672	; 0x9328
 8004478:	4293      	cmp	r3, r2
 800447a:	f040 80f7 	bne.w	800466c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800447e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004482:	20ec      	movs	r0, #236	; 0xec
 8004484:	f7fc faaa 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004488:	f241 2134 	movw	r1, #4660	; 0x1234
 800448c:	20ef      	movs	r0, #239	; 0xef
 800448e:	f7fc faa5 	bl	80009dc <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004496:	2001      	movs	r0, #1
 8004498:	f7fc faa0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800449c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80044a0:	2002      	movs	r0, #2
 80044a2:	f7fc fa9b 	bl	80009dc <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80044a6:	f241 0130 	movw	r1, #4144	; 0x1030
 80044aa:	2003      	movs	r0, #3
 80044ac:	f7fc fa96 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80044b0:	2100      	movs	r1, #0
 80044b2:	2004      	movs	r0, #4
 80044b4:	f7fc fa92 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80044b8:	f240 2102 	movw	r1, #514	; 0x202
 80044bc:	2008      	movs	r0, #8
 80044be:	f7fc fa8d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80044c2:	2100      	movs	r1, #0
 80044c4:	2009      	movs	r0, #9
 80044c6:	f7fc fa89 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80044ca:	2100      	movs	r1, #0
 80044cc:	200a      	movs	r0, #10
 80044ce:	f7fc fa85 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80044d2:	2101      	movs	r1, #1
 80044d4:	200c      	movs	r0, #12
 80044d6:	f7fc fa81 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80044da:	2100      	movs	r1, #0
 80044dc:	200d      	movs	r0, #13
 80044de:	f7fc fa7d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80044e2:	2100      	movs	r1, #0
 80044e4:	200f      	movs	r0, #15
 80044e6:	f7fc fa79 	bl	80009dc <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80044ea:	2100      	movs	r1, #0
 80044ec:	2010      	movs	r0, #16
 80044ee:	f7fc fa75 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80044f2:	2107      	movs	r1, #7
 80044f4:	2011      	movs	r0, #17
 80044f6:	f7fc fa71 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80044fa:	2100      	movs	r1, #0
 80044fc:	2012      	movs	r0, #18
 80044fe:	f7fc fa6d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004502:	2100      	movs	r1, #0
 8004504:	2013      	movs	r0, #19
 8004506:	f7fc fa69 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800450a:	2101      	movs	r1, #1
 800450c:	2007      	movs	r0, #7
 800450e:	f7fc fa65 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 8004512:	2032      	movs	r0, #50	; 0x32
 8004514:	f001 fff6 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004518:	f241 4190 	movw	r1, #5264	; 0x1490
 800451c:	2010      	movs	r0, #16
 800451e:	f7fc fa5d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004522:	f240 2127 	movw	r1, #551	; 0x227
 8004526:	2011      	movs	r0, #17
 8004528:	f7fc fa58 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 800452c:	2032      	movs	r0, #50	; 0x32
 800452e:	f001 ffe9 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004532:	218a      	movs	r1, #138	; 0x8a
 8004534:	2012      	movs	r0, #18
 8004536:	f7fc fa51 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 800453a:	2032      	movs	r0, #50	; 0x32
 800453c:	f001 ffe2 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004540:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004544:	2013      	movs	r0, #19
 8004546:	f7fc fa49 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 800454a:	2106      	movs	r1, #6
 800454c:	2029      	movs	r0, #41	; 0x29
 800454e:	f7fc fa45 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8004552:	210d      	movs	r1, #13
 8004554:	202b      	movs	r0, #43	; 0x2b
 8004556:	f7fc fa41 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 800455a:	2032      	movs	r0, #50	; 0x32
 800455c:	f001 ffd2 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004560:	2100      	movs	r1, #0
 8004562:	2020      	movs	r0, #32
 8004564:	f7fc fa3a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004568:	2100      	movs	r1, #0
 800456a:	2021      	movs	r0, #33	; 0x21
 800456c:	f7fc fa36 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 8004570:	2032      	movs	r0, #50	; 0x32
 8004572:	f001 ffc7 	bl	8006504 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004576:	2100      	movs	r1, #0
 8004578:	2030      	movs	r0, #48	; 0x30
 800457a:	f7fc fa2f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800457e:	f240 6104 	movw	r1, #1540	; 0x604
 8004582:	2031      	movs	r0, #49	; 0x31
 8004584:	f7fc fa2a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004588:	f240 3105 	movw	r1, #773	; 0x305
 800458c:	2032      	movs	r0, #50	; 0x32
 800458e:	f7fc fa25 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004592:	2100      	movs	r1, #0
 8004594:	2035      	movs	r0, #53	; 0x35
 8004596:	f7fc fa21 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800459a:	f640 4109 	movw	r1, #3081	; 0xc09
 800459e:	2036      	movs	r0, #54	; 0x36
 80045a0:	f7fc fa1c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80045a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80045a8:	2037      	movs	r0, #55	; 0x37
 80045aa:	f7fc fa17 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80045ae:	f240 3101 	movw	r1, #769	; 0x301
 80045b2:	2038      	movs	r0, #56	; 0x38
 80045b4:	f7fc fa12 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80045b8:	f240 7107 	movw	r1, #1799	; 0x707
 80045bc:	2039      	movs	r0, #57	; 0x39
 80045be:	f7fc fa0d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80045c2:	2100      	movs	r1, #0
 80045c4:	203c      	movs	r0, #60	; 0x3c
 80045c6:	f7fc fa09 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80045ca:	f640 210a 	movw	r1, #2570	; 0xa0a
 80045ce:	203d      	movs	r0, #61	; 0x3d
 80045d0:	f7fc fa04 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 80045d4:	2032      	movs	r0, #50	; 0x32
 80045d6:	f001 ff95 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80045da:	2100      	movs	r1, #0
 80045dc:	2050      	movs	r0, #80	; 0x50
 80045de:	f7fc f9fd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80045e2:	21ef      	movs	r1, #239	; 0xef
 80045e4:	2051      	movs	r0, #81	; 0x51
 80045e6:	f7fc f9f9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80045ea:	2100      	movs	r1, #0
 80045ec:	2052      	movs	r0, #82	; 0x52
 80045ee:	f7fc f9f5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80045f2:	f240 113f 	movw	r1, #319	; 0x13f
 80045f6:	2053      	movs	r0, #83	; 0x53
 80045f8:	f7fc f9f0 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80045fc:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004600:	2060      	movs	r0, #96	; 0x60
 8004602:	f7fc f9eb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004606:	2101      	movs	r1, #1
 8004608:	2061      	movs	r0, #97	; 0x61
 800460a:	f7fc f9e7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800460e:	2100      	movs	r1, #0
 8004610:	206a      	movs	r0, #106	; 0x6a
 8004612:	f7fc f9e3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004616:	2100      	movs	r1, #0
 8004618:	2080      	movs	r0, #128	; 0x80
 800461a:	f7fc f9df 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800461e:	2100      	movs	r1, #0
 8004620:	2081      	movs	r0, #129	; 0x81
 8004622:	f7fc f9db 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004626:	2100      	movs	r1, #0
 8004628:	2082      	movs	r0, #130	; 0x82
 800462a:	f7fc f9d7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800462e:	2100      	movs	r1, #0
 8004630:	2083      	movs	r0, #131	; 0x83
 8004632:	f7fc f9d3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004636:	2100      	movs	r1, #0
 8004638:	2084      	movs	r0, #132	; 0x84
 800463a:	f7fc f9cf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800463e:	2100      	movs	r1, #0
 8004640:	2085      	movs	r0, #133	; 0x85
 8004642:	f7fc f9cb 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004646:	2110      	movs	r1, #16
 8004648:	2090      	movs	r0, #144	; 0x90
 800464a:	f7fc f9c7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800464e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004652:	2092      	movs	r0, #146	; 0x92
 8004654:	f7fc f9c2 	bl	80009dc <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004658:	f240 1133 	movw	r1, #307	; 0x133
 800465c:	2007      	movs	r0, #7
 800465e:	f7fc f9bd 	bl	80009dc <LCD_WriteReg>
 8004662:	f001 bb3f 	b.w	8005ce4 <LCD_Init+0x3e34>
 8004666:	bf00      	nop
 8004668:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x9320) //测试OK.
 800466c:	4bce      	ldr	r3, [pc, #824]	; (80049a8 <LCD_Init+0x2af8>)
 800466e:	889b      	ldrh	r3, [r3, #4]
 8004670:	f249 3220 	movw	r2, #37664	; 0x9320
 8004674:	4293      	cmp	r3, r2
 8004676:	f040 80ad 	bne.w	80047d4 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800467a:	2100      	movs	r1, #0
 800467c:	2000      	movs	r0, #0
 800467e:	f7fc f9ad 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004686:	2001      	movs	r0, #1
 8004688:	f7fc f9a8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800468c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004690:	2002      	movs	r0, #2
 8004692:	f7fc f9a3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004696:	f241 0130 	movw	r1, #4144	; 0x1030
 800469a:	2003      	movs	r0, #3
 800469c:	f7fc f99e 	bl	80009dc <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80046a0:	2100      	movs	r1, #0
 80046a2:	2004      	movs	r0, #4
 80046a4:	f7fc f99a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80046a8:	f240 2102 	movw	r1, #514	; 0x202
 80046ac:	2008      	movs	r0, #8
 80046ae:	f7fc f995 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80046b2:	2100      	movs	r1, #0
 80046b4:	2009      	movs	r0, #9
 80046b6:	f7fc f991 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80046ba:	2100      	movs	r1, #0
 80046bc:	200a      	movs	r0, #10
 80046be:	f7fc f98d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80046c2:	2101      	movs	r1, #1
 80046c4:	200c      	movs	r0, #12
 80046c6:	f7fc f989 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80046ca:	2100      	movs	r1, #0
 80046cc:	200d      	movs	r0, #13
 80046ce:	f7fc f985 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80046d2:	2100      	movs	r1, #0
 80046d4:	200f      	movs	r0, #15
 80046d6:	f7fc f981 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 80046da:	2032      	movs	r0, #50	; 0x32
 80046dc:	f001 ff12 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80046e0:	f240 1101 	movw	r1, #257	; 0x101
 80046e4:	2007      	movs	r0, #7
 80046e6:	f7fc f979 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 80046ea:	2032      	movs	r0, #50	; 0x32
 80046ec:	f001 ff0a 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80046f0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80046f4:	2010      	movs	r0, #16
 80046f6:	f7fc f971 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80046fa:	2107      	movs	r1, #7
 80046fc:	2011      	movs	r0, #17
 80046fe:	f7fc f96d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004702:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004706:	2012      	movs	r0, #18
 8004708:	f7fc f968 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800470c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004710:	2013      	movs	r0, #19
 8004712:	f7fc f963 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004716:	2100      	movs	r1, #0
 8004718:	2029      	movs	r0, #41	; 0x29
 800471a:	f7fc f95f 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 800471e:	f244 0110 	movw	r1, #16400	; 0x4010
 8004722:	202b      	movs	r0, #43	; 0x2b
 8004724:	f7fc f95a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004728:	2100      	movs	r1, #0
 800472a:	2050      	movs	r0, #80	; 0x50
 800472c:	f7fc f956 	bl	80009dc <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004730:	21ef      	movs	r1, #239	; 0xef
 8004732:	2051      	movs	r0, #81	; 0x51
 8004734:	f7fc f952 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004738:	2100      	movs	r1, #0
 800473a:	2052      	movs	r0, #82	; 0x52
 800473c:	f7fc f94e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004740:	f240 113f 	movw	r1, #319	; 0x13f
 8004744:	2053      	movs	r0, #83	; 0x53
 8004746:	f7fc f949 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 800474a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800474e:	2060      	movs	r0, #96	; 0x60
 8004750:	f7fc f944 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004754:	2101      	movs	r1, #1
 8004756:	2061      	movs	r0, #97	; 0x61
 8004758:	f7fc f940 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 800475c:	2100      	movs	r1, #0
 800475e:	206a      	movs	r0, #106	; 0x6a
 8004760:	f7fc f93c 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004764:	2100      	movs	r1, #0
 8004766:	2080      	movs	r0, #128	; 0x80
 8004768:	f7fc f938 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 800476c:	2100      	movs	r1, #0
 800476e:	2081      	movs	r0, #129	; 0x81
 8004770:	f7fc f934 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004774:	2100      	movs	r1, #0
 8004776:	2082      	movs	r0, #130	; 0x82
 8004778:	f7fc f930 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 800477c:	2100      	movs	r1, #0
 800477e:	2083      	movs	r0, #131	; 0x83
 8004780:	f7fc f92c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004784:	2100      	movs	r1, #0
 8004786:	2084      	movs	r0, #132	; 0x84
 8004788:	f7fc f928 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 800478c:	2100      	movs	r1, #0
 800478e:	2085      	movs	r0, #133	; 0x85
 8004790:	f7fc f924 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004794:	2110      	movs	r1, #16
 8004796:	2090      	movs	r0, #144	; 0x90
 8004798:	f7fc f920 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800479c:	2100      	movs	r1, #0
 800479e:	2092      	movs	r0, #146	; 0x92
 80047a0:	f7fc f91c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80047a4:	2101      	movs	r1, #1
 80047a6:	2093      	movs	r0, #147	; 0x93
 80047a8:	f7fc f918 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80047ac:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047b0:	2095      	movs	r0, #149	; 0x95
 80047b2:	f7fc f913 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80047b6:	2100      	movs	r1, #0
 80047b8:	2097      	movs	r0, #151	; 0x97
 80047ba:	f7fc f90f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80047be:	2100      	movs	r1, #0
 80047c0:	2098      	movs	r0, #152	; 0x98
 80047c2:	f7fc f90b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80047c6:	f240 1173 	movw	r1, #371	; 0x173
 80047ca:	2007      	movs	r0, #7
 80047cc:	f7fc f906 	bl	80009dc <LCD_WriteReg>
 80047d0:	f001 ba88 	b.w	8005ce4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80047d4:	4b74      	ldr	r3, [pc, #464]	; (80049a8 <LCD_Init+0x2af8>)
 80047d6:	889b      	ldrh	r3, [r3, #4]
 80047d8:	f249 3231 	movw	r2, #37681	; 0x9331
 80047dc:	4293      	cmp	r3, r2
 80047de:	f040 80e5 	bne.w	80049ac <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80047e2:	f241 0114 	movw	r1, #4116	; 0x1014
 80047e6:	20e7      	movs	r0, #231	; 0xe7
 80047e8:	f7fc f8f8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80047ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047f0:	2001      	movs	r0, #1
 80047f2:	f7fc f8f3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80047f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047fa:	2002      	movs	r0, #2
 80047fc:	f7fc f8ee 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004800:	f241 0138 	movw	r1, #4152	; 0x1038
 8004804:	2003      	movs	r0, #3
 8004806:	f7fc f8e9 	bl	80009dc <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 800480a:	f240 2102 	movw	r1, #514	; 0x202
 800480e:	2008      	movs	r0, #8
 8004810:	f7fc f8e4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004814:	2100      	movs	r1, #0
 8004816:	2009      	movs	r0, #9
 8004818:	f7fc f8e0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 800481c:	2100      	movs	r1, #0
 800481e:	200a      	movs	r0, #10
 8004820:	f7fc f8dc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004824:	2100      	movs	r1, #0
 8004826:	200c      	movs	r0, #12
 8004828:	f7fc f8d8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 800482c:	2100      	movs	r1, #0
 800482e:	200d      	movs	r0, #13
 8004830:	f7fc f8d4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004834:	2100      	movs	r1, #0
 8004836:	200f      	movs	r0, #15
 8004838:	f7fc f8d0 	bl	80009dc <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800483c:	2100      	movs	r1, #0
 800483e:	2010      	movs	r0, #16
 8004840:	f7fc f8cc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004844:	2107      	movs	r1, #7
 8004846:	2011      	movs	r0, #17
 8004848:	f7fc f8c8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 800484c:	2100      	movs	r1, #0
 800484e:	2012      	movs	r0, #18
 8004850:	f7fc f8c4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004854:	2100      	movs	r1, #0
 8004856:	2013      	movs	r0, #19
 8004858:	f7fc f8c0 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 800485c:	20c8      	movs	r0, #200	; 0xc8
 800485e:	f001 fe51 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004862:	f241 6190 	movw	r1, #5776	; 0x1690
 8004866:	2010      	movs	r0, #16
 8004868:	f7fc f8b8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 800486c:	f240 2127 	movw	r1, #551	; 0x227
 8004870:	2011      	movs	r0, #17
 8004872:	f7fc f8b3 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004876:	2032      	movs	r0, #50	; 0x32
 8004878:	f001 fe44 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 800487c:	210c      	movs	r1, #12
 800487e:	2012      	movs	r0, #18
 8004880:	f7fc f8ac 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004884:	2032      	movs	r0, #50	; 0x32
 8004886:	f001 fe3d 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800488a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800488e:	2013      	movs	r0, #19
 8004890:	f7fc f8a4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004894:	2111      	movs	r1, #17
 8004896:	2029      	movs	r0, #41	; 0x29
 8004898:	f7fc f8a0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800489c:	210b      	movs	r1, #11
 800489e:	202b      	movs	r0, #43	; 0x2b
 80048a0:	f7fc f89c 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80048a4:	2032      	movs	r0, #50	; 0x32
 80048a6:	f001 fe2d 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80048aa:	2100      	movs	r1, #0
 80048ac:	2020      	movs	r0, #32
 80048ae:	f7fc f895 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80048b2:	f240 113f 	movw	r1, #319	; 0x13f
 80048b6:	2021      	movs	r0, #33	; 0x21
 80048b8:	f7fc f890 	bl	80009dc <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80048bc:	2100      	movs	r1, #0
 80048be:	2030      	movs	r0, #48	; 0x30
 80048c0:	f7fc f88c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80048c4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80048c8:	2031      	movs	r0, #49	; 0x31
 80048ca:	f7fc f887 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80048ce:	2100      	movs	r1, #0
 80048d0:	2032      	movs	r0, #50	; 0x32
 80048d2:	f7fc f883 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80048d6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80048da:	2035      	movs	r0, #53	; 0x35
 80048dc:	f7fc f87e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80048e0:	f241 610a 	movw	r1, #5642	; 0x160a
 80048e4:	2036      	movs	r0, #54	; 0x36
 80048e6:	f7fc f879 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80048ea:	f240 7107 	movw	r1, #1799	; 0x707
 80048ee:	2037      	movs	r0, #55	; 0x37
 80048f0:	f7fc f874 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80048f4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80048f8:	2038      	movs	r0, #56	; 0x38
 80048fa:	f7fc f86f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80048fe:	f240 7107 	movw	r1, #1799	; 0x707
 8004902:	2039      	movs	r0, #57	; 0x39
 8004904:	f7fc f86a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004908:	f240 4102 	movw	r1, #1026	; 0x402
 800490c:	203c      	movs	r0, #60	; 0x3c
 800490e:	f7fc f865 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004912:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004916:	203d      	movs	r0, #61	; 0x3d
 8004918:	f7fc f860 	bl	80009dc <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 800491c:	2100      	movs	r1, #0
 800491e:	2050      	movs	r0, #80	; 0x50
 8004920:	f7fc f85c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004924:	21ef      	movs	r1, #239	; 0xef
 8004926:	2051      	movs	r0, #81	; 0x51
 8004928:	f7fc f858 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 800492c:	2100      	movs	r1, #0
 800492e:	2052      	movs	r0, #82	; 0x52
 8004930:	f7fc f854 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004934:	f240 113f 	movw	r1, #319	; 0x13f
 8004938:	2053      	movs	r0, #83	; 0x53
 800493a:	f7fc f84f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 800493e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004942:	2060      	movs	r0, #96	; 0x60
 8004944:	f7fc f84a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004948:	2101      	movs	r1, #1
 800494a:	2061      	movs	r0, #97	; 0x61
 800494c:	f7fc f846 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004950:	2100      	movs	r1, #0
 8004952:	206a      	movs	r0, #106	; 0x6a
 8004954:	f7fc f842 	bl	80009dc <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004958:	2100      	movs	r1, #0
 800495a:	2080      	movs	r0, #128	; 0x80
 800495c:	f7fc f83e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004960:	2100      	movs	r1, #0
 8004962:	2081      	movs	r0, #129	; 0x81
 8004964:	f7fc f83a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004968:	2100      	movs	r1, #0
 800496a:	2082      	movs	r0, #130	; 0x82
 800496c:	f7fc f836 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004970:	2100      	movs	r1, #0
 8004972:	2083      	movs	r0, #131	; 0x83
 8004974:	f7fc f832 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004978:	2100      	movs	r1, #0
 800497a:	2084      	movs	r0, #132	; 0x84
 800497c:	f7fc f82e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004980:	2100      	movs	r1, #0
 8004982:	2085      	movs	r0, #133	; 0x85
 8004984:	f7fc f82a 	bl	80009dc <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004988:	2110      	movs	r1, #16
 800498a:	2090      	movs	r0, #144	; 0x90
 800498c:	f7fc f826 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004990:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004994:	2092      	movs	r0, #146	; 0x92
 8004996:	f7fc f821 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 800499a:	f240 1133 	movw	r1, #307	; 0x133
 800499e:	2007      	movs	r0, #7
 80049a0:	f7fc f81c 	bl	80009dc <LCD_WriteReg>
 80049a4:	f001 b99e 	b.w	8005ce4 <LCD_Init+0x3e34>
 80049a8:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5408) {
 80049ac:	4be2      	ldr	r3, [pc, #904]	; (8004d38 <LCD_Init+0x2e88>)
 80049ae:	889b      	ldrh	r3, [r3, #4]
 80049b0:	f245 4208 	movw	r2, #21512	; 0x5408
 80049b4:	4293      	cmp	r3, r2
 80049b6:	f040 80a3 	bne.w	8004b00 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80049ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049be:	2001      	movs	r0, #1
 80049c0:	f7fc f80c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80049c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80049c8:	2002      	movs	r0, #2
 80049ca:	f7fc f807 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80049ce:	f241 0130 	movw	r1, #4144	; 0x1030
 80049d2:	2003      	movs	r0, #3
 80049d4:	f7fc f802 	bl	80009dc <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 80049d8:	2100      	movs	r1, #0
 80049da:	2004      	movs	r0, #4
 80049dc:	f7fb fffe 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 80049e0:	f240 2107 	movw	r1, #519	; 0x207
 80049e4:	2008      	movs	r0, #8
 80049e6:	f7fb fff9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 80049ea:	2100      	movs	r1, #0
 80049ec:	2009      	movs	r0, #9
 80049ee:	f7fb fff5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 80049f2:	2100      	movs	r1, #0
 80049f4:	200a      	movs	r0, #10
 80049f6:	f7fb fff1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 80049fa:	2100      	movs	r1, #0
 80049fc:	200c      	movs	r0, #12
 80049fe:	f7fb ffed 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004a02:	2100      	movs	r1, #0
 8004a04:	200d      	movs	r0, #13
 8004a06:	f7fb ffe9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	200f      	movs	r0, #15
 8004a0e:	f7fb ffe5 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004a12:	2014      	movs	r0, #20
 8004a14:	f001 fd76 	bl	8006504 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004a18:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004a1c:	2010      	movs	r0, #16
 8004a1e:	f7fb ffdd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004a22:	2101      	movs	r1, #1
 8004a24:	2011      	movs	r0, #17
 8004a26:	f7fb ffd9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	2017      	movs	r0, #23
 8004a2e:	f7fb ffd5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004a32:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004a36:	2012      	movs	r0, #18
 8004a38:	f7fb ffd0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a40:	2013      	movs	r0, #19
 8004a42:	f7fb ffcb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004a46:	2109      	movs	r1, #9
 8004a48:	2029      	movs	r0, #41	; 0x29
 8004a4a:	f7fb ffc7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004a4e:	2109      	movs	r1, #9
 8004a50:	202a      	movs	r0, #42	; 0x2a
 8004a52:	f7fb ffc3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004a56:	2100      	movs	r1, #0
 8004a58:	20a4      	movs	r0, #164	; 0xa4
 8004a5a:	f7fb ffbf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2050      	movs	r0, #80	; 0x50
 8004a62:	f7fb ffbb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004a66:	21ef      	movs	r1, #239	; 0xef
 8004a68:	2051      	movs	r0, #81	; 0x51
 8004a6a:	f7fb ffb7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004a6e:	2100      	movs	r1, #0
 8004a70:	2052      	movs	r0, #82	; 0x52
 8004a72:	f7fb ffb3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004a76:	f240 113f 	movw	r1, #319	; 0x13f
 8004a7a:	2053      	movs	r0, #83	; 0x53
 8004a7c:	f7fb ffae 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004a80:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a84:	2060      	movs	r0, #96	; 0x60
 8004a86:	f7fb ffa9 	bl	80009dc <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	2061      	movs	r0, #97	; 0x61
 8004a8e:	f7fb ffa5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004a92:	2100      	movs	r1, #0
 8004a94:	206a      	movs	r0, #106	; 0x6a
 8004a96:	f7fb ffa1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	2080      	movs	r0, #128	; 0x80
 8004a9e:	f7fb ff9d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	2081      	movs	r0, #129	; 0x81
 8004aa6:	f7fb ff99 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004aaa:	2100      	movs	r1, #0
 8004aac:	2082      	movs	r0, #130	; 0x82
 8004aae:	f7fb ff95 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2083      	movs	r0, #131	; 0x83
 8004ab6:	f7fb ff91 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004aba:	2100      	movs	r1, #0
 8004abc:	2084      	movs	r0, #132	; 0x84
 8004abe:	f7fb ff8d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	2085      	movs	r0, #133	; 0x85
 8004ac6:	f7fb ff89 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004aca:	2113      	movs	r1, #19
 8004acc:	2090      	movs	r0, #144	; 0x90
 8004ace:	f7fb ff85 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2092      	movs	r0, #146	; 0x92
 8004ad6:	f7fb ff81 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004ada:	2103      	movs	r1, #3
 8004adc:	2093      	movs	r0, #147	; 0x93
 8004ade:	f7fb ff7d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004ae2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004ae6:	2095      	movs	r0, #149	; 0x95
 8004ae8:	f7fb ff78 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004aec:	f240 1173 	movw	r1, #371	; 0x173
 8004af0:	2007      	movs	r0, #7
 8004af2:	f7fb ff73 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 8004af6:	2032      	movs	r0, #50	; 0x32
 8004af8:	f001 fd04 	bl	8006504 <HAL_Delay>
 8004afc:	f001 b8f2 	b.w	8005ce4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004b00:	4b8d      	ldr	r3, [pc, #564]	; (8004d38 <LCD_Init+0x2e88>)
 8004b02:	889b      	ldrh	r3, [r3, #4]
 8004b04:	f241 5205 	movw	r2, #5381	; 0x1505
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	f040 8117 	bne.w	8004d3c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2007      	movs	r0, #7
 8004b12:	f7fb ff63 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 8004b16:	2032      	movs	r0, #50	; 0x32
 8004b18:	f001 fcf4 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004b1c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004b20:	2012      	movs	r0, #18
 8004b22:	f7fb ff5b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004b26:	2101      	movs	r1, #1
 8004b28:	20a4      	movs	r0, #164	; 0xa4
 8004b2a:	f7fb ff57 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004b2e:	210f      	movs	r1, #15
 8004b30:	2008      	movs	r0, #8
 8004b32:	f7fb ff53 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004b36:	2108      	movs	r1, #8
 8004b38:	200a      	movs	r0, #10
 8004b3a:	f7fb ff4f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004b3e:	2108      	movs	r1, #8
 8004b40:	200d      	movs	r0, #13
 8004b42:	f7fb ff4b 	bl	80009dc <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004b46:	f240 7107 	movw	r1, #1799	; 0x707
 8004b4a:	2030      	movs	r0, #48	; 0x30
 8004b4c:	f7fb ff46 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004b50:	2107      	movs	r1, #7
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	f7fb ff42 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004b58:	f240 6103 	movw	r1, #1539	; 0x603
 8004b5c:	2032      	movs	r0, #50	; 0x32
 8004b5e:	f7fb ff3d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004b62:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b66:	2033      	movs	r0, #51	; 0x33
 8004b68:	f7fb ff38 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004b6c:	f240 2102 	movw	r1, #514	; 0x202
 8004b70:	2034      	movs	r0, #52	; 0x34
 8004b72:	f7fb ff33 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004b76:	2102      	movs	r1, #2
 8004b78:	2035      	movs	r0, #53	; 0x35
 8004b7a:	f7fb ff2f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004b7e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004b82:	2036      	movs	r0, #54	; 0x36
 8004b84:	f7fb ff2a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004b88:	f240 7107 	movw	r1, #1799	; 0x707
 8004b8c:	2037      	movs	r0, #55	; 0x37
 8004b8e:	f7fb ff25 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004b92:	2100      	movs	r1, #0
 8004b94:	2038      	movs	r0, #56	; 0x38
 8004b96:	f7fb ff21 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2039      	movs	r0, #57	; 0x39
 8004b9e:	f7fb ff1d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004ba2:	f240 7107 	movw	r1, #1799	; 0x707
 8004ba6:	203a      	movs	r0, #58	; 0x3a
 8004ba8:	f7fb ff18 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004bac:	2100      	movs	r1, #0
 8004bae:	203b      	movs	r0, #59	; 0x3b
 8004bb0:	f7fb ff14 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004bb4:	2107      	movs	r1, #7
 8004bb6:	203c      	movs	r0, #60	; 0x3c
 8004bb8:	f7fb ff10 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	203d      	movs	r0, #61	; 0x3d
 8004bc0:	f7fb ff0c 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 8004bc4:	2032      	movs	r0, #50	; 0x32
 8004bc6:	f001 fc9d 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004bca:	2101      	movs	r1, #1
 8004bcc:	2007      	movs	r0, #7
 8004bce:	f7fb ff05 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	2017      	movs	r0, #23
 8004bd6:	f7fb ff01 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(50);
 8004bda:	2032      	movs	r0, #50	; 0x32
 8004bdc:	f001 fc92 	bl	8006504 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004be0:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004be4:	2010      	movs	r0, #16
 8004be6:	f7fb fef9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004bea:	f240 2117 	movw	r1, #535	; 0x217
 8004bee:	2011      	movs	r0, #17
 8004bf0:	f7fb fef4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004bf4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004bf8:	2012      	movs	r0, #18
 8004bfa:	f7fb feef 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004bfe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004c02:	2013      	movs	r0, #19
 8004c04:	f7fb feea 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004c08:	2100      	movs	r1, #0
 8004c0a:	202a      	movs	r0, #42	; 0x2a
 8004c0c:	f7fb fee6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004c10:	210a      	movs	r1, #10
 8004c12:	2029      	movs	r0, #41	; 0x29
 8004c14:	f7fb fee2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004c18:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004c1c:	2012      	movs	r0, #18
 8004c1e:	f7fb fedd 	bl	80009dc <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004c22:	2100      	movs	r1, #0
 8004c24:	2050      	movs	r0, #80	; 0x50
 8004c26:	f7fb fed9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004c2a:	21ef      	movs	r1, #239	; 0xef
 8004c2c:	2051      	movs	r0, #81	; 0x51
 8004c2e:	f7fb fed5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004c32:	2100      	movs	r1, #0
 8004c34:	2052      	movs	r0, #82	; 0x52
 8004c36:	f7fb fed1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004c3a:	f240 113f 	movw	r1, #319	; 0x13f
 8004c3e:	2053      	movs	r0, #83	; 0x53
 8004c40:	f7fb fecc 	bl	80009dc <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004c44:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c48:	2060      	movs	r0, #96	; 0x60
 8004c4a:	f7fb fec7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004c4e:	2101      	movs	r1, #1
 8004c50:	2061      	movs	r0, #97	; 0x61
 8004c52:	f7fb fec3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004c56:	2100      	movs	r1, #0
 8004c58:	206a      	movs	r0, #106	; 0x6a
 8004c5a:	f7fb febf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004c5e:	2100      	movs	r1, #0
 8004c60:	2080      	movs	r0, #128	; 0x80
 8004c62:	f7fb febb 	bl	80009dc <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004c66:	2100      	movs	r1, #0
 8004c68:	2081      	movs	r0, #129	; 0x81
 8004c6a:	f7fb feb7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	2082      	movs	r0, #130	; 0x82
 8004c72:	f7fb feb3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c76:	2100      	movs	r1, #0
 8004c78:	2083      	movs	r0, #131	; 0x83
 8004c7a:	f7fb feaf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	2084      	movs	r0, #132	; 0x84
 8004c82:	f7fb feab 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c86:	2100      	movs	r1, #0
 8004c88:	2085      	movs	r0, #133	; 0x85
 8004c8a:	f7fb fea7 	bl	80009dc <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004c8e:	2113      	movs	r1, #19
 8004c90:	2090      	movs	r0, #144	; 0x90
 8004c92:	f7fb fea3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004c96:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c9a:	2092      	movs	r0, #146	; 0x92
 8004c9c:	f7fb fe9e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004ca0:	2105      	movs	r1, #5
 8004ca2:	2093      	movs	r0, #147	; 0x93
 8004ca4:	f7fb fe9a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004ca8:	2100      	movs	r1, #0
 8004caa:	2095      	movs	r0, #149	; 0x95
 8004cac:	f7fb fe96 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	2097      	movs	r0, #151	; 0x97
 8004cb4:	f7fb fe92 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004cb8:	2100      	movs	r1, #0
 8004cba:	2098      	movs	r0, #152	; 0x98
 8004cbc:	f7fb fe8e 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f7fb fe89 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004cca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004cce:	2002      	movs	r0, #2
 8004cd0:	f7fb fe84 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004cd4:	f241 0138 	movw	r1, #4152	; 0x1038
 8004cd8:	2003      	movs	r0, #3
 8004cda:	f7fb fe7f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2004      	movs	r0, #4
 8004ce2:	f7fb fe7b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	200c      	movs	r0, #12
 8004cea:	f7fb fe77 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004cee:	2100      	movs	r1, #0
 8004cf0:	200f      	movs	r0, #15
 8004cf2:	f7fb fe73 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	2020      	movs	r0, #32
 8004cfa:	f7fb fe6f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	2021      	movs	r0, #33	; 0x21
 8004d02:	f7fb fe6b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004d06:	2121      	movs	r1, #33	; 0x21
 8004d08:	2007      	movs	r0, #7
 8004d0a:	f7fb fe67 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004d0e:	2014      	movs	r0, #20
 8004d10:	f001 fbf8 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004d14:	2161      	movs	r1, #97	; 0x61
 8004d16:	2007      	movs	r0, #7
 8004d18:	f7fb fe60 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004d1c:	2014      	movs	r0, #20
 8004d1e:	f001 fbf1 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004d22:	f240 1173 	movw	r1, #371	; 0x173
 8004d26:	2007      	movs	r0, #7
 8004d28:	f7fb fe58 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004d2c:	2014      	movs	r0, #20
 8004d2e:	f001 fbe9 	bl	8006504 <HAL_Delay>
 8004d32:	f000 bfd7 	b.w	8005ce4 <LCD_Init+0x3e34>
 8004d36:	bf00      	nop
 8004d38:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0xB505) {
 8004d3c:	4bf0      	ldr	r3, [pc, #960]	; (8005100 <LCD_Init+0x3250>)
 8004d3e:	889b      	ldrh	r3, [r3, #4]
 8004d40:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004d44:	4293      	cmp	r3, r2
 8004d46:	f040 8103 	bne.w	8004f50 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f7fb fe45 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d52:	2100      	movs	r1, #0
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7fb fe41 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f7fb fe3d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d62:	2100      	movs	r1, #0
 8004d64:	2000      	movs	r0, #0
 8004d66:	f7fb fe39 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	20a4      	movs	r0, #164	; 0xa4
 8004d6e:	f7fb fe35 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004d72:	2014      	movs	r0, #20
 8004d74:	f001 fbc6 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004d78:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d7c:	2060      	movs	r0, #96	; 0x60
 8004d7e:	f7fb fe2d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004d82:	f240 2102 	movw	r1, #514	; 0x202
 8004d86:	2008      	movs	r0, #8
 8004d88:	f7fb fe28 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004d8c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004d90:	2030      	movs	r0, #48	; 0x30
 8004d92:	f7fb fe23 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004d96:	f243 7115 	movw	r1, #14101	; 0x3715
 8004d9a:	2031      	movs	r0, #49	; 0x31
 8004d9c:	f7fb fe1e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004da0:	f240 6104 	movw	r1, #1540	; 0x604
 8004da4:	2032      	movs	r0, #50	; 0x32
 8004da6:	f7fb fe19 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004daa:	f640 6116 	movw	r1, #3606	; 0xe16
 8004dae:	2033      	movs	r0, #51	; 0x33
 8004db0:	f7fb fe14 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004db4:	f242 2111 	movw	r1, #8721	; 0x2211
 8004db8:	2034      	movs	r0, #52	; 0x34
 8004dba:	f7fb fe0f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004dbe:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004dc2:	2035      	movs	r0, #53	; 0x35
 8004dc4:	f7fb fe0a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004dc8:	f248 5107 	movw	r1, #34055	; 0x8507
 8004dcc:	2036      	movs	r0, #54	; 0x36
 8004dce:	f7fb fe05 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004dd2:	f241 4107 	movw	r1, #5127	; 0x1407
 8004dd6:	2037      	movs	r0, #55	; 0x37
 8004dd8:	f7fb fe00 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004ddc:	f241 4103 	movw	r1, #5123	; 0x1403
 8004de0:	2038      	movs	r0, #56	; 0x38
 8004de2:	f7fb fdfb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004de6:	2120      	movs	r1, #32
 8004de8:	2039      	movs	r0, #57	; 0x39
 8004dea:	f7fb fdf7 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004dee:	211a      	movs	r1, #26
 8004df0:	2090      	movs	r0, #144	; 0x90
 8004df2:	f7fb fdf3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004df6:	2100      	movs	r1, #0
 8004df8:	2010      	movs	r0, #16
 8004dfa:	f7fb fdef 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004dfe:	2107      	movs	r1, #7
 8004e00:	2011      	movs	r0, #17
 8004e02:	f7fb fdeb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004e06:	2100      	movs	r1, #0
 8004e08:	2012      	movs	r0, #18
 8004e0a:	f7fb fde7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	2013      	movs	r0, #19
 8004e12:	f7fb fde3 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004e16:	2014      	movs	r0, #20
 8004e18:	f001 fb74 	bl	8006504 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004e1c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004e20:	2010      	movs	r0, #16
 8004e22:	f7fb fddb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004e26:	f240 1137 	movw	r1, #311	; 0x137
 8004e2a:	2011      	movs	r0, #17
 8004e2c:	f7fb fdd6 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004e30:	2014      	movs	r0, #20
 8004e32:	f001 fb67 	bl	8006504 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004e36:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004e3a:	2012      	movs	r0, #18
 8004e3c:	f7fb fdce 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004e40:	2014      	movs	r0, #20
 8004e42:	f001 fb5f 	bl	8006504 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004e46:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004e4a:	2013      	movs	r0, #19
 8004e4c:	f7fb fdc6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004e50:	2180      	movs	r1, #128	; 0x80
 8004e52:	202a      	movs	r0, #42	; 0x2a
 8004e54:	f7fb fdc2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004e58:	2148      	movs	r1, #72	; 0x48
 8004e5a:	2029      	movs	r0, #41	; 0x29
 8004e5c:	f7fb fdbe 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004e60:	2014      	movs	r0, #20
 8004e62:	f001 fb4f 	bl	8006504 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f7fb fdb6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004e70:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e74:	2002      	movs	r0, #2
 8004e76:	f7fb fdb1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004e7a:	f241 0138 	movw	r1, #4152	; 0x1038
 8004e7e:	2003      	movs	r0, #3
 8004e80:	f7fb fdac 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e84:	f240 2102 	movw	r1, #514	; 0x202
 8004e88:	2008      	movs	r0, #8
 8004e8a:	f7fb fda7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	200a      	movs	r0, #10
 8004e92:	f7fb fda3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004e96:	2100      	movs	r1, #0
 8004e98:	200c      	movs	r0, #12
 8004e9a:	f7fb fd9f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	200d      	movs	r0, #13
 8004ea2:	f7fb fd9b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004ea6:	2130      	movs	r1, #48	; 0x30
 8004ea8:	200e      	movs	r0, #14
 8004eaa:	f7fb fd97 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2050      	movs	r0, #80	; 0x50
 8004eb2:	f7fb fd93 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004eb6:	21ef      	movs	r1, #239	; 0xef
 8004eb8:	2051      	movs	r0, #81	; 0x51
 8004eba:	f7fb fd8f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2052      	movs	r0, #82	; 0x52
 8004ec2:	f7fb fd8b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004ec6:	f240 113f 	movw	r1, #319	; 0x13f
 8004eca:	2053      	movs	r0, #83	; 0x53
 8004ecc:	f7fb fd86 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004ed0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ed4:	2060      	movs	r0, #96	; 0x60
 8004ed6:	f7fb fd81 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004eda:	2101      	movs	r1, #1
 8004edc:	2061      	movs	r0, #97	; 0x61
 8004ede:	f7fb fd7d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	206a      	movs	r0, #106	; 0x6a
 8004ee6:	f7fb fd79 	bl	80009dc <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004eea:	2111      	movs	r1, #17
 8004eec:	2090      	movs	r0, #144	; 0x90
 8004eee:	f7fb fd75 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004ef2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ef6:	2092      	movs	r0, #146	; 0x92
 8004ef8:	f7fb fd70 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004efc:	f240 4102 	movw	r1, #1026	; 0x402
 8004f00:	2093      	movs	r0, #147	; 0x93
 8004f02:	f7fb fd6b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004f06:	2102      	movs	r1, #2
 8004f08:	2094      	movs	r0, #148	; 0x94
 8004f0a:	f7fb fd67 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004f0e:	2014      	movs	r0, #20
 8004f10:	f001 faf8 	bl	8006504 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004f14:	2101      	movs	r1, #1
 8004f16:	2007      	movs	r0, #7
 8004f18:	f7fb fd60 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004f1c:	2014      	movs	r0, #20
 8004f1e:	f001 faf1 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004f22:	2161      	movs	r1, #97	; 0x61
 8004f24:	2007      	movs	r0, #7
 8004f26:	f7fb fd59 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004f2a:	f240 1173 	movw	r1, #371	; 0x173
 8004f2e:	2007      	movs	r0, #7
 8004f30:	f7fb fd54 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004f34:	2100      	movs	r1, #0
 8004f36:	2020      	movs	r0, #32
 8004f38:	f7fb fd50 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	2021      	movs	r0, #33	; 0x21
 8004f40:	f7fb fd4c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004f44:	2122      	movs	r1, #34	; 0x22
 8004f46:	2000      	movs	r0, #0
 8004f48:	f7fb fd48 	bl	80009dc <LCD_WriteReg>
 8004f4c:	f000 beca 	b.w	8005ce4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004f50:	4b6b      	ldr	r3, [pc, #428]	; (8005100 <LCD_Init+0x3250>)
 8004f52:	889b      	ldrh	r3, [r3, #4]
 8004f54:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	f040 80d3 	bne.w	8005104 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7fb fd3b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f66:	2100      	movs	r1, #0
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f7fb fd37 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004f6e:	2014      	movs	r0, #20
 8004f70:	f001 fac8 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004f74:	2100      	movs	r1, #0
 8004f76:	2000      	movs	r0, #0
 8004f78:	f7fb fd30 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f7fb fd2c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f84:	2100      	movs	r1, #0
 8004f86:	2000      	movs	r0, #0
 8004f88:	f7fb fd28 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7fb fd24 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004f94:	2101      	movs	r1, #1
 8004f96:	20a4      	movs	r0, #164	; 0xa4
 8004f98:	f7fb fd20 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 8004f9c:	2014      	movs	r0, #20
 8004f9e:	f001 fab1 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004fa2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004fa6:	2060      	movs	r0, #96	; 0x60
 8004fa8:	f7fb fd18 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004fac:	f640 0106 	movw	r1, #2054	; 0x806
 8004fb0:	2008      	movs	r0, #8
 8004fb2:	f7fb fd13 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004fb6:	f240 7103 	movw	r1, #1795	; 0x703
 8004fba:	2030      	movs	r0, #48	; 0x30
 8004fbc:	f7fb fd0e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	2031      	movs	r0, #49	; 0x31
 8004fc4:	f7fb fd0a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004fc8:	2104      	movs	r1, #4
 8004fca:	2032      	movs	r0, #50	; 0x32
 8004fcc:	f7fb fd06 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004fd0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004fd4:	2033      	movs	r0, #51	; 0x33
 8004fd6:	f7fb fd01 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004fda:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004fde:	2034      	movs	r0, #52	; 0x34
 8004fe0:	f7fb fcfc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004fe4:	f240 1103 	movw	r1, #259	; 0x103
 8004fe8:	2035      	movs	r0, #53	; 0x35
 8004fea:	f7fb fcf7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004fee:	211f      	movs	r1, #31
 8004ff0:	2036      	movs	r0, #54	; 0x36
 8004ff2:	f7fb fcf3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004ff6:	f240 7103 	movw	r1, #1795	; 0x703
 8004ffa:	2037      	movs	r0, #55	; 0x37
 8004ffc:	f7fb fcee 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005000:	2101      	movs	r1, #1
 8005002:	2038      	movs	r0, #56	; 0x38
 8005004:	f7fb fcea 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005008:	2104      	movs	r1, #4
 800500a:	2039      	movs	r0, #57	; 0x39
 800500c:	f7fb fce6 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005010:	2115      	movs	r1, #21
 8005012:	2090      	movs	r0, #144	; 0x90
 8005014:	f7fb fce2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005018:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800501c:	2010      	movs	r0, #16
 800501e:	f7fb fcdd 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8005022:	f240 2147 	movw	r1, #583	; 0x247
 8005026:	2011      	movs	r0, #17
 8005028:	f7fb fcd8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800502c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005030:	2012      	movs	r0, #18
 8005032:	f7fb fcd3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005036:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800503a:	2013      	movs	r0, #19
 800503c:	f7fb fcce 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(120);
 8005040:	2078      	movs	r0, #120	; 0x78
 8005042:	f001 fa5f 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800504a:	2001      	movs	r0, #1
 800504c:	f7fb fcc6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005054:	2002      	movs	r0, #2
 8005056:	f7fb fcc1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800505a:	f241 0130 	movw	r1, #4144	; 0x1030
 800505e:	2003      	movs	r0, #3
 8005060:	f7fb fcbc 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005064:	2108      	movs	r1, #8
 8005066:	200a      	movs	r0, #10
 8005068:	f7fb fcb8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800506c:	2100      	movs	r1, #0
 800506e:	200c      	movs	r0, #12
 8005070:	f7fb fcb4 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005074:	2120      	movs	r1, #32
 8005076:	200e      	movs	r0, #14
 8005078:	f7fb fcb0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800507c:	2100      	movs	r1, #0
 800507e:	200f      	movs	r0, #15
 8005080:	f7fb fcac 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005084:	2100      	movs	r1, #0
 8005086:	2020      	movs	r0, #32
 8005088:	f7fb fca8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800508c:	2100      	movs	r1, #0
 800508e:	2021      	movs	r0, #33	; 0x21
 8005090:	f7fb fca4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005094:	213d      	movs	r1, #61	; 0x3d
 8005096:	202a      	movs	r0, #42	; 0x2a
 8005098:	f7fb fca0 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(20);
 800509c:	2014      	movs	r0, #20
 800509e:	f001 fa31 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80050a2:	212d      	movs	r1, #45	; 0x2d
 80050a4:	2029      	movs	r0, #41	; 0x29
 80050a6:	f7fb fc99 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80050aa:	2100      	movs	r1, #0
 80050ac:	2050      	movs	r0, #80	; 0x50
 80050ae:	f7fb fc95 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80050b2:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80050b6:	2051      	movs	r0, #81	; 0x51
 80050b8:	f7fb fc90 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80050bc:	2100      	movs	r1, #0
 80050be:	2052      	movs	r0, #82	; 0x52
 80050c0:	f7fb fc8c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80050c4:	f240 113f 	movw	r1, #319	; 0x13f
 80050c8:	2053      	movs	r0, #83	; 0x53
 80050ca:	f7fb fc87 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80050ce:	2100      	movs	r1, #0
 80050d0:	2061      	movs	r0, #97	; 0x61
 80050d2:	f7fb fc83 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80050d6:	2100      	movs	r1, #0
 80050d8:	206a      	movs	r0, #106	; 0x6a
 80050da:	f7fb fc7f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80050de:	f44f 7140 	mov.w	r1, #768	; 0x300
 80050e2:	2092      	movs	r0, #146	; 0x92
 80050e4:	f7fb fc7a 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80050e8:	2105      	movs	r1, #5
 80050ea:	2093      	movs	r0, #147	; 0x93
 80050ec:	f7fb fc76 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80050f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050f4:	2007      	movs	r0, #7
 80050f6:	f7fb fc71 	bl	80009dc <LCD_WriteReg>
 80050fa:	f000 bdf3 	b.w	8005ce4 <LCD_Init+0x3e34>
 80050fe:	bf00      	nop
 8005100:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8005104:	4bc2      	ldr	r3, [pc, #776]	; (8005410 <LCD_Init+0x3560>)
 8005106:	889b      	ldrh	r3, [r3, #4]
 8005108:	f648 1289 	movw	r2, #35209	; 0x8989
 800510c:	4293      	cmp	r3, r2
 800510e:	f040 80bc 	bne.w	800528a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8005112:	2101      	movs	r1, #1
 8005114:	2000      	movs	r0, #0
 8005116:	f7fb fc61 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 800511a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 800511e:	2003      	movs	r0, #3
 8005120:	f7fb fc5c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005124:	2100      	movs	r1, #0
 8005126:	200c      	movs	r0, #12
 8005128:	f7fb fc58 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800512c:	f640 010c 	movw	r1, #2060	; 0x80c
 8005130:	200d      	movs	r0, #13
 8005132:	f7fb fc53 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005136:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800513a:	200e      	movs	r0, #14
 800513c:	f7fb fc4e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005140:	21b0      	movs	r1, #176	; 0xb0
 8005142:	201e      	movs	r0, #30
 8005144:	f7fb fc4a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005148:	f642 313f 	movw	r1, #11071	; 0x2b3f
 800514c:	2001      	movs	r0, #1
 800514e:	f7fb fc45 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005152:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005156:	2002      	movs	r0, #2
 8005158:	f7fb fc40 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800515c:	2100      	movs	r1, #0
 800515e:	2010      	movs	r0, #16
 8005160:	f7fb fc3c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005164:	f246 0178 	movw	r1, #24696	; 0x6078
 8005168:	2011      	movs	r0, #17
 800516a:	f7fb fc37 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800516e:	2100      	movs	r1, #0
 8005170:	2005      	movs	r0, #5
 8005172:	f7fb fc33 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005176:	2100      	movs	r1, #0
 8005178:	2006      	movs	r0, #6
 800517a:	f7fb fc2f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800517e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005182:	2016      	movs	r0, #22
 8005184:	f7fb fc2a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005188:	2103      	movs	r1, #3
 800518a:	2017      	movs	r0, #23
 800518c:	f7fb fc26 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005190:	f240 2133 	movw	r1, #563	; 0x233
 8005194:	2007      	movs	r0, #7
 8005196:	f7fb fc21 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800519a:	2100      	movs	r1, #0
 800519c:	200b      	movs	r0, #11
 800519e:	f7fb fc1d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 80051a2:	2100      	movs	r1, #0
 80051a4:	200f      	movs	r0, #15
 80051a6:	f7fb fc19 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 80051aa:	2100      	movs	r1, #0
 80051ac:	2041      	movs	r0, #65	; 0x41
 80051ae:	f7fb fc15 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 80051b2:	2100      	movs	r1, #0
 80051b4:	2042      	movs	r0, #66	; 0x42
 80051b6:	f7fb fc11 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 80051ba:	2100      	movs	r1, #0
 80051bc:	2048      	movs	r0, #72	; 0x48
 80051be:	f7fb fc0d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 80051c2:	f240 113f 	movw	r1, #319	; 0x13f
 80051c6:	2049      	movs	r0, #73	; 0x49
 80051c8:	f7fb fc08 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 80051cc:	2100      	movs	r1, #0
 80051ce:	204a      	movs	r0, #74	; 0x4a
 80051d0:	f7fb fc04 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80051d4:	2100      	movs	r1, #0
 80051d6:	204b      	movs	r0, #75	; 0x4b
 80051d8:	f7fb fc00 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80051dc:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80051e0:	2044      	movs	r0, #68	; 0x44
 80051e2:	f7fb fbfb 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80051e6:	2100      	movs	r1, #0
 80051e8:	2045      	movs	r0, #69	; 0x45
 80051ea:	f7fb fbf7 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80051ee:	f240 113f 	movw	r1, #319	; 0x13f
 80051f2:	2046      	movs	r0, #70	; 0x46
 80051f4:	f7fb fbf2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80051f8:	f240 7107 	movw	r1, #1799	; 0x707
 80051fc:	2030      	movs	r0, #48	; 0x30
 80051fe:	f7fb fbed 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8005202:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005206:	2031      	movs	r0, #49	; 0x31
 8005208:	f7fb fbe8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 800520c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005210:	2032      	movs	r0, #50	; 0x32
 8005212:	f7fb fbe3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8005216:	f240 5102 	movw	r1, #1282	; 0x502
 800521a:	2033      	movs	r0, #51	; 0x33
 800521c:	f7fb fbde 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005220:	f240 5107 	movw	r1, #1287	; 0x507
 8005224:	2034      	movs	r0, #52	; 0x34
 8005226:	f7fb fbd9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800522a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800522e:	2035      	movs	r0, #53	; 0x35
 8005230:	f7fb fbd4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005234:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005238:	2036      	movs	r0, #54	; 0x36
 800523a:	f7fb fbcf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 800523e:	f240 5102 	movw	r1, #1282	; 0x502
 8005242:	2037      	movs	r0, #55	; 0x37
 8005244:	f7fb fbca 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005248:	f240 3102 	movw	r1, #770	; 0x302
 800524c:	203a      	movs	r0, #58	; 0x3a
 800524e:	f7fb fbc5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005252:	f240 3102 	movw	r1, #770	; 0x302
 8005256:	203b      	movs	r0, #59	; 0x3b
 8005258:	f7fb fbc0 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 800525c:	2100      	movs	r1, #0
 800525e:	2023      	movs	r0, #35	; 0x23
 8005260:	f7fb fbbc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005264:	2100      	movs	r1, #0
 8005266:	2024      	movs	r0, #36	; 0x24
 8005268:	f7fb fbb8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 800526c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005270:	2025      	movs	r0, #37	; 0x25
 8005272:	f7fb fbb3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005276:	2100      	movs	r1, #0
 8005278:	204f      	movs	r0, #79	; 0x4f
 800527a:	f7fb fbaf 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800527e:	2100      	movs	r1, #0
 8005280:	204e      	movs	r0, #78	; 0x4e
 8005282:	f7fb fbab 	bl	80009dc <LCD_WriteReg>
 8005286:	f000 bd2d 	b.w	8005ce4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800528a:	4b61      	ldr	r3, [pc, #388]	; (8005410 <LCD_Init+0x3560>)
 800528c:	889b      	ldrh	r3, [r3, #4]
 800528e:	f244 5231 	movw	r2, #17713	; 0x4531
 8005292:	4293      	cmp	r3, r2
 8005294:	f040 80be 	bne.w	8005414 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005298:	2101      	movs	r1, #1
 800529a:	2000      	movs	r0, #0
 800529c:	f7fb fb9e 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(10);
 80052a0:	200a      	movs	r0, #10
 80052a2:	f001 f92f 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 80052a6:	f241 6128 	movw	r1, #5672	; 0x1628
 80052aa:	2010      	movs	r0, #16
 80052ac:	f7fb fb96 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 80052b0:	210e      	movs	r1, #14
 80052b2:	2012      	movs	r0, #18
 80052b4:	f7fb fb92 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 80052b8:	f640 2139 	movw	r1, #2617	; 0xa39
 80052bc:	2013      	movs	r0, #19
 80052be:	f7fb fb8d 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(10);
 80052c2:	200a      	movs	r0, #10
 80052c4:	f001 f91e 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	2011      	movs	r0, #17
 80052cc:	f7fb fb86 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80052d0:	2150      	movs	r1, #80	; 0x50
 80052d2:	2015      	movs	r0, #21
 80052d4:	f7fb fb82 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(10);
 80052d8:	200a      	movs	r0, #10
 80052da:	f001 f913 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80052de:	211e      	movs	r1, #30
 80052e0:	2012      	movs	r0, #18
 80052e2:	f7fb fb7b 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(10);
 80052e6:	200a      	movs	r0, #10
 80052e8:	f001 f90c 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80052ec:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80052f0:	2010      	movs	r0, #16
 80052f2:	f7fb fb73 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80052f6:	f642 2139 	movw	r1, #10809	; 0x2a39
 80052fa:	2013      	movs	r0, #19
 80052fc:	f7fb fb6e 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(10);
 8005300:	200a      	movs	r0, #10
 8005302:	f001 f8ff 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800530a:	2001      	movs	r0, #1
 800530c:	f7fb fb66 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005310:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005314:	2002      	movs	r0, #2
 8005316:	f7fb fb61 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 800531a:	f241 0138 	movw	r1, #4152	; 0x1038
 800531e:	2003      	movs	r0, #3
 8005320:	f7fb fb5c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005324:	f240 2102 	movw	r1, #514	; 0x202
 8005328:	2008      	movs	r0, #8
 800532a:	f7fb fb57 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800532e:	2108      	movs	r1, #8
 8005330:	200a      	movs	r0, #10
 8005332:	f7fb fb53 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005336:	2100      	movs	r1, #0
 8005338:	2030      	movs	r0, #48	; 0x30
 800533a:	f7fb fb4f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800533e:	f240 4102 	movw	r1, #1026	; 0x402
 8005342:	2031      	movs	r0, #49	; 0x31
 8005344:	f7fb fb4a 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005348:	f44f 7183 	mov.w	r1, #262	; 0x106
 800534c:	2032      	movs	r0, #50	; 0x32
 800534e:	f7fb fb45 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005352:	f240 5103 	movw	r1, #1283	; 0x503
 8005356:	2033      	movs	r0, #51	; 0x33
 8005358:	f7fb fb40 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 800535c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005360:	2034      	movs	r0, #52	; 0x34
 8005362:	f7fb fb3b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005366:	f240 3101 	movw	r1, #769	; 0x301
 800536a:	2035      	movs	r0, #53	; 0x35
 800536c:	f7fb fb36 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005370:	f240 7107 	movw	r1, #1799	; 0x707
 8005374:	2036      	movs	r0, #54	; 0x36
 8005376:	f7fb fb31 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800537a:	f240 3105 	movw	r1, #773	; 0x305
 800537e:	2037      	movs	r0, #55	; 0x37
 8005380:	f7fb fb2c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005384:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005388:	2038      	movs	r0, #56	; 0x38
 800538a:	f7fb fb27 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800538e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005392:	2039      	movs	r0, #57	; 0x39
 8005394:	f7fb fb22 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005398:	2102      	movs	r1, #2
 800539a:	2041      	movs	r0, #65	; 0x41
 800539c:	f7fb fb1e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80053a0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80053a4:	2060      	movs	r0, #96	; 0x60
 80053a6:	f7fb fb19 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80053aa:	2101      	movs	r1, #1
 80053ac:	2061      	movs	r0, #97	; 0x61
 80053ae:	f7fb fb15 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80053b2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80053b6:	2090      	movs	r0, #144	; 0x90
 80053b8:	f7fb fb10 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 80053bc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80053c0:	2092      	movs	r0, #146	; 0x92
 80053c2:	f7fb fb0b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80053c6:	2104      	movs	r1, #4
 80053c8:	2093      	movs	r0, #147	; 0x93
 80053ca:	f7fb fb07 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80053ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053d2:	20a0      	movs	r0, #160	; 0xa0
 80053d4:	f7fb fb02 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80053d8:	2101      	movs	r1, #1
 80053da:	2007      	movs	r0, #7
 80053dc:	f7fb fafe 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80053e0:	2121      	movs	r1, #33	; 0x21
 80053e2:	2007      	movs	r0, #7
 80053e4:	f7fb fafa 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80053e8:	2123      	movs	r1, #35	; 0x23
 80053ea:	2007      	movs	r0, #7
 80053ec:	f7fb faf6 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80053f0:	2133      	movs	r1, #51	; 0x33
 80053f2:	2007      	movs	r0, #7
 80053f4:	f7fb faf2 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80053f8:	f240 1133 	movw	r1, #307	; 0x133
 80053fc:	2007      	movs	r0, #7
 80053fe:	f7fb faed 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005402:	2100      	movs	r1, #0
 8005404:	20a0      	movs	r0, #160	; 0xa0
 8005406:	f7fb fae9 	bl	80009dc <LCD_WriteReg>
 800540a:	f000 bc6b 	b.w	8005ce4 <LCD_Init+0x3e34>
 800540e:	bf00      	nop
 8005410:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x4535) {
 8005414:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <LCD_Init+0x36d4>)
 8005416:	889b      	ldrh	r3, [r3, #4]
 8005418:	f244 5235 	movw	r2, #17717	; 0x4535
 800541c:	4293      	cmp	r3, r2
 800541e:	f040 80b3 	bne.w	8005588 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005422:	2130      	movs	r1, #48	; 0x30
 8005424:	2015      	movs	r0, #21
 8005426:	f7fb fad9 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800542a:	2110      	movs	r1, #16
 800542c:	209a      	movs	r0, #154	; 0x9a
 800542e:	f7fb fad5 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005432:	2120      	movs	r1, #32
 8005434:	2011      	movs	r0, #17
 8005436:	f7fb fad1 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800543a:	f243 4128 	movw	r1, #13352	; 0x3428
 800543e:	2010      	movs	r0, #16
 8005440:	f7fb facc 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8005444:	2102      	movs	r1, #2
 8005446:	2012      	movs	r0, #18
 8005448:	f7fb fac8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 800544c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005450:	2013      	movs	r0, #19
 8005452:	f7fb fac3 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(40);
 8005456:	2028      	movs	r0, #40	; 0x28
 8005458:	f001 f854 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 800545c:	2112      	movs	r1, #18
 800545e:	2012      	movs	r0, #18
 8005460:	f7fb fabc 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(40);
 8005464:	2028      	movs	r0, #40	; 0x28
 8005466:	f001 f84d 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 800546a:	f243 4120 	movw	r1, #13344	; 0x3420
 800546e:	2010      	movs	r0, #16
 8005470:	f7fb fab4 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005474:	f243 0138 	movw	r1, #12344	; 0x3038
 8005478:	2013      	movs	r0, #19
 800547a:	f7fb faaf 	bl	80009dc <LCD_WriteReg>
		HAL_Delay(70);
 800547e:	2046      	movs	r0, #70	; 0x46
 8005480:	f001 f840 	bl	8006504 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005484:	2100      	movs	r1, #0
 8005486:	2030      	movs	r0, #48	; 0x30
 8005488:	f7fb faa8 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800548c:	f240 4102 	movw	r1, #1026	; 0x402
 8005490:	2031      	movs	r0, #49	; 0x31
 8005492:	f7fb faa3 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005496:	f240 3107 	movw	r1, #775	; 0x307
 800549a:	2032      	movs	r0, #50	; 0x32
 800549c:	f7fb fa9e 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80054a0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80054a4:	2033      	movs	r0, #51	; 0x33
 80054a6:	f7fb fa99 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80054aa:	2104      	movs	r1, #4
 80054ac:	2034      	movs	r0, #52	; 0x34
 80054ae:	f7fb fa95 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80054b2:	f240 4101 	movw	r1, #1025	; 0x401
 80054b6:	2035      	movs	r0, #53	; 0x35
 80054b8:	f7fb fa90 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80054bc:	f240 7107 	movw	r1, #1799	; 0x707
 80054c0:	2036      	movs	r0, #54	; 0x36
 80054c2:	f7fb fa8b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80054c6:	f240 3105 	movw	r1, #773	; 0x305
 80054ca:	2037      	movs	r0, #55	; 0x37
 80054cc:	f7fb fa86 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80054d0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80054d4:	2038      	movs	r0, #56	; 0x38
 80054d6:	f7fb fa81 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80054da:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80054de:	2039      	movs	r0, #57	; 0x39
 80054e0:	f7fb fa7c 	bl	80009dc <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80054e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054e8:	2001      	movs	r0, #1
 80054ea:	f7fb fa77 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80054ee:	f44f 7140 	mov.w	r1, #768	; 0x300
 80054f2:	2002      	movs	r0, #2
 80054f4:	f7fb fa72 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80054f8:	f241 0130 	movw	r1, #4144	; 0x1030
 80054fc:	2003      	movs	r0, #3
 80054fe:	f7fb fa6d 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005502:	f640 0108 	movw	r1, #2056	; 0x808
 8005506:	2008      	movs	r0, #8
 8005508:	f7fb fa68 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800550c:	2108      	movs	r1, #8
 800550e:	200a      	movs	r0, #10
 8005510:	f7fb fa64 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005514:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005518:	2060      	movs	r0, #96	; 0x60
 800551a:	f7fb fa5f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800551e:	2101      	movs	r1, #1
 8005520:	2061      	movs	r0, #97	; 0x61
 8005522:	f7fb fa5b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005526:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800552a:	2090      	movs	r0, #144	; 0x90
 800552c:	f7fb fa56 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005534:	2092      	movs	r0, #146	; 0x92
 8005536:	f7fb fa51 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800553a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800553e:	2093      	movs	r0, #147	; 0x93
 8005540:	f7fb fa4c 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8005544:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005548:	20a0      	movs	r0, #160	; 0xa0
 800554a:	f7fb fa47 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 800554e:	2110      	movs	r1, #16
 8005550:	20a3      	movs	r0, #163	; 0xa3
 8005552:	f7fb fa43 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005556:	2101      	movs	r1, #1
 8005558:	2007      	movs	r0, #7
 800555a:	f7fb fa3f 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 800555e:	2121      	movs	r1, #33	; 0x21
 8005560:	2007      	movs	r0, #7
 8005562:	f7fb fa3b 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005566:	2123      	movs	r1, #35	; 0x23
 8005568:	2007      	movs	r0, #7
 800556a:	f7fb fa37 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 800556e:	2133      	movs	r1, #51	; 0x33
 8005570:	2007      	movs	r0, #7
 8005572:	f7fb fa33 	bl	80009dc <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005576:	f240 1133 	movw	r1, #307	; 0x133
 800557a:	2007      	movs	r0, #7
 800557c:	f7fb fa2e 	bl	80009dc <LCD_WriteReg>
 8005580:	e3b0      	b.n	8005ce4 <LCD_Init+0x3e34>
 8005582:	bf00      	nop
 8005584:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0X1963) {
 8005588:	4ba8      	ldr	r3, [pc, #672]	; (800582c <LCD_Init+0x397c>)
 800558a:	889b      	ldrh	r3, [r3, #4]
 800558c:	f641 1263 	movw	r2, #6499	; 0x1963
 8005590:	4293      	cmp	r3, r2
 8005592:	f040 83a7 	bne.w	8005ce4 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005596:	20e2      	movs	r0, #226	; 0xe2
 8005598:	f7fb f994 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800559c:	4ba4      	ldr	r3, [pc, #656]	; (8005830 <LCD_Init+0x3980>)
 800559e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055a2:	611a      	str	r2, [r3, #16]
 80055a4:	4ba2      	ldr	r3, [pc, #648]	; (8005830 <LCD_Init+0x3980>)
 80055a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055aa:	615a      	str	r2, [r3, #20]
 80055ac:	4ba1      	ldr	r3, [pc, #644]	; (8005834 <LCD_Init+0x3984>)
 80055ae:	221d      	movs	r2, #29
 80055b0:	60da      	str	r2, [r3, #12]
 80055b2:	4b9f      	ldr	r3, [pc, #636]	; (8005830 <LCD_Init+0x3980>)
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	615a      	str	r2, [r3, #20]
 80055b8:	4b9d      	ldr	r3, [pc, #628]	; (8005830 <LCD_Init+0x3980>)
 80055ba:	2280      	movs	r2, #128	; 0x80
 80055bc:	611a      	str	r2, [r3, #16]
 80055be:	4b9c      	ldr	r3, [pc, #624]	; (8005830 <LCD_Init+0x3980>)
 80055c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80055c6:	4b9a      	ldr	r3, [pc, #616]	; (8005830 <LCD_Init+0x3980>)
 80055c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055cc:	611a      	str	r2, [r3, #16]
 80055ce:	4b98      	ldr	r3, [pc, #608]	; (8005830 <LCD_Init+0x3980>)
 80055d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d4:	615a      	str	r2, [r3, #20]
 80055d6:	4b97      	ldr	r3, [pc, #604]	; (8005834 <LCD_Init+0x3984>)
 80055d8:	2202      	movs	r2, #2
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	4b94      	ldr	r3, [pc, #592]	; (8005830 <LCD_Init+0x3980>)
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	615a      	str	r2, [r3, #20]
 80055e2:	4b93      	ldr	r3, [pc, #588]	; (8005830 <LCD_Init+0x3980>)
 80055e4:	2280      	movs	r2, #128	; 0x80
 80055e6:	611a      	str	r2, [r3, #16]
 80055e8:	4b91      	ldr	r3, [pc, #580]	; (8005830 <LCD_Init+0x3980>)
 80055ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80055f0:	4b8f      	ldr	r3, [pc, #572]	; (8005830 <LCD_Init+0x3980>)
 80055f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055f6:	611a      	str	r2, [r3, #16]
 80055f8:	4b8d      	ldr	r3, [pc, #564]	; (8005830 <LCD_Init+0x3980>)
 80055fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fe:	615a      	str	r2, [r3, #20]
 8005600:	4b8c      	ldr	r3, [pc, #560]	; (8005834 <LCD_Init+0x3984>)
 8005602:	2204      	movs	r2, #4
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	4b8a      	ldr	r3, [pc, #552]	; (8005830 <LCD_Init+0x3980>)
 8005608:	2280      	movs	r2, #128	; 0x80
 800560a:	615a      	str	r2, [r3, #20]
 800560c:	4b88      	ldr	r3, [pc, #544]	; (8005830 <LCD_Init+0x3980>)
 800560e:	2280      	movs	r2, #128	; 0x80
 8005610:	611a      	str	r2, [r3, #16]
 8005612:	4b87      	ldr	r3, [pc, #540]	; (8005830 <LCD_Init+0x3980>)
 8005614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005618:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800561a:	2001      	movs	r0, #1
 800561c:	f000 ff72 	bl	8006504 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005620:	20e0      	movs	r0, #224	; 0xe0
 8005622:	f7fb f94f 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005626:	4b82      	ldr	r3, [pc, #520]	; (8005830 <LCD_Init+0x3980>)
 8005628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800562c:	611a      	str	r2, [r3, #16]
 800562e:	4b80      	ldr	r3, [pc, #512]	; (8005830 <LCD_Init+0x3980>)
 8005630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005634:	615a      	str	r2, [r3, #20]
 8005636:	4b7f      	ldr	r3, [pc, #508]	; (8005834 <LCD_Init+0x3984>)
 8005638:	2201      	movs	r2, #1
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	4b7c      	ldr	r3, [pc, #496]	; (8005830 <LCD_Init+0x3980>)
 800563e:	2280      	movs	r2, #128	; 0x80
 8005640:	615a      	str	r2, [r3, #20]
 8005642:	4b7b      	ldr	r3, [pc, #492]	; (8005830 <LCD_Init+0x3980>)
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	611a      	str	r2, [r3, #16]
 8005648:	4b79      	ldr	r3, [pc, #484]	; (8005830 <LCD_Init+0x3980>)
 800564a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005650:	200a      	movs	r0, #10
 8005652:	f000 ff57 	bl	8006504 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005656:	20e0      	movs	r0, #224	; 0xe0
 8005658:	f7fb f934 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 800565c:	4b74      	ldr	r3, [pc, #464]	; (8005830 <LCD_Init+0x3980>)
 800565e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005662:	611a      	str	r2, [r3, #16]
 8005664:	4b72      	ldr	r3, [pc, #456]	; (8005830 <LCD_Init+0x3980>)
 8005666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566a:	615a      	str	r2, [r3, #20]
 800566c:	4b71      	ldr	r3, [pc, #452]	; (8005834 <LCD_Init+0x3984>)
 800566e:	2203      	movs	r2, #3
 8005670:	60da      	str	r2, [r3, #12]
 8005672:	4b6f      	ldr	r3, [pc, #444]	; (8005830 <LCD_Init+0x3980>)
 8005674:	2280      	movs	r2, #128	; 0x80
 8005676:	615a      	str	r2, [r3, #20]
 8005678:	4b6d      	ldr	r3, [pc, #436]	; (8005830 <LCD_Init+0x3980>)
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	611a      	str	r2, [r3, #16]
 800567e:	4b6c      	ldr	r3, [pc, #432]	; (8005830 <LCD_Init+0x3980>)
 8005680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005684:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005686:	200c      	movs	r0, #12
 8005688:	f000 ff3c 	bl	8006504 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800568c:	2001      	movs	r0, #1
 800568e:	f7fb f919 	bl	80008c4 <LCD_WR_REG>
		HAL_Delay(10);
 8005692:	200a      	movs	r0, #10
 8005694:	f000 ff36 	bl	8006504 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005698:	20e6      	movs	r0, #230	; 0xe6
 800569a:	f7fb f913 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800569e:	4b64      	ldr	r3, [pc, #400]	; (8005830 <LCD_Init+0x3980>)
 80056a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a4:	611a      	str	r2, [r3, #16]
 80056a6:	4b62      	ldr	r3, [pc, #392]	; (8005830 <LCD_Init+0x3980>)
 80056a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ac:	615a      	str	r2, [r3, #20]
 80056ae:	4b61      	ldr	r3, [pc, #388]	; (8005834 <LCD_Init+0x3984>)
 80056b0:	222f      	movs	r2, #47	; 0x2f
 80056b2:	60da      	str	r2, [r3, #12]
 80056b4:	4b5e      	ldr	r3, [pc, #376]	; (8005830 <LCD_Init+0x3980>)
 80056b6:	2280      	movs	r2, #128	; 0x80
 80056b8:	615a      	str	r2, [r3, #20]
 80056ba:	4b5d      	ldr	r3, [pc, #372]	; (8005830 <LCD_Init+0x3980>)
 80056bc:	2280      	movs	r2, #128	; 0x80
 80056be:	611a      	str	r2, [r3, #16]
 80056c0:	4b5b      	ldr	r3, [pc, #364]	; (8005830 <LCD_Init+0x3980>)
 80056c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80056c8:	4b59      	ldr	r3, [pc, #356]	; (8005830 <LCD_Init+0x3980>)
 80056ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ce:	611a      	str	r2, [r3, #16]
 80056d0:	4b57      	ldr	r3, [pc, #348]	; (8005830 <LCD_Init+0x3980>)
 80056d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d6:	615a      	str	r2, [r3, #20]
 80056d8:	4b56      	ldr	r3, [pc, #344]	; (8005834 <LCD_Init+0x3984>)
 80056da:	22ff      	movs	r2, #255	; 0xff
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	4b54      	ldr	r3, [pc, #336]	; (8005830 <LCD_Init+0x3980>)
 80056e0:	2280      	movs	r2, #128	; 0x80
 80056e2:	615a      	str	r2, [r3, #20]
 80056e4:	4b52      	ldr	r3, [pc, #328]	; (8005830 <LCD_Init+0x3980>)
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	611a      	str	r2, [r3, #16]
 80056ea:	4b51      	ldr	r3, [pc, #324]	; (8005830 <LCD_Init+0x3980>)
 80056ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80056f2:	4b4f      	ldr	r3, [pc, #316]	; (8005830 <LCD_Init+0x3980>)
 80056f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f8:	611a      	str	r2, [r3, #16]
 80056fa:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <LCD_Init+0x3980>)
 80056fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005700:	615a      	str	r2, [r3, #20]
 8005702:	4b4c      	ldr	r3, [pc, #304]	; (8005834 <LCD_Init+0x3984>)
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	60da      	str	r2, [r3, #12]
 8005708:	4b49      	ldr	r3, [pc, #292]	; (8005830 <LCD_Init+0x3980>)
 800570a:	2280      	movs	r2, #128	; 0x80
 800570c:	615a      	str	r2, [r3, #20]
 800570e:	4b48      	ldr	r3, [pc, #288]	; (8005830 <LCD_Init+0x3980>)
 8005710:	2280      	movs	r2, #128	; 0x80
 8005712:	611a      	str	r2, [r3, #16]
 8005714:	4b46      	ldr	r3, [pc, #280]	; (8005830 <LCD_Init+0x3980>)
 8005716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 800571c:	20b0      	movs	r0, #176	; 0xb0
 800571e:	f7fb f8d1 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005722:	4b43      	ldr	r3, [pc, #268]	; (8005830 <LCD_Init+0x3980>)
 8005724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005728:	611a      	str	r2, [r3, #16]
 800572a:	4b41      	ldr	r3, [pc, #260]	; (8005830 <LCD_Init+0x3980>)
 800572c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005730:	615a      	str	r2, [r3, #20]
 8005732:	4b40      	ldr	r3, [pc, #256]	; (8005834 <LCD_Init+0x3984>)
 8005734:	2220      	movs	r2, #32
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	4b3d      	ldr	r3, [pc, #244]	; (8005830 <LCD_Init+0x3980>)
 800573a:	2280      	movs	r2, #128	; 0x80
 800573c:	615a      	str	r2, [r3, #20]
 800573e:	4b3c      	ldr	r3, [pc, #240]	; (8005830 <LCD_Init+0x3980>)
 8005740:	2280      	movs	r2, #128	; 0x80
 8005742:	611a      	str	r2, [r3, #16]
 8005744:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <LCD_Init+0x3980>)
 8005746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 800574c:	4b38      	ldr	r3, [pc, #224]	; (8005830 <LCD_Init+0x3980>)
 800574e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005752:	611a      	str	r2, [r3, #16]
 8005754:	4b36      	ldr	r3, [pc, #216]	; (8005830 <LCD_Init+0x3980>)
 8005756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575a:	615a      	str	r2, [r3, #20]
 800575c:	4b35      	ldr	r3, [pc, #212]	; (8005834 <LCD_Init+0x3984>)
 800575e:	2200      	movs	r2, #0
 8005760:	60da      	str	r2, [r3, #12]
 8005762:	4b33      	ldr	r3, [pc, #204]	; (8005830 <LCD_Init+0x3980>)
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	615a      	str	r2, [r3, #20]
 8005768:	4b31      	ldr	r3, [pc, #196]	; (8005830 <LCD_Init+0x3980>)
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	4b30      	ldr	r3, [pc, #192]	; (8005830 <LCD_Init+0x3980>)
 8005770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005774:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005776:	4b2e      	ldr	r3, [pc, #184]	; (8005830 <LCD_Init+0x3980>)
 8005778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577c:	611a      	str	r2, [r3, #16]
 800577e:	4b2c      	ldr	r3, [pc, #176]	; (8005830 <LCD_Init+0x3980>)
 8005780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005784:	615a      	str	r2, [r3, #20]
 8005786:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <LCD_Init+0x3984>)
 8005788:	2203      	movs	r2, #3
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	4b28      	ldr	r3, [pc, #160]	; (8005830 <LCD_Init+0x3980>)
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	615a      	str	r2, [r3, #20]
 8005792:	4b27      	ldr	r3, [pc, #156]	; (8005830 <LCD_Init+0x3980>)
 8005794:	2280      	movs	r2, #128	; 0x80
 8005796:	611a      	str	r2, [r3, #16]
 8005798:	4b25      	ldr	r3, [pc, #148]	; (8005830 <LCD_Init+0x3980>)
 800579a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80057a0:	4b23      	ldr	r3, [pc, #140]	; (8005830 <LCD_Init+0x3980>)
 80057a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a6:	611a      	str	r2, [r3, #16]
 80057a8:	4b21      	ldr	r3, [pc, #132]	; (8005830 <LCD_Init+0x3980>)
 80057aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ae:	615a      	str	r2, [r3, #20]
 80057b0:	4b20      	ldr	r3, [pc, #128]	; (8005834 <LCD_Init+0x3984>)
 80057b2:	f240 321f 	movw	r2, #799	; 0x31f
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <LCD_Init+0x3980>)
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	615a      	str	r2, [r3, #20]
 80057be:	4b1c      	ldr	r3, [pc, #112]	; (8005830 <LCD_Init+0x3980>)
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	611a      	str	r2, [r3, #16]
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <LCD_Init+0x3980>)
 80057c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80057cc:	4b18      	ldr	r3, [pc, #96]	; (8005830 <LCD_Init+0x3980>)
 80057ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d2:	611a      	str	r2, [r3, #16]
 80057d4:	4b16      	ldr	r3, [pc, #88]	; (8005830 <LCD_Init+0x3980>)
 80057d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057da:	615a      	str	r2, [r3, #20]
 80057dc:	4b15      	ldr	r3, [pc, #84]	; (8005834 <LCD_Init+0x3984>)
 80057de:	2201      	movs	r2, #1
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	4b13      	ldr	r3, [pc, #76]	; (8005830 <LCD_Init+0x3980>)
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	615a      	str	r2, [r3, #20]
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <LCD_Init+0x3980>)
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	611a      	str	r2, [r3, #16]
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <LCD_Init+0x3980>)
 80057f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <LCD_Init+0x3980>)
 80057f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057fc:	611a      	str	r2, [r3, #16]
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <LCD_Init+0x3980>)
 8005800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005804:	615a      	str	r2, [r3, #20]
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <LCD_Init+0x3984>)
 8005808:	f240 12df 	movw	r2, #479	; 0x1df
 800580c:	60da      	str	r2, [r3, #12]
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <LCD_Init+0x3980>)
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	615a      	str	r2, [r3, #20]
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <LCD_Init+0x3980>)
 8005816:	2280      	movs	r2, #128	; 0x80
 8005818:	611a      	str	r2, [r3, #16]
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <LCD_Init+0x3980>)
 800581c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005820:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005822:	4b03      	ldr	r3, [pc, #12]	; (8005830 <LCD_Init+0x3980>)
 8005824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005828:	e006      	b.n	8005838 <LCD_Init+0x3988>
 800582a:	bf00      	nop
 800582c:	20000030 	.word	0x20000030
 8005830:	40011000 	.word	0x40011000
 8005834:	40010c00 	.word	0x40010c00
 8005838:	611a      	str	r2, [r3, #16]
 800583a:	4ba3      	ldr	r3, [pc, #652]	; (8005ac8 <LCD_Init+0x3c18>)
 800583c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005840:	615a      	str	r2, [r3, #20]
 8005842:	4ba2      	ldr	r3, [pc, #648]	; (8005acc <LCD_Init+0x3c1c>)
 8005844:	2200      	movs	r2, #0
 8005846:	60da      	str	r2, [r3, #12]
 8005848:	4b9f      	ldr	r3, [pc, #636]	; (8005ac8 <LCD_Init+0x3c18>)
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	615a      	str	r2, [r3, #20]
 800584e:	4b9e      	ldr	r3, [pc, #632]	; (8005ac8 <LCD_Init+0x3c18>)
 8005850:	2280      	movs	r2, #128	; 0x80
 8005852:	611a      	str	r2, [r3, #16]
 8005854:	4b9c      	ldr	r3, [pc, #624]	; (8005ac8 <LCD_Init+0x3c18>)
 8005856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 800585c:	20b4      	movs	r0, #180	; 0xb4
 800585e:	f7fb f831 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005862:	4b99      	ldr	r3, [pc, #612]	; (8005ac8 <LCD_Init+0x3c18>)
 8005864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005868:	611a      	str	r2, [r3, #16]
 800586a:	4b97      	ldr	r3, [pc, #604]	; (8005ac8 <LCD_Init+0x3c18>)
 800586c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005870:	615a      	str	r2, [r3, #20]
 8005872:	4b96      	ldr	r3, [pc, #600]	; (8005acc <LCD_Init+0x3c1c>)
 8005874:	2204      	movs	r2, #4
 8005876:	60da      	str	r2, [r3, #12]
 8005878:	4b93      	ldr	r3, [pc, #588]	; (8005ac8 <LCD_Init+0x3c18>)
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	615a      	str	r2, [r3, #20]
 800587e:	4b92      	ldr	r3, [pc, #584]	; (8005ac8 <LCD_Init+0x3c18>)
 8005880:	2280      	movs	r2, #128	; 0x80
 8005882:	611a      	str	r2, [r3, #16]
 8005884:	4b90      	ldr	r3, [pc, #576]	; (8005ac8 <LCD_Init+0x3c18>)
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 800588c:	4b8e      	ldr	r3, [pc, #568]	; (8005ac8 <LCD_Init+0x3c18>)
 800588e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005892:	611a      	str	r2, [r3, #16]
 8005894:	4b8c      	ldr	r3, [pc, #560]	; (8005ac8 <LCD_Init+0x3c18>)
 8005896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589a:	615a      	str	r2, [r3, #20]
 800589c:	4b8b      	ldr	r3, [pc, #556]	; (8005acc <LCD_Init+0x3c1c>)
 800589e:	f240 421f 	movw	r2, #1055	; 0x41f
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	4b88      	ldr	r3, [pc, #544]	; (8005ac8 <LCD_Init+0x3c18>)
 80058a6:	2280      	movs	r2, #128	; 0x80
 80058a8:	615a      	str	r2, [r3, #20]
 80058aa:	4b87      	ldr	r3, [pc, #540]	; (8005ac8 <LCD_Init+0x3c18>)
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	611a      	str	r2, [r3, #16]
 80058b0:	4b85      	ldr	r3, [pc, #532]	; (8005ac8 <LCD_Init+0x3c18>)
 80058b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80058b8:	4b83      	ldr	r3, [pc, #524]	; (8005ac8 <LCD_Init+0x3c18>)
 80058ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058be:	611a      	str	r2, [r3, #16]
 80058c0:	4b81      	ldr	r3, [pc, #516]	; (8005ac8 <LCD_Init+0x3c18>)
 80058c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c6:	615a      	str	r2, [r3, #20]
 80058c8:	4b80      	ldr	r3, [pc, #512]	; (8005acc <LCD_Init+0x3c1c>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	4b7e      	ldr	r3, [pc, #504]	; (8005ac8 <LCD_Init+0x3c18>)
 80058d0:	2280      	movs	r2, #128	; 0x80
 80058d2:	615a      	str	r2, [r3, #20]
 80058d4:	4b7c      	ldr	r3, [pc, #496]	; (8005ac8 <LCD_Init+0x3c18>)
 80058d6:	2280      	movs	r2, #128	; 0x80
 80058d8:	611a      	str	r2, [r3, #16]
 80058da:	4b7b      	ldr	r3, [pc, #492]	; (8005ac8 <LCD_Init+0x3c18>)
 80058dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80058e2:	4b79      	ldr	r3, [pc, #484]	; (8005ac8 <LCD_Init+0x3c18>)
 80058e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e8:	611a      	str	r2, [r3, #16]
 80058ea:	4b77      	ldr	r3, [pc, #476]	; (8005ac8 <LCD_Init+0x3c18>)
 80058ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f0:	615a      	str	r2, [r3, #20]
 80058f2:	4b76      	ldr	r3, [pc, #472]	; (8005acc <LCD_Init+0x3c1c>)
 80058f4:	222e      	movs	r2, #46	; 0x2e
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	4b73      	ldr	r3, [pc, #460]	; (8005ac8 <LCD_Init+0x3c18>)
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	615a      	str	r2, [r3, #20]
 80058fe:	4b72      	ldr	r3, [pc, #456]	; (8005ac8 <LCD_Init+0x3c18>)
 8005900:	2280      	movs	r2, #128	; 0x80
 8005902:	611a      	str	r2, [r3, #16]
 8005904:	4b70      	ldr	r3, [pc, #448]	; (8005ac8 <LCD_Init+0x3c18>)
 8005906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 800590c:	4b6e      	ldr	r3, [pc, #440]	; (8005ac8 <LCD_Init+0x3c18>)
 800590e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005912:	611a      	str	r2, [r3, #16]
 8005914:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <LCD_Init+0x3c18>)
 8005916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591a:	615a      	str	r2, [r3, #20]
 800591c:	4b6b      	ldr	r3, [pc, #428]	; (8005acc <LCD_Init+0x3c1c>)
 800591e:	2200      	movs	r2, #0
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	4b69      	ldr	r3, [pc, #420]	; (8005ac8 <LCD_Init+0x3c18>)
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	615a      	str	r2, [r3, #20]
 8005928:	4b67      	ldr	r3, [pc, #412]	; (8005ac8 <LCD_Init+0x3c18>)
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	611a      	str	r2, [r3, #16]
 800592e:	4b66      	ldr	r3, [pc, #408]	; (8005ac8 <LCD_Init+0x3c18>)
 8005930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005934:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005936:	4b64      	ldr	r3, [pc, #400]	; (8005ac8 <LCD_Init+0x3c18>)
 8005938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800593c:	611a      	str	r2, [r3, #16]
 800593e:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <LCD_Init+0x3c18>)
 8005940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005944:	615a      	str	r2, [r3, #20]
 8005946:	4b61      	ldr	r3, [pc, #388]	; (8005acc <LCD_Init+0x3c1c>)
 8005948:	2200      	movs	r2, #0
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	4b5e      	ldr	r3, [pc, #376]	; (8005ac8 <LCD_Init+0x3c18>)
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	615a      	str	r2, [r3, #20]
 8005952:	4b5d      	ldr	r3, [pc, #372]	; (8005ac8 <LCD_Init+0x3c18>)
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	611a      	str	r2, [r3, #16]
 8005958:	4b5b      	ldr	r3, [pc, #364]	; (8005ac8 <LCD_Init+0x3c18>)
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005960:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <LCD_Init+0x3c18>)
 8005962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005966:	611a      	str	r2, [r3, #16]
 8005968:	4b57      	ldr	r3, [pc, #348]	; (8005ac8 <LCD_Init+0x3c18>)
 800596a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596e:	615a      	str	r2, [r3, #20]
 8005970:	4b56      	ldr	r3, [pc, #344]	; (8005acc <LCD_Init+0x3c1c>)
 8005972:	2200      	movs	r2, #0
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	4b54      	ldr	r3, [pc, #336]	; (8005ac8 <LCD_Init+0x3c18>)
 8005978:	2280      	movs	r2, #128	; 0x80
 800597a:	615a      	str	r2, [r3, #20]
 800597c:	4b52      	ldr	r3, [pc, #328]	; (8005ac8 <LCD_Init+0x3c18>)
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	4b51      	ldr	r3, [pc, #324]	; (8005ac8 <LCD_Init+0x3c18>)
 8005984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005988:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800598a:	4b4f      	ldr	r3, [pc, #316]	; (8005ac8 <LCD_Init+0x3c18>)
 800598c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005990:	611a      	str	r2, [r3, #16]
 8005992:	4b4d      	ldr	r3, [pc, #308]	; (8005ac8 <LCD_Init+0x3c18>)
 8005994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005998:	615a      	str	r2, [r3, #20]
 800599a:	4b4c      	ldr	r3, [pc, #304]	; (8005acc <LCD_Init+0x3c1c>)
 800599c:	2200      	movs	r2, #0
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	4b49      	ldr	r3, [pc, #292]	; (8005ac8 <LCD_Init+0x3c18>)
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	615a      	str	r2, [r3, #20]
 80059a6:	4b48      	ldr	r3, [pc, #288]	; (8005ac8 <LCD_Init+0x3c18>)
 80059a8:	2280      	movs	r2, #128	; 0x80
 80059aa:	611a      	str	r2, [r3, #16]
 80059ac:	4b46      	ldr	r3, [pc, #280]	; (8005ac8 <LCD_Init+0x3c18>)
 80059ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80059b4:	20b6      	movs	r0, #182	; 0xb6
 80059b6:	f7fa ff85 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80059ba:	4b43      	ldr	r3, [pc, #268]	; (8005ac8 <LCD_Init+0x3c18>)
 80059bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c0:	611a      	str	r2, [r3, #16]
 80059c2:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <LCD_Init+0x3c18>)
 80059c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c8:	615a      	str	r2, [r3, #20]
 80059ca:	4b40      	ldr	r3, [pc, #256]	; (8005acc <LCD_Init+0x3c1c>)
 80059cc:	2202      	movs	r2, #2
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	4b3d      	ldr	r3, [pc, #244]	; (8005ac8 <LCD_Init+0x3c18>)
 80059d2:	2280      	movs	r2, #128	; 0x80
 80059d4:	615a      	str	r2, [r3, #20]
 80059d6:	4b3c      	ldr	r3, [pc, #240]	; (8005ac8 <LCD_Init+0x3c18>)
 80059d8:	2280      	movs	r2, #128	; 0x80
 80059da:	611a      	str	r2, [r3, #16]
 80059dc:	4b3a      	ldr	r3, [pc, #232]	; (8005ac8 <LCD_Init+0x3c18>)
 80059de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 80059e4:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <LCD_Init+0x3c18>)
 80059e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ea:	611a      	str	r2, [r3, #16]
 80059ec:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <LCD_Init+0x3c18>)
 80059ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f2:	615a      	str	r2, [r3, #20]
 80059f4:	4b35      	ldr	r3, [pc, #212]	; (8005acc <LCD_Init+0x3c1c>)
 80059f6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80059fa:	60da      	str	r2, [r3, #12]
 80059fc:	4b32      	ldr	r3, [pc, #200]	; (8005ac8 <LCD_Init+0x3c18>)
 80059fe:	2280      	movs	r2, #128	; 0x80
 8005a00:	615a      	str	r2, [r3, #20]
 8005a02:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a04:	2280      	movs	r2, #128	; 0x80
 8005a06:	611a      	str	r2, [r3, #16]
 8005a08:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005a10:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a16:	611a      	str	r2, [r3, #16]
 8005a18:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1e:	615a      	str	r2, [r3, #20]
 8005a20:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <LCD_Init+0x3c1c>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	4b28      	ldr	r3, [pc, #160]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a28:	2280      	movs	r2, #128	; 0x80
 8005a2a:	615a      	str	r2, [r3, #20]
 8005a2c:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a2e:	2280      	movs	r2, #128	; 0x80
 8005a30:	611a      	str	r2, [r3, #16]
 8005a32:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005a3a:	4b23      	ldr	r3, [pc, #140]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a40:	611a      	str	r2, [r3, #16]
 8005a42:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a48:	615a      	str	r2, [r3, #20]
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <LCD_Init+0x3c1c>)
 8005a4c:	2217      	movs	r2, #23
 8005a4e:	60da      	str	r2, [r3, #12]
 8005a50:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	615a      	str	r2, [r3, #20]
 8005a56:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a58:	2280      	movs	r2, #128	; 0x80
 8005a5a:	611a      	str	r2, [r3, #16]
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a6a:	611a      	str	r2, [r3, #16]
 8005a6c:	4b16      	ldr	r3, [pc, #88]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a72:	615a      	str	r2, [r3, #20]
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <LCD_Init+0x3c1c>)
 8005a76:	2215      	movs	r2, #21
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a7c:	2280      	movs	r2, #128	; 0x80
 8005a7e:	615a      	str	r2, [r3, #20]
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a82:	2280      	movs	r2, #128	; 0x80
 8005a84:	611a      	str	r2, [r3, #16]
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a94:	611a      	str	r2, [r3, #16]
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <LCD_Init+0x3c18>)
 8005a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9c:	615a      	str	r2, [r3, #20]
 8005a9e:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <LCD_Init+0x3c1c>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	60da      	str	r2, [r3, #12]
 8005aa4:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <LCD_Init+0x3c18>)
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	615a      	str	r2, [r3, #20]
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <LCD_Init+0x3c18>)
 8005aac:	2280      	movs	r2, #128	; 0x80
 8005aae:	611a      	str	r2, [r3, #16]
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <LCD_Init+0x3c18>)
 8005ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <LCD_Init+0x3c18>)
 8005aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005abe:	611a      	str	r2, [r3, #16]
 8005ac0:	4b01      	ldr	r3, [pc, #4]	; (8005ac8 <LCD_Init+0x3c18>)
 8005ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac6:	e003      	b.n	8005ad0 <LCD_Init+0x3c20>
 8005ac8:	40011000 	.word	0x40011000
 8005acc:	40010c00 	.word	0x40010c00
 8005ad0:	615a      	str	r2, [r3, #20]
 8005ad2:	4b8b      	ldr	r3, [pc, #556]	; (8005d00 <LCD_Init+0x3e50>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	4b8a      	ldr	r3, [pc, #552]	; (8005d04 <LCD_Init+0x3e54>)
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	615a      	str	r2, [r3, #20]
 8005ade:	4b89      	ldr	r3, [pc, #548]	; (8005d04 <LCD_Init+0x3e54>)
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	611a      	str	r2, [r3, #16]
 8005ae4:	4b87      	ldr	r3, [pc, #540]	; (8005d04 <LCD_Init+0x3e54>)
 8005ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aea:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005aec:	20f0      	movs	r0, #240	; 0xf0
 8005aee:	f7fa fee9 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005af2:	4b84      	ldr	r3, [pc, #528]	; (8005d04 <LCD_Init+0x3e54>)
 8005af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	4b82      	ldr	r3, [pc, #520]	; (8005d04 <LCD_Init+0x3e54>)
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	615a      	str	r2, [r3, #20]
 8005b02:	4b7f      	ldr	r3, [pc, #508]	; (8005d00 <LCD_Init+0x3e50>)
 8005b04:	2203      	movs	r2, #3
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	4b7e      	ldr	r3, [pc, #504]	; (8005d04 <LCD_Init+0x3e54>)
 8005b0a:	2280      	movs	r2, #128	; 0x80
 8005b0c:	615a      	str	r2, [r3, #20]
 8005b0e:	4b7d      	ldr	r3, [pc, #500]	; (8005d04 <LCD_Init+0x3e54>)
 8005b10:	2280      	movs	r2, #128	; 0x80
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	4b7b      	ldr	r3, [pc, #492]	; (8005d04 <LCD_Init+0x3e54>)
 8005b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005b1c:	2029      	movs	r0, #41	; 0x29
 8005b1e:	f7fa fed1 	bl	80008c4 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005b22:	20d0      	movs	r0, #208	; 0xd0
 8005b24:	f7fa fece 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005b28:	4b76      	ldr	r3, [pc, #472]	; (8005d04 <LCD_Init+0x3e54>)
 8005b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b2e:	611a      	str	r2, [r3, #16]
 8005b30:	4b74      	ldr	r3, [pc, #464]	; (8005d04 <LCD_Init+0x3e54>)
 8005b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b36:	615a      	str	r2, [r3, #20]
 8005b38:	4b71      	ldr	r3, [pc, #452]	; (8005d00 <LCD_Init+0x3e50>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	60da      	str	r2, [r3, #12]
 8005b3e:	4b71      	ldr	r3, [pc, #452]	; (8005d04 <LCD_Init+0x3e54>)
 8005b40:	2280      	movs	r2, #128	; 0x80
 8005b42:	615a      	str	r2, [r3, #20]
 8005b44:	4b6f      	ldr	r3, [pc, #444]	; (8005d04 <LCD_Init+0x3e54>)
 8005b46:	2280      	movs	r2, #128	; 0x80
 8005b48:	611a      	str	r2, [r3, #16]
 8005b4a:	4b6e      	ldr	r3, [pc, #440]	; (8005d04 <LCD_Init+0x3e54>)
 8005b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b50:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005b52:	20be      	movs	r0, #190	; 0xbe
 8005b54:	f7fa feb6 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005b58:	4b6a      	ldr	r3, [pc, #424]	; (8005d04 <LCD_Init+0x3e54>)
 8005b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5e:	611a      	str	r2, [r3, #16]
 8005b60:	4b68      	ldr	r3, [pc, #416]	; (8005d04 <LCD_Init+0x3e54>)
 8005b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b66:	615a      	str	r2, [r3, #20]
 8005b68:	4b65      	ldr	r3, [pc, #404]	; (8005d00 <LCD_Init+0x3e50>)
 8005b6a:	2205      	movs	r2, #5
 8005b6c:	60da      	str	r2, [r3, #12]
 8005b6e:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <LCD_Init+0x3e54>)
 8005b70:	2280      	movs	r2, #128	; 0x80
 8005b72:	615a      	str	r2, [r3, #20]
 8005b74:	4b63      	ldr	r3, [pc, #396]	; (8005d04 <LCD_Init+0x3e54>)
 8005b76:	2280      	movs	r2, #128	; 0x80
 8005b78:	611a      	str	r2, [r3, #16]
 8005b7a:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <LCD_Init+0x3e54>)
 8005b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005b82:	4b60      	ldr	r3, [pc, #384]	; (8005d04 <LCD_Init+0x3e54>)
 8005b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b88:	611a      	str	r2, [r3, #16]
 8005b8a:	4b5e      	ldr	r3, [pc, #376]	; (8005d04 <LCD_Init+0x3e54>)
 8005b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b90:	615a      	str	r2, [r3, #20]
 8005b92:	4b5b      	ldr	r3, [pc, #364]	; (8005d00 <LCD_Init+0x3e50>)
 8005b94:	22fe      	movs	r2, #254	; 0xfe
 8005b96:	60da      	str	r2, [r3, #12]
 8005b98:	4b5a      	ldr	r3, [pc, #360]	; (8005d04 <LCD_Init+0x3e54>)
 8005b9a:	2280      	movs	r2, #128	; 0x80
 8005b9c:	615a      	str	r2, [r3, #20]
 8005b9e:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <LCD_Init+0x3e54>)
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	611a      	str	r2, [r3, #16]
 8005ba4:	4b57      	ldr	r3, [pc, #348]	; (8005d04 <LCD_Init+0x3e54>)
 8005ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005baa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005bac:	4b55      	ldr	r3, [pc, #340]	; (8005d04 <LCD_Init+0x3e54>)
 8005bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bb2:	611a      	str	r2, [r3, #16]
 8005bb4:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <LCD_Init+0x3e54>)
 8005bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bba:	615a      	str	r2, [r3, #20]
 8005bbc:	4b50      	ldr	r3, [pc, #320]	; (8005d00 <LCD_Init+0x3e50>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	60da      	str	r2, [r3, #12]
 8005bc2:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <LCD_Init+0x3e54>)
 8005bc4:	2280      	movs	r2, #128	; 0x80
 8005bc6:	615a      	str	r2, [r3, #20]
 8005bc8:	4b4e      	ldr	r3, [pc, #312]	; (8005d04 <LCD_Init+0x3e54>)
 8005bca:	2280      	movs	r2, #128	; 0x80
 8005bcc:	611a      	str	r2, [r3, #16]
 8005bce:	4b4d      	ldr	r3, [pc, #308]	; (8005d04 <LCD_Init+0x3e54>)
 8005bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005bd6:	4b4b      	ldr	r3, [pc, #300]	; (8005d04 <LCD_Init+0x3e54>)
 8005bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bdc:	611a      	str	r2, [r3, #16]
 8005bde:	4b49      	ldr	r3, [pc, #292]	; (8005d04 <LCD_Init+0x3e54>)
 8005be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be4:	615a      	str	r2, [r3, #20]
 8005be6:	4b46      	ldr	r3, [pc, #280]	; (8005d00 <LCD_Init+0x3e50>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	4b45      	ldr	r3, [pc, #276]	; (8005d04 <LCD_Init+0x3e54>)
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	615a      	str	r2, [r3, #20]
 8005bf2:	4b44      	ldr	r3, [pc, #272]	; (8005d04 <LCD_Init+0x3e54>)
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	611a      	str	r2, [r3, #16]
 8005bf8:	4b42      	ldr	r3, [pc, #264]	; (8005d04 <LCD_Init+0x3e54>)
 8005bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005c00:	4b40      	ldr	r3, [pc, #256]	; (8005d04 <LCD_Init+0x3e54>)
 8005c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c06:	611a      	str	r2, [r3, #16]
 8005c08:	4b3e      	ldr	r3, [pc, #248]	; (8005d04 <LCD_Init+0x3e54>)
 8005c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0e:	615a      	str	r2, [r3, #20]
 8005c10:	4b3b      	ldr	r3, [pc, #236]	; (8005d00 <LCD_Init+0x3e50>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <LCD_Init+0x3e54>)
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	615a      	str	r2, [r3, #20]
 8005c1c:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <LCD_Init+0x3e54>)
 8005c1e:	2280      	movs	r2, #128	; 0x80
 8005c20:	611a      	str	r2, [r3, #16]
 8005c22:	4b38      	ldr	r3, [pc, #224]	; (8005d04 <LCD_Init+0x3e54>)
 8005c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005c2a:	4b36      	ldr	r3, [pc, #216]	; (8005d04 <LCD_Init+0x3e54>)
 8005c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c30:	611a      	str	r2, [r3, #16]
 8005c32:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <LCD_Init+0x3e54>)
 8005c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c38:	615a      	str	r2, [r3, #20]
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <LCD_Init+0x3e50>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	60da      	str	r2, [r3, #12]
 8005c40:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <LCD_Init+0x3e54>)
 8005c42:	2280      	movs	r2, #128	; 0x80
 8005c44:	615a      	str	r2, [r3, #20]
 8005c46:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <LCD_Init+0x3e54>)
 8005c48:	2280      	movs	r2, #128	; 0x80
 8005c4a:	611a      	str	r2, [r3, #16]
 8005c4c:	4b2d      	ldr	r3, [pc, #180]	; (8005d04 <LCD_Init+0x3e54>)
 8005c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c52:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005c54:	20b8      	movs	r0, #184	; 0xb8
 8005c56:	f7fa fe35 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005c5a:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <LCD_Init+0x3e54>)
 8005c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c60:	611a      	str	r2, [r3, #16]
 8005c62:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <LCD_Init+0x3e54>)
 8005c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c68:	615a      	str	r2, [r3, #20]
 8005c6a:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <LCD_Init+0x3e50>)
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	60da      	str	r2, [r3, #12]
 8005c70:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <LCD_Init+0x3e54>)
 8005c72:	2280      	movs	r2, #128	; 0x80
 8005c74:	615a      	str	r2, [r3, #20]
 8005c76:	4b23      	ldr	r3, [pc, #140]	; (8005d04 <LCD_Init+0x3e54>)
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	611a      	str	r2, [r3, #16]
 8005c7c:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <LCD_Init+0x3e54>)
 8005c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005c84:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <LCD_Init+0x3e54>)
 8005c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c8a:	611a      	str	r2, [r3, #16]
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <LCD_Init+0x3e54>)
 8005c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c92:	615a      	str	r2, [r3, #20]
 8005c94:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <LCD_Init+0x3e50>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	60da      	str	r2, [r3, #12]
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <LCD_Init+0x3e54>)
 8005c9c:	2280      	movs	r2, #128	; 0x80
 8005c9e:	615a      	str	r2, [r3, #20]
 8005ca0:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <LCD_Init+0x3e54>)
 8005ca2:	2280      	movs	r2, #128	; 0x80
 8005ca4:	611a      	str	r2, [r3, #16]
 8005ca6:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <LCD_Init+0x3e54>)
 8005ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005cae:	20ba      	movs	r0, #186	; 0xba
 8005cb0:	f7fa fe08 	bl	80008c4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005cb4:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <LCD_Init+0x3e54>)
 8005cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cba:	611a      	str	r2, [r3, #16]
 8005cbc:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <LCD_Init+0x3e54>)
 8005cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc2:	615a      	str	r2, [r3, #20]
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <LCD_Init+0x3e50>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <LCD_Init+0x3e54>)
 8005ccc:	2280      	movs	r2, #128	; 0x80
 8005cce:	615a      	str	r2, [r3, #20]
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <LCD_Init+0x3e54>)
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	611a      	str	r2, [r3, #16]
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <LCD_Init+0x3e54>)
 8005cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cdc:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005cde:	2064      	movs	r0, #100	; 0x64
 8005ce0:	f7fb ff36 	bl	8001b50 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f7fb ffd7 	bl	8001c98 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <LCD_Init+0x3e58>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005cf0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005cf4:	f000 f80a 	bl	8005d0c <LCD_Clear>
}
 8005cf8:	bf00      	nop
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40010c00 	.word	0x40010c00
 8005d04:	40011000 	.word	0x40011000
 8005d08:	422201a8 	.word	0x422201a8

08005d0c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005d20:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d22:	885b      	ldrh	r3, [r3, #2]
 8005d24:	461a      	mov	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	fb02 f303 	mul.w	r3, r2, r3
 8005d2c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005d2e:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d30:	889b      	ldrh	r3, [r3, #4]
 8005d32:	f646 0204 	movw	r2, #26628	; 0x6804
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d11a      	bne.n	8005d70 <LCD_Clear+0x64>
 8005d3a:	4b22      	ldr	r3, [pc, #136]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d3c:	799b      	ldrb	r3, [r3, #6]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d116      	bne.n	8005d70 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005d42:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005d48:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d4a:	222a      	movs	r2, #42	; 0x2a
 8005d4c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005d4e:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d50:	222b      	movs	r2, #43	; 0x2b
 8005d52:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005d54:	2100      	movs	r1, #0
 8005d56:	2000      	movs	r0, #0
 8005d58:	f7fa fe86 	bl	8000a68 <LCD_SetCursor>
		lcddev.dir = 1;
 8005d5c:	4b19      	ldr	r3, [pc, #100]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005d62:	4b18      	ldr	r3, [pc, #96]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d64:	222b      	movs	r2, #43	; 0x2b
 8005d66:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005d68:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <LCD_Clear+0xb8>)
 8005d6a:	222a      	movs	r2, #42	; 0x2a
 8005d6c:	819a      	strh	r2, [r3, #12]
 8005d6e:	e003      	b.n	8005d78 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005d70:	2100      	movs	r1, #0
 8005d72:	2000      	movs	r0, #0
 8005d74:	f7fa fe78 	bl	8000a68 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005d78:	f7fa fe6a 	bl	8000a50 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e017      	b.n	8005db2 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005d82:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <LCD_Clear+0xbc>)
 8005d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d88:	611a      	str	r2, [r3, #16]
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <LCD_Clear+0xbc>)
 8005d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d90:	615a      	str	r2, [r3, #20]
 8005d92:	4a0e      	ldr	r2, [pc, #56]	; (8005dcc <LCD_Clear+0xc0>)
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	60d3      	str	r3, [r2, #12]
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <LCD_Clear+0xbc>)
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	615a      	str	r2, [r3, #20]
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <LCD_Clear+0xbc>)
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	611a      	str	r2, [r3, #16]
 8005da4:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <LCD_Clear+0xbc>)
 8005da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005daa:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3e3      	bcc.n	8005d82 <LCD_Clear+0x76>
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000030 	.word	0x20000030
 8005dc8:	40011000 	.word	0x40011000
 8005dcc:	40010c00 	.word	0x40010c00

08005dd0 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	4608      	mov	r0, r1
 8005dda:	4611      	mov	r1, r2
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4623      	mov	r3, r4
 8005de0:	80fb      	strh	r3, [r7, #6]
 8005de2:	4603      	mov	r3, r0
 8005de4:	80bb      	strh	r3, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
 8005dea:	4613      	mov	r3, r2
 8005dec:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005dee:	88bb      	ldrh	r3, [r7, #4]
 8005df0:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005df2:	78bb      	ldrb	r3, [r7, #2]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	78bb      	ldrb	r3, [r7, #2]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bf14      	ite	ne
 8005e06:	2301      	movne	r3, #1
 8005e08:	2300      	moveq	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	78ba      	ldrb	r2, [r7, #2]
 8005e12:	0852      	lsrs	r2, r2, #1
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	fb02 f303 	mul.w	r3, r2, r3
 8005e1a:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	3b20      	subs	r3, #32
 8005e20:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005e22:	2300      	movs	r3, #0
 8005e24:	737b      	strb	r3, [r7, #13]
 8005e26:	e069      	b.n	8005efc <LCD_ShowChar+0x12c>
		if (size == 12)
 8005e28:	78bb      	ldrb	r3, [r7, #2]
 8005e2a:	2b0c      	cmp	r3, #12
 8005e2c:	d10b      	bne.n	8005e46 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	7b79      	ldrb	r1, [r7, #13]
 8005e32:	4838      	ldr	r0, [pc, #224]	; (8005f14 <LCD_ShowChar+0x144>)
 8005e34:	4613      	mov	r3, r2
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4403      	add	r3, r0
 8005e3e:	440b      	add	r3, r1
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	73fb      	strb	r3, [r7, #15]
 8005e44:	e019      	b.n	8005e7a <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005e46:	78bb      	ldrb	r3, [r7, #2]
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d108      	bne.n	8005e5e <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	7b7b      	ldrb	r3, [r7, #13]
 8005e50:	4931      	ldr	r1, [pc, #196]	; (8005f18 <LCD_ShowChar+0x148>)
 8005e52:	0112      	lsls	r2, r2, #4
 8005e54:	440a      	add	r2, r1
 8005e56:	4413      	add	r3, r2
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	73fb      	strb	r3, [r7, #15]
 8005e5c:	e00d      	b.n	8005e7a <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005e5e:	78bb      	ldrb	r3, [r7, #2]
 8005e60:	2b18      	cmp	r3, #24
 8005e62:	d150      	bne.n	8005f06 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	7b79      	ldrb	r1, [r7, #13]
 8005e68:	482c      	ldr	r0, [pc, #176]	; (8005f1c <LCD_ShowChar+0x14c>)
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4403      	add	r3, r0
 8005e74:	440b      	add	r3, r1
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73bb      	strb	r3, [r7, #14]
 8005e7e:	e035      	b.n	8005eec <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da07      	bge.n	8005e98 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005e88:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <LCD_ShowChar+0x150>)
 8005e8a:	881a      	ldrh	r2, [r3, #0]
 8005e8c:	88b9      	ldrh	r1, [r7, #4]
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fb fbc7 	bl	8001624 <LCD_Fast_DrawPoint>
 8005e96:	e00a      	b.n	8005eae <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005ea0:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <LCD_ShowChar+0x154>)
 8005ea2:	881a      	ldrh	r2, [r3, #0]
 8005ea4:	88b9      	ldrh	r1, [r7, #4]
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fb fbbb 	bl	8001624 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
			y++;
 8005eb4:	88bb      	ldrh	r3, [r7, #4]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005eba:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <LCD_ShowChar+0x158>)
 8005ebc:	885b      	ldrh	r3, [r3, #2]
 8005ebe:	88ba      	ldrh	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d222      	bcs.n	8005f0a <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005ec4:	88ba      	ldrh	r2, [r7, #4]
 8005ec6:	897b      	ldrh	r3, [r7, #10]
 8005ec8:	1ad2      	subs	r2, r2, r3
 8005eca:	78bb      	ldrb	r3, [r7, #2]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d10a      	bne.n	8005ee6 <LCD_ShowChar+0x116>
				y = y0;
 8005ed0:	897b      	ldrh	r3, [r7, #10]
 8005ed2:	80bb      	strh	r3, [r7, #4]
				x++;
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005eda:	4b13      	ldr	r3, [pc, #76]	; (8005f28 <LCD_ShowChar+0x158>)
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d307      	bcc.n	8005ef4 <LCD_ShowChar+0x124>
					return;	//超区域了
 8005ee4:	e012      	b.n	8005f0c <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005ee6:	7bbb      	ldrb	r3, [r7, #14]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	73bb      	strb	r3, [r7, #14]
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	2b07      	cmp	r3, #7
 8005ef0:	d9c6      	bls.n	8005e80 <LCD_ShowChar+0xb0>
 8005ef2:	e000      	b.n	8005ef6 <LCD_ShowChar+0x126>
				break;
 8005ef4:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005ef6:	7b7b      	ldrb	r3, [r7, #13]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	737b      	strb	r3, [r7, #13]
 8005efc:	7b7a      	ldrb	r2, [r7, #13]
 8005efe:	7a7b      	ldrb	r3, [r7, #9]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d391      	bcc.n	8005e28 <LCD_ShowChar+0x58>
 8005f04:	e002      	b.n	8005f0c <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005f0a:	bf00      	nop
			}
		}
	}
}
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd90      	pop	{r4, r7, pc}
 8005f12:	bf00      	nop
 8005f14:	08007ba4 	.word	0x08007ba4
 8005f18:	08008018 	.word	0x08008018
 8005f1c:	08008608 	.word	0x08008608
 8005f20:	2000002c 	.word	0x2000002c
 8005f24:	20000000 	.word	0x20000000
 8005f28:	20000030 	.word	0x20000030

08005f2c <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	80fb      	strh	r3, [r7, #6]
 8005f3e:	4603      	mov	r3, r0
 8005f40:	80bb      	strh	r3, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	807b      	strh	r3, [r7, #2]
 8005f46:	4613      	mov	r3, r2
 8005f48:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	73fb      	strb	r3, [r7, #15]
	width += x;
 8005f4e:	887a      	ldrh	r2, [r7, #2]
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	4413      	add	r3, r2
 8005f54:	807b      	strh	r3, [r7, #2]
	height += y;
 8005f56:	883a      	ldrh	r2, [r7, #0]
 8005f58:	88bb      	ldrh	r3, [r7, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005f5e:	e024      	b.n	8005faa <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8005f60:	88fa      	ldrh	r2, [r7, #6]
 8005f62:	887b      	ldrh	r3, [r7, #2]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d307      	bcc.n	8005f78 <LCD_ShowString+0x4c>
			x = x0;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	80fb      	strh	r3, [r7, #6]
			y += size;
 8005f6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	88bb      	ldrh	r3, [r7, #4]
 8005f74:	4413      	add	r3, r2
 8005f76:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8005f78:	88ba      	ldrh	r2, [r7, #4]
 8005f7a:	883b      	ldrh	r3, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d21d      	bcs.n	8005fbc <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f88:	88b9      	ldrh	r1, [r7, #4]
 8005f8a:	88f8      	ldrh	r0, [r7, #6]
 8005f8c:	2400      	movs	r4, #0
 8005f8e:	9400      	str	r4, [sp, #0]
 8005f90:	f7ff ff1e 	bl	8005dd0 <LCD_ShowChar>
		x += size / 2;
 8005f94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	80fb      	strh	r3, [r7, #6]
		p++;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b7e      	cmp	r3, #126	; 0x7e
 8005fb0:	d805      	bhi.n	8005fbe <LCD_ShowString+0x92>
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b1f      	cmp	r3, #31
 8005fb8:	d8d2      	bhi.n	8005f60 <LCD_ShowString+0x34>
	}
}
 8005fba:	e000      	b.n	8005fbe <LCD_ShowString+0x92>
			break;	//退出
 8005fbc:	bf00      	nop
}
 8005fbe:	bf00      	nop
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd90      	pop	{r4, r7, pc}
	...

08005fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fce:	f000 fa37 	bl	8006440 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_Init();
 8005fd2:	f7fb ff6d 	bl	8001eb0 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fd6:	f000 f825 	bl	8006024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fda:	f7fa fc33 	bl	8000844 <MX_GPIO_Init>
  MX_TIM3_Init();
 8005fde:	f000 f995 	bl	800630c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8005fe2:	480c      	ldr	r0, [pc, #48]	; (8006014 <main+0x4c>)
 8005fe4:	f001 f9b2 	bl	800734c <HAL_TIM_Base_Start_IT>

	LCD_Clear(WHITE); BACK_COLOR = WHITE;
 8005fe8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005fec:	f7ff fe8e 	bl	8005d0c <LCD_Clear>
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <main+0x50>)
 8005ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ff6:	801a      	strh	r2, [r3, #0]
	POINT_COLOR = BLUE;
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <main+0x54>)
 8005ffa:	221f      	movs	r2, #31
 8005ffc:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(20, 20, 150, 15, 24, (uint8_t*) "Counter Demo:");
 8005ffe:	4b08      	ldr	r3, [pc, #32]	; (8006020 <main+0x58>)
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	2318      	movs	r3, #24
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	230f      	movs	r3, #15
 8006008:	2296      	movs	r2, #150	; 0x96
 800600a:	2114      	movs	r1, #20
 800600c:	2014      	movs	r0, #20
 800600e:	f7ff ff8d 	bl	8005f2c <LCD_ShowString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006012:	e7fe      	b.n	8006012 <main+0x4a>
 8006014:	20000044 	.word	0x20000044
 8006018:	20000000 	.word	0x20000000
 800601c:	2000002c 	.word	0x2000002c
 8006020:	08007b80 	.word	0x08007b80

08006024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b090      	sub	sp, #64	; 0x40
 8006028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800602a:	f107 0318 	add.w	r3, r7, #24
 800602e:	2228      	movs	r2, #40	; 0x28
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f001 fd6c 	bl	8007b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006038:	1d3b      	adds	r3, r7, #4
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
 8006040:	609a      	str	r2, [r3, #8]
 8006042:	60da      	str	r2, [r3, #12]
 8006044:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006046:	2301      	movs	r3, #1
 8006048:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800604a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800604e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006050:	2300      	movs	r3, #0
 8006052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006054:	2301      	movs	r3, #1
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006058:	2302      	movs	r3, #2
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800605c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006062:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006068:	f107 0318 	add.w	r3, r7, #24
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fd3f 	bl	8006af0 <HAL_RCC_OscConfig>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006078:	f000 f819 	bl	80060ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800607c:	230f      	movs	r3, #15
 800607e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006080:	2302      	movs	r3, #2
 8006082:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800608c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006092:	1d3b      	adds	r3, r7, #4
 8006094:	2102      	movs	r1, #2
 8006096:	4618      	mov	r0, r3
 8006098:	f000 ffac 	bl	8006ff4 <HAL_RCC_ClockConfig>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80060a2:	f000 f804 	bl	80060ae <Error_Handler>
  }
}
 80060a6:	bf00      	nop
 80060a8:	3740      	adds	r7, #64	; 0x40
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060ae:	b480      	push	{r7}
 80060b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80060b2:	b672      	cpsid	i
}
 80060b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80060b6:	e7fe      	b.n	80060b6 <Error_Handler+0x8>

080060b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <HAL_MspInit+0x60>)
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	4a15      	ldr	r2, [pc, #84]	; (8006118 <HAL_MspInit+0x60>)
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	6193      	str	r3, [r2, #24]
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <HAL_MspInit+0x60>)
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <HAL_MspInit+0x60>)
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	4a0f      	ldr	r2, [pc, #60]	; (8006118 <HAL_MspInit+0x60>)
 80060dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e0:	61d3      	str	r3, [r2, #28]
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <HAL_MspInit+0x60>)
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	607b      	str	r3, [r7, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80060ee:	2005      	movs	r0, #5
 80060f0:	f000 faf8 	bl	80066e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80060f4:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_MspInit+0x64>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	4a04      	ldr	r2, [pc, #16]	; (800611c <HAL_MspInit+0x64>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40021000 	.word	0x40021000
 800611c:	40010000 	.word	0x40010000

08006120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006124:	e7fe      	b.n	8006124 <NMI_Handler+0x4>

08006126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800612a:	e7fe      	b.n	800612a <HardFault_Handler+0x4>

0800612c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006130:	e7fe      	b.n	8006130 <MemManage_Handler+0x4>

08006132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006132:	b480      	push	{r7}
 8006134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006136:	e7fe      	b.n	8006136 <BusFault_Handler+0x4>

08006138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800613c:	e7fe      	b.n	800613c <UsageFault_Handler+0x4>

0800613e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800613e:	b480      	push	{r7}
 8006140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006142:	bf00      	nop
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr

0800614a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800614a:	b480      	push	{r7}
 800614c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800614e:	bf00      	nop
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006156:	b480      	push	{r7}
 8006158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr

08006162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006166:	f000 f9b1 	bl	80064cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800616a:	bf00      	nop
 800616c:	bd80      	pop	{r7, pc}

0800616e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 8006172:	2001      	movs	r0, #1
 8006174:	f000 fca4 	bl	8006ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}

0800617c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006180:	4802      	ldr	r0, [pc, #8]	; (800618c <TIM3_IRQHandler+0x10>)
 8006182:	f001 f943 	bl	800740c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000044 	.word	0x20000044

08006190 <write>:

/* USER CODE BEGIN 1 */
int cnt = 0;
void write(char *ch){
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8
 8006196:	6078      	str	r0, [r7, #4]
	int cipher_x = 15, cipher_y = 80;
 8006198:	230f      	movs	r3, #15
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	2350      	movs	r3, #80	; 0x50
 800619e:	613b      	str	r3, [r7, #16]
	BACK_COLOR = WHITE; POINT_COLOR = RED;
 80061a0:	4b1e      	ldr	r3, [pc, #120]	; (800621c <write+0x8c>)
 80061a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <write+0x90>)
 80061aa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80061ae:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < strlen(ch); i++){
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e026      	b.n	8006204 <write+0x74>
		char fffff[2];
		fffff[0] = ch[i];
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4413      	add	r3, r2
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	723b      	strb	r3, [r7, #8]
		fffff[1] = '\0';
 80061c0:	2300      	movs	r3, #0
 80061c2:	727b      	strb	r3, [r7, #9]
		LCD_ShowString(cipher_x, cipher_y, 200, 24, 16, (uint8_t*) fffff);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	b298      	uxth	r0, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	b299      	uxth	r1, r3
 80061cc:	f107 0308 	add.w	r3, r7, #8
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	2310      	movs	r3, #16
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	2318      	movs	r3, #24
 80061d8:	22c8      	movs	r2, #200	; 0xc8
 80061da:	f7ff fea7 	bl	8005f2c <LCD_ShowString>
		cipher_x += 8;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	3308      	adds	r3, #8
 80061e2:	617b      	str	r3, [r7, #20]
		if (cipher_x > 215) cipher_x = 15, cipher_y += 20;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2bd7      	cmp	r3, #215	; 0xd7
 80061e8:	dd04      	ble.n	80061f4 <write+0x64>
 80061ea:	230f      	movs	r3, #15
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	3314      	adds	r3, #20
 80061f2:	613b      	str	r3, [r7, #16]
		if (cipher_y > 120) cipher_y = 60;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b78      	cmp	r3, #120	; 0x78
 80061f8:	dd01      	ble.n	80061fe <write+0x6e>
 80061fa:	233c      	movs	r3, #60	; 0x3c
 80061fc:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < strlen(ch); i++){
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fa f80f 	bl	8000228 <strlen>
 800620a:	4602      	mov	r2, r0
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	429a      	cmp	r2, r3
 8006210:	d8d1      	bhi.n	80061b6 <write+0x26>
	}
}
 8006212:	bf00      	nop
 8006214:	bf00      	nop
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000000 	.word	0x20000000
 8006220:	2000002c 	.word	0x2000002c

08006224 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8006224:	b5b0      	push	{r4, r5, r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	cnt = cnt + 1;
 800622c:	4b25      	ldr	r3, [pc, #148]	; (80062c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006234:	6013      	str	r3, [r2, #0]
	char ch[20] = "Count to number: ";
 8006236:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8006238:	f107 040c 	add.w	r4, r7, #12
 800623c:	461d      	mov	r5, r3
 800623e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	8023      	strh	r3, [r4, #0]
 8006246:	2300      	movs	r3, #0
 8006248:	83fb      	strh	r3, [r7, #30]
	int len = strlen(ch);
 800624a:	f107 030c 	add.w	r3, r7, #12
 800624e:	4618      	mov	r0, r3
 8006250:	f7f9 ffea 	bl	8000228 <strlen>
 8006254:	4603      	mov	r3, r0
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
	int tmp = cnt;
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	623b      	str	r3, [r7, #32]
	while (tmp != 0){
 800625e:	e025      	b.n	80062ac <HAL_TIM_PeriodElapsedCallback+0x88>
		ch[len] = (char)(tmp % 10 + 48);
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8006264:	fb83 1302 	smull	r1, r3, r3, r2
 8006268:	1099      	asrs	r1, r3, #2
 800626a:	17d3      	asrs	r3, r2, #31
 800626c:	1ac9      	subs	r1, r1, r3
 800626e:	460b      	mov	r3, r1
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	1ad1      	subs	r1, r2, r3
 8006278:	b2cb      	uxtb	r3, r1
 800627a:	3330      	adds	r3, #48	; 0x30
 800627c:	b2d9      	uxtb	r1, r3
 800627e:	f107 020c 	add.w	r2, r7, #12
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	4413      	add	r3, r2
 8006286:	460a      	mov	r2, r1
 8006288:	701a      	strb	r2, [r3, #0]
		ch[++len] = '\n';
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	3301      	adds	r3, #1
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	f107 020c 	add.w	r2, r7, #12
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	4413      	add	r3, r2
 8006298:	220a      	movs	r2, #10
 800629a:	701a      	strb	r2, [r3, #0]
		tmp /= 10;
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	4a0b      	ldr	r2, [pc, #44]	; (80062cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80062a0:	fb82 1203 	smull	r1, r2, r2, r3
 80062a4:	1092      	asrs	r2, r2, #2
 80062a6:	17db      	asrs	r3, r3, #31
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	623b      	str	r3, [r7, #32]
	while (tmp != 0){
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1d6      	bne.n	8006260 <HAL_TIM_PeriodElapsedCallback+0x3c>
	}
	write(ch);
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff ff6a 	bl	8006190 <write>
}
 80062bc:	bf00      	nop
 80062be:	3728      	adds	r7, #40	; 0x28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bdb0      	pop	{r4, r5, r7, pc}
 80062c4:	20000040 	.word	0x20000040
 80062c8:	08007b90 	.word	0x08007b90
 80062cc:	66666667 	.word	0x66666667

080062d0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET){
 80062da:	2101      	movs	r1, #1
 80062dc:	4806      	ldr	r0, [pc, #24]	; (80062f8 <HAL_GPIO_EXTI_Callback+0x28>)
 80062de:	f000 fbd7 	bl	8006a90 <HAL_GPIO_ReadPin>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d102      	bne.n	80062ee <HAL_GPIO_EXTI_Callback+0x1e>
		cnt = 0;
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <HAL_GPIO_EXTI_Callback+0x2c>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
	}
}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40010800 	.word	0x40010800
 80062fc:	20000040 	.word	0x20000040

08006300 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006312:	f107 0308 	add.w	r3, r7, #8
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	605a      	str	r2, [r3, #4]
 800631c:	609a      	str	r2, [r3, #8]
 800631e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006320:	463b      	mov	r3, r7
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006328:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <MX_TIM3_Init+0x94>)
 800632a:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <MX_TIM3_Init+0x98>)
 800632c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800632e:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <MX_TIM3_Init+0x94>)
 8006330:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8006334:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006336:	4b1a      	ldr	r3, [pc, #104]	; (80063a0 <MX_TIM3_Init+0x94>)
 8006338:	2200      	movs	r2, #0
 800633a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800633c:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <MX_TIM3_Init+0x94>)
 800633e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006342:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006344:	4b16      	ldr	r3, [pc, #88]	; (80063a0 <MX_TIM3_Init+0x94>)
 8006346:	2200      	movs	r2, #0
 8006348:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800634a:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <MX_TIM3_Init+0x94>)
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006350:	4813      	ldr	r0, [pc, #76]	; (80063a0 <MX_TIM3_Init+0x94>)
 8006352:	f000 ffab 	bl	80072ac <HAL_TIM_Base_Init>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800635c:	f7ff fea7 	bl	80060ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006366:	f107 0308 	add.w	r3, r7, #8
 800636a:	4619      	mov	r1, r3
 800636c:	480c      	ldr	r0, [pc, #48]	; (80063a0 <MX_TIM3_Init+0x94>)
 800636e:	f001 f955 	bl	800761c <HAL_TIM_ConfigClockSource>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8006378:	f7ff fe99 	bl	80060ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800637c:	2300      	movs	r3, #0
 800637e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006380:	2300      	movs	r3, #0
 8006382:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006384:	463b      	mov	r3, r7
 8006386:	4619      	mov	r1, r3
 8006388:	4805      	ldr	r0, [pc, #20]	; (80063a0 <MX_TIM3_Init+0x94>)
 800638a:	f001 fb43 	bl	8007a14 <HAL_TIMEx_MasterConfigSynchronization>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006394:	f7ff fe8b 	bl	80060ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006398:	bf00      	nop
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000044 	.word	0x20000044
 80063a4:	40000400 	.word	0x40000400

080063a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <HAL_TIM_Base_MspInit+0x44>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d113      	bne.n	80063e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80063ba:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <HAL_TIM_Base_MspInit+0x48>)
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	4a0c      	ldr	r2, [pc, #48]	; (80063f0 <HAL_TIM_Base_MspInit+0x48>)
 80063c0:	f043 0302 	orr.w	r3, r3, #2
 80063c4:	61d3      	str	r3, [r2, #28]
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <HAL_TIM_Base_MspInit+0x48>)
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80063d2:	2200      	movs	r2, #0
 80063d4:	2101      	movs	r1, #1
 80063d6:	201d      	movs	r0, #29
 80063d8:	f000 f98f 	bl	80066fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80063dc:	201d      	movs	r0, #29
 80063de:	f000 f9a8 	bl	8006732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40021000 	.word	0x40021000

080063f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80063f4:	f7ff ff84 	bl	8006300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063f8:	480b      	ldr	r0, [pc, #44]	; (8006428 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80063fa:	490c      	ldr	r1, [pc, #48]	; (800642c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80063fc:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <LoopFillZerobss+0x16>)
  movs r3, #0
 80063fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006400:	e002      	b.n	8006408 <LoopCopyDataInit>

08006402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006406:	3304      	adds	r3, #4

08006408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800640a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800640c:	d3f9      	bcc.n	8006402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800640e:	4a09      	ldr	r2, [pc, #36]	; (8006434 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006410:	4c09      	ldr	r4, [pc, #36]	; (8006438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006414:	e001      	b.n	800641a <LoopFillZerobss>

08006416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006418:	3204      	adds	r2, #4

0800641a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800641a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800641c:	d3fb      	bcc.n	8006416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800641e:	f001 fb7f 	bl	8007b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006422:	f7ff fdd1 	bl	8005fc8 <main>
  bx lr
 8006426:	4770      	bx	lr
  ldr r0, =_sdata
 8006428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800642c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8006430:	08009390 	.word	0x08009390
  ldr r2, =_sbss
 8006434:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8006438:	20000090 	.word	0x20000090

0800643c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800643c:	e7fe      	b.n	800643c <ADC1_2_IRQHandler>
	...

08006440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <HAL_Init+0x28>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a07      	ldr	r2, [pc, #28]	; (8006468 <HAL_Init+0x28>)
 800644a:	f043 0310 	orr.w	r3, r3, #16
 800644e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006450:	2003      	movs	r0, #3
 8006452:	f000 f947 	bl	80066e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006456:	2000      	movs	r0, #0
 8006458:	f000 f808 	bl	800646c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800645c:	f7ff fe2c 	bl	80060b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40022000 	.word	0x40022000

0800646c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006474:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <HAL_InitTick+0x54>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_InitTick+0x58>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006482:	fbb3 f3f1 	udiv	r3, r3, r1
 8006486:	fbb2 f3f3 	udiv	r3, r2, r3
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f95f 	bl	800674e <HAL_SYSTICK_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e00e      	b.n	80064b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b0f      	cmp	r3, #15
 800649e:	d80a      	bhi.n	80064b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064a0:	2200      	movs	r2, #0
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064a8:	f000 f927 	bl	80066fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064ac:	4a06      	ldr	r2, [pc, #24]	; (80064c8 <HAL_InitTick+0x5c>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000004 	.word	0x20000004
 80064c4:	2000000c 	.word	0x2000000c
 80064c8:	20000008 	.word	0x20000008

080064cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_IncTick+0x1c>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <HAL_IncTick+0x20>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4413      	add	r3, r2
 80064dc:	4a03      	ldr	r2, [pc, #12]	; (80064ec <HAL_IncTick+0x20>)
 80064de:	6013      	str	r3, [r2, #0]
}
 80064e0:	bf00      	nop
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	2000000c 	.word	0x2000000c
 80064ec:	2000008c 	.word	0x2000008c

080064f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  return uwTick;
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <HAL_GetTick+0x10>)
 80064f6:	681b      	ldr	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr
 8006500:	2000008c 	.word	0x2000008c

08006504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800650c:	f7ff fff0 	bl	80064f0 <HAL_GetTick>
 8006510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800651c:	d005      	beq.n	800652a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <HAL_Delay+0x44>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800652a:	bf00      	nop
 800652c:	f7ff ffe0 	bl	80064f0 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	429a      	cmp	r2, r3
 800653a:	d8f7      	bhi.n	800652c <HAL_Delay+0x28>
  {
  }
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	2000000c 	.word	0x2000000c

0800654c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800655c:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <__NVIC_SetPriorityGrouping+0x44>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006568:	4013      	ands	r3, r2
 800656a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800657e:	4a04      	ldr	r2, [pc, #16]	; (8006590 <__NVIC_SetPriorityGrouping+0x44>)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	60d3      	str	r3, [r2, #12]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	bc80      	pop	{r7}
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	e000ed00 	.word	0xe000ed00

08006594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <__NVIC_GetPriorityGrouping+0x18>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	0a1b      	lsrs	r3, r3, #8
 800659e:	f003 0307 	and.w	r3, r3, #7
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	e000ed00 	.word	0xe000ed00

080065b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	db0b      	blt.n	80065da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	f003 021f 	and.w	r2, r3, #31
 80065c8:	4906      	ldr	r1, [pc, #24]	; (80065e4 <__NVIC_EnableIRQ+0x34>)
 80065ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	2001      	movs	r0, #1
 80065d2:	fa00 f202 	lsl.w	r2, r0, r2
 80065d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr
 80065e4:	e000e100 	.word	0xe000e100

080065e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	6039      	str	r1, [r7, #0]
 80065f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	db0a      	blt.n	8006612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	490c      	ldr	r1, [pc, #48]	; (8006634 <__NVIC_SetPriority+0x4c>)
 8006602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006606:	0112      	lsls	r2, r2, #4
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	440b      	add	r3, r1
 800660c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006610:	e00a      	b.n	8006628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	4908      	ldr	r1, [pc, #32]	; (8006638 <__NVIC_SetPriority+0x50>)
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	3b04      	subs	r3, #4
 8006620:	0112      	lsls	r2, r2, #4
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	440b      	add	r3, r1
 8006626:	761a      	strb	r2, [r3, #24]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	e000e100 	.word	0xe000e100
 8006638:	e000ed00 	.word	0xe000ed00

0800663c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800663c:	b480      	push	{r7}
 800663e:	b089      	sub	sp, #36	; 0x24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f1c3 0307 	rsb	r3, r3, #7
 8006656:	2b04      	cmp	r3, #4
 8006658:	bf28      	it	cs
 800665a:	2304      	movcs	r3, #4
 800665c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3304      	adds	r3, #4
 8006662:	2b06      	cmp	r3, #6
 8006664:	d902      	bls.n	800666c <NVIC_EncodePriority+0x30>
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	3b03      	subs	r3, #3
 800666a:	e000      	b.n	800666e <NVIC_EncodePriority+0x32>
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43da      	mvns	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	401a      	ands	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	43d9      	mvns	r1, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006694:	4313      	orrs	r3, r2
         );
}
 8006696:	4618      	mov	r0, r3
 8006698:	3724      	adds	r7, #36	; 0x24
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr

080066a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066b0:	d301      	bcc.n	80066b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066b2:	2301      	movs	r3, #1
 80066b4:	e00f      	b.n	80066d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066b6:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <SysTick_Config+0x40>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066be:	210f      	movs	r1, #15
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066c4:	f7ff ff90 	bl	80065e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <SysTick_Config+0x40>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066ce:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <SysTick_Config+0x40>)
 80066d0:	2207      	movs	r2, #7
 80066d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000e010 	.word	0xe000e010

080066e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff2d 	bl	800654c <__NVIC_SetPriorityGrouping>
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	4603      	mov	r3, r0
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800670c:	f7ff ff42 	bl	8006594 <__NVIC_GetPriorityGrouping>
 8006710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	6978      	ldr	r0, [r7, #20]
 8006718:	f7ff ff90 	bl	800663c <NVIC_EncodePriority>
 800671c:	4602      	mov	r2, r0
 800671e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ff5f 	bl	80065e8 <__NVIC_SetPriority>
}
 800672a:	bf00      	nop
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	4603      	mov	r3, r0
 800673a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800673c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff ff35 	bl	80065b0 <__NVIC_EnableIRQ>
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff ffa2 	bl	80066a0 <SysTick_Config>
 800675c:	4603      	mov	r3, r0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006768:	b480      	push	{r7}
 800676a:	b08b      	sub	sp, #44	; 0x2c
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006772:	2300      	movs	r3, #0
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006776:	2300      	movs	r3, #0
 8006778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800677a:	e179      	b.n	8006a70 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800677c:	2201      	movs	r2, #1
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	4013      	ands	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	429a      	cmp	r2, r3
 8006796:	f040 8168 	bne.w	8006a6a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4a96      	ldr	r2, [pc, #600]	; (80069f8 <HAL_GPIO_Init+0x290>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d05e      	beq.n	8006862 <HAL_GPIO_Init+0xfa>
 80067a4:	4a94      	ldr	r2, [pc, #592]	; (80069f8 <HAL_GPIO_Init+0x290>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d875      	bhi.n	8006896 <HAL_GPIO_Init+0x12e>
 80067aa:	4a94      	ldr	r2, [pc, #592]	; (80069fc <HAL_GPIO_Init+0x294>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d058      	beq.n	8006862 <HAL_GPIO_Init+0xfa>
 80067b0:	4a92      	ldr	r2, [pc, #584]	; (80069fc <HAL_GPIO_Init+0x294>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d86f      	bhi.n	8006896 <HAL_GPIO_Init+0x12e>
 80067b6:	4a92      	ldr	r2, [pc, #584]	; (8006a00 <HAL_GPIO_Init+0x298>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d052      	beq.n	8006862 <HAL_GPIO_Init+0xfa>
 80067bc:	4a90      	ldr	r2, [pc, #576]	; (8006a00 <HAL_GPIO_Init+0x298>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d869      	bhi.n	8006896 <HAL_GPIO_Init+0x12e>
 80067c2:	4a90      	ldr	r2, [pc, #576]	; (8006a04 <HAL_GPIO_Init+0x29c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d04c      	beq.n	8006862 <HAL_GPIO_Init+0xfa>
 80067c8:	4a8e      	ldr	r2, [pc, #568]	; (8006a04 <HAL_GPIO_Init+0x29c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d863      	bhi.n	8006896 <HAL_GPIO_Init+0x12e>
 80067ce:	4a8e      	ldr	r2, [pc, #568]	; (8006a08 <HAL_GPIO_Init+0x2a0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d046      	beq.n	8006862 <HAL_GPIO_Init+0xfa>
 80067d4:	4a8c      	ldr	r2, [pc, #560]	; (8006a08 <HAL_GPIO_Init+0x2a0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d85d      	bhi.n	8006896 <HAL_GPIO_Init+0x12e>
 80067da:	2b12      	cmp	r3, #18
 80067dc:	d82a      	bhi.n	8006834 <HAL_GPIO_Init+0xcc>
 80067de:	2b12      	cmp	r3, #18
 80067e0:	d859      	bhi.n	8006896 <HAL_GPIO_Init+0x12e>
 80067e2:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <HAL_GPIO_Init+0x80>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	08006863 	.word	0x08006863
 80067ec:	0800683d 	.word	0x0800683d
 80067f0:	0800684f 	.word	0x0800684f
 80067f4:	08006891 	.word	0x08006891
 80067f8:	08006897 	.word	0x08006897
 80067fc:	08006897 	.word	0x08006897
 8006800:	08006897 	.word	0x08006897
 8006804:	08006897 	.word	0x08006897
 8006808:	08006897 	.word	0x08006897
 800680c:	08006897 	.word	0x08006897
 8006810:	08006897 	.word	0x08006897
 8006814:	08006897 	.word	0x08006897
 8006818:	08006897 	.word	0x08006897
 800681c:	08006897 	.word	0x08006897
 8006820:	08006897 	.word	0x08006897
 8006824:	08006897 	.word	0x08006897
 8006828:	08006897 	.word	0x08006897
 800682c:	08006845 	.word	0x08006845
 8006830:	08006859 	.word	0x08006859
 8006834:	4a75      	ldr	r2, [pc, #468]	; (8006a0c <HAL_GPIO_Init+0x2a4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800683a:	e02c      	b.n	8006896 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	623b      	str	r3, [r7, #32]
          break;
 8006842:	e029      	b.n	8006898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	3304      	adds	r3, #4
 800684a:	623b      	str	r3, [r7, #32]
          break;
 800684c:	e024      	b.n	8006898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	3308      	adds	r3, #8
 8006854:	623b      	str	r3, [r7, #32]
          break;
 8006856:	e01f      	b.n	8006898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	330c      	adds	r3, #12
 800685e:	623b      	str	r3, [r7, #32]
          break;
 8006860:	e01a      	b.n	8006898 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800686a:	2304      	movs	r3, #4
 800686c:	623b      	str	r3, [r7, #32]
          break;
 800686e:	e013      	b.n	8006898 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d105      	bne.n	8006884 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006878:	2308      	movs	r3, #8
 800687a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	611a      	str	r2, [r3, #16]
          break;
 8006882:	e009      	b.n	8006898 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006884:	2308      	movs	r3, #8
 8006886:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	615a      	str	r2, [r3, #20]
          break;
 800688e:	e003      	b.n	8006898 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006890:	2300      	movs	r3, #0
 8006892:	623b      	str	r3, [r7, #32]
          break;
 8006894:	e000      	b.n	8006898 <HAL_GPIO_Init+0x130>
          break;
 8006896:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2bff      	cmp	r3, #255	; 0xff
 800689c:	d801      	bhi.n	80068a2 <HAL_GPIO_Init+0x13a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	e001      	b.n	80068a6 <HAL_GPIO_Init+0x13e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3304      	adds	r3, #4
 80068a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2bff      	cmp	r3, #255	; 0xff
 80068ac:	d802      	bhi.n	80068b4 <HAL_GPIO_Init+0x14c>
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	e002      	b.n	80068ba <HAL_GPIO_Init+0x152>
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	3b08      	subs	r3, #8
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	210f      	movs	r1, #15
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	43db      	mvns	r3, r3
 80068ca:	401a      	ands	r2, r3
 80068cc:	6a39      	ldr	r1, [r7, #32]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	431a      	orrs	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80c1 	beq.w	8006a6a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80068e8:	4b49      	ldr	r3, [pc, #292]	; (8006a10 <HAL_GPIO_Init+0x2a8>)
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	4a48      	ldr	r2, [pc, #288]	; (8006a10 <HAL_GPIO_Init+0x2a8>)
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	6193      	str	r3, [r2, #24]
 80068f4:	4b46      	ldr	r3, [pc, #280]	; (8006a10 <HAL_GPIO_Init+0x2a8>)
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006900:	4a44      	ldr	r2, [pc, #272]	; (8006a14 <HAL_GPIO_Init+0x2ac>)
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	089b      	lsrs	r3, r3, #2
 8006906:	3302      	adds	r3, #2
 8006908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	220f      	movs	r2, #15
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3c      	ldr	r2, [pc, #240]	; (8006a18 <HAL_GPIO_Init+0x2b0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d01f      	beq.n	800696c <HAL_GPIO_Init+0x204>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3b      	ldr	r2, [pc, #236]	; (8006a1c <HAL_GPIO_Init+0x2b4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d019      	beq.n	8006968 <HAL_GPIO_Init+0x200>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a3a      	ldr	r2, [pc, #232]	; (8006a20 <HAL_GPIO_Init+0x2b8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <HAL_GPIO_Init+0x1fc>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a39      	ldr	r2, [pc, #228]	; (8006a24 <HAL_GPIO_Init+0x2bc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00d      	beq.n	8006960 <HAL_GPIO_Init+0x1f8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a38      	ldr	r2, [pc, #224]	; (8006a28 <HAL_GPIO_Init+0x2c0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <HAL_GPIO_Init+0x1f4>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a37      	ldr	r2, [pc, #220]	; (8006a2c <HAL_GPIO_Init+0x2c4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d101      	bne.n	8006958 <HAL_GPIO_Init+0x1f0>
 8006954:	2305      	movs	r3, #5
 8006956:	e00a      	b.n	800696e <HAL_GPIO_Init+0x206>
 8006958:	2306      	movs	r3, #6
 800695a:	e008      	b.n	800696e <HAL_GPIO_Init+0x206>
 800695c:	2304      	movs	r3, #4
 800695e:	e006      	b.n	800696e <HAL_GPIO_Init+0x206>
 8006960:	2303      	movs	r3, #3
 8006962:	e004      	b.n	800696e <HAL_GPIO_Init+0x206>
 8006964:	2302      	movs	r3, #2
 8006966:	e002      	b.n	800696e <HAL_GPIO_Init+0x206>
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <HAL_GPIO_Init+0x206>
 800696c:	2300      	movs	r3, #0
 800696e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006970:	f002 0203 	and.w	r2, r2, #3
 8006974:	0092      	lsls	r2, r2, #2
 8006976:	4093      	lsls	r3, r2
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800697e:	4925      	ldr	r1, [pc, #148]	; (8006a14 <HAL_GPIO_Init+0x2ac>)
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	089b      	lsrs	r3, r3, #2
 8006984:	3302      	adds	r3, #2
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d006      	beq.n	80069a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	4924      	ldr	r1, [pc, #144]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	608b      	str	r3, [r1, #8]
 80069a4:	e006      	b.n	80069b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80069a6:	4b22      	ldr	r3, [pc, #136]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	43db      	mvns	r3, r3
 80069ae:	4920      	ldr	r1, [pc, #128]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d006      	beq.n	80069ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80069c0:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	491a      	ldr	r1, [pc, #104]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60cb      	str	r3, [r1, #12]
 80069cc:	e006      	b.n	80069dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80069ce:	4b18      	ldr	r3, [pc, #96]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	4916      	ldr	r1, [pc, #88]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 80069d8:	4013      	ands	r3, r2
 80069da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d025      	beq.n	8006a34 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80069e8:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	4910      	ldr	r1, [pc, #64]	; (8006a30 <HAL_GPIO_Init+0x2c8>)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	604b      	str	r3, [r1, #4]
 80069f4:	e025      	b.n	8006a42 <HAL_GPIO_Init+0x2da>
 80069f6:	bf00      	nop
 80069f8:	10320000 	.word	0x10320000
 80069fc:	10310000 	.word	0x10310000
 8006a00:	10220000 	.word	0x10220000
 8006a04:	10210000 	.word	0x10210000
 8006a08:	10120000 	.word	0x10120000
 8006a0c:	10110000 	.word	0x10110000
 8006a10:	40021000 	.word	0x40021000
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40010800 	.word	0x40010800
 8006a1c:	40010c00 	.word	0x40010c00
 8006a20:	40011000 	.word	0x40011000
 8006a24:	40011400 	.word	0x40011400
 8006a28:	40011800 	.word	0x40011800
 8006a2c:	40011c00 	.word	0x40011c00
 8006a30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006a34:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <HAL_GPIO_Init+0x324>)
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	4913      	ldr	r1, [pc, #76]	; (8006a8c <HAL_GPIO_Init+0x324>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d006      	beq.n	8006a5c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006a4e:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <HAL_GPIO_Init+0x324>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	490e      	ldr	r1, [pc, #56]	; (8006a8c <HAL_GPIO_Init+0x324>)
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	600b      	str	r3, [r1, #0]
 8006a5a:	e006      	b.n	8006a6a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <HAL_GPIO_Init+0x324>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	43db      	mvns	r3, r3
 8006a64:	4909      	ldr	r1, [pc, #36]	; (8006a8c <HAL_GPIO_Init+0x324>)
 8006a66:	4013      	ands	r3, r2
 8006a68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f47f ae7e 	bne.w	800677c <HAL_GPIO_Init+0x14>
  }
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	372c      	adds	r7, #44	; 0x2c
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	40010400 	.word	0x40010400

08006a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	887b      	ldrh	r3, [r7, #2]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
 8006aac:	e001      	b.n	8006ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr
	...

08006ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006aca:	4b08      	ldr	r3, [pc, #32]	; (8006aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d006      	beq.n	8006ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ad6:	4a05      	ldr	r2, [pc, #20]	; (8006aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fbf6 	bl	80062d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40010400 	.word	0x40010400

08006af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e272      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 8087 	beq.w	8006c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b10:	4b92      	ldr	r3, [pc, #584]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 030c 	and.w	r3, r3, #12
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d00c      	beq.n	8006b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b1c:	4b8f      	ldr	r3, [pc, #572]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 030c 	and.w	r3, r3, #12
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d112      	bne.n	8006b4e <HAL_RCC_OscConfig+0x5e>
 8006b28:	4b8c      	ldr	r3, [pc, #560]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d10b      	bne.n	8006b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b36:	4b89      	ldr	r3, [pc, #548]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d06c      	beq.n	8006c1c <HAL_RCC_OscConfig+0x12c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d168      	bne.n	8006c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e24c      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b56:	d106      	bne.n	8006b66 <HAL_RCC_OscConfig+0x76>
 8006b58:	4b80      	ldr	r3, [pc, #512]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a7f      	ldr	r2, [pc, #508]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	e02e      	b.n	8006bc4 <HAL_RCC_OscConfig+0xd4>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10c      	bne.n	8006b88 <HAL_RCC_OscConfig+0x98>
 8006b6e:	4b7b      	ldr	r3, [pc, #492]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a7a      	ldr	r2, [pc, #488]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	4b78      	ldr	r3, [pc, #480]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a77      	ldr	r2, [pc, #476]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e01d      	b.n	8006bc4 <HAL_RCC_OscConfig+0xd4>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b90:	d10c      	bne.n	8006bac <HAL_RCC_OscConfig+0xbc>
 8006b92:	4b72      	ldr	r3, [pc, #456]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a71      	ldr	r2, [pc, #452]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	4b6f      	ldr	r3, [pc, #444]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a6e      	ldr	r2, [pc, #440]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e00b      	b.n	8006bc4 <HAL_RCC_OscConfig+0xd4>
 8006bac:	4b6b      	ldr	r3, [pc, #428]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6a      	ldr	r2, [pc, #424]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	4b68      	ldr	r3, [pc, #416]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a67      	ldr	r2, [pc, #412]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d013      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bcc:	f7ff fc90 	bl	80064f0 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bd4:	f7ff fc8c 	bl	80064f0 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b64      	cmp	r3, #100	; 0x64
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e200      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be6:	4b5d      	ldr	r3, [pc, #372]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0xe4>
 8006bf2:	e014      	b.n	8006c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf4:	f7ff fc7c 	bl	80064f0 <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bfc:	f7ff fc78 	bl	80064f0 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b64      	cmp	r3, #100	; 0x64
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e1ec      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c0e:	4b53      	ldr	r3, [pc, #332]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1f0      	bne.n	8006bfc <HAL_RCC_OscConfig+0x10c>
 8006c1a:	e000      	b.n	8006c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d063      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c2a:	4b4c      	ldr	r3, [pc, #304]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c36:	4b49      	ldr	r3, [pc, #292]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f003 030c 	and.w	r3, r3, #12
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d11c      	bne.n	8006c7c <HAL_RCC_OscConfig+0x18c>
 8006c42:	4b46      	ldr	r3, [pc, #280]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d116      	bne.n	8006c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c4e:	4b43      	ldr	r3, [pc, #268]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_RCC_OscConfig+0x176>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d001      	beq.n	8006c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e1c0      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c66:	4b3d      	ldr	r3, [pc, #244]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4939      	ldr	r1, [pc, #228]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c7a:	e03a      	b.n	8006cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d020      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c84:	4b36      	ldr	r3, [pc, #216]	; (8006d60 <HAL_RCC_OscConfig+0x270>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8a:	f7ff fc31 	bl	80064f0 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c92:	f7ff fc2d 	bl	80064f0 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e1a1      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca4:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0f0      	beq.n	8006c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb0:	4b2a      	ldr	r3, [pc, #168]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	4927      	ldr	r1, [pc, #156]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]
 8006cc4:	e015      	b.n	8006cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cc6:	4b26      	ldr	r3, [pc, #152]	; (8006d60 <HAL_RCC_OscConfig+0x270>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ccc:	f7ff fc10 	bl	80064f0 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cd4:	f7ff fc0c 	bl	80064f0 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e180      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ce6:	4b1d      	ldr	r3, [pc, #116]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d03a      	beq.n	8006d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d019      	beq.n	8006d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d06:	4b17      	ldr	r3, [pc, #92]	; (8006d64 <HAL_RCC_OscConfig+0x274>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d0c:	f7ff fbf0 	bl	80064f0 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d14:	f7ff fbec 	bl	80064f0 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e160      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <HAL_RCC_OscConfig+0x26c>)
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d32:	2001      	movs	r0, #1
 8006d34:	f000 fa9c 	bl	8007270 <RCC_Delay>
 8006d38:	e01c      	b.n	8006d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <HAL_RCC_OscConfig+0x274>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d40:	f7ff fbd6 	bl	80064f0 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d46:	e00f      	b.n	8006d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d48:	f7ff fbd2 	bl	80064f0 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d908      	bls.n	8006d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e146      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
 8006d5a:	bf00      	nop
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	42420000 	.word	0x42420000
 8006d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d68:	4b92      	ldr	r3, [pc, #584]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e9      	bne.n	8006d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80a6 	beq.w	8006ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d86:	4b8b      	ldr	r3, [pc, #556]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10d      	bne.n	8006dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d92:	4b88      	ldr	r3, [pc, #544]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	4a87      	ldr	r2, [pc, #540]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	61d3      	str	r3, [r2, #28]
 8006d9e:	4b85      	ldr	r3, [pc, #532]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006daa:	2301      	movs	r3, #1
 8006dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dae:	4b82      	ldr	r3, [pc, #520]	; (8006fb8 <HAL_RCC_OscConfig+0x4c8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d118      	bne.n	8006dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dba:	4b7f      	ldr	r3, [pc, #508]	; (8006fb8 <HAL_RCC_OscConfig+0x4c8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a7e      	ldr	r2, [pc, #504]	; (8006fb8 <HAL_RCC_OscConfig+0x4c8>)
 8006dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dc6:	f7ff fb93 	bl	80064f0 <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dcc:	e008      	b.n	8006de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dce:	f7ff fb8f 	bl	80064f0 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b64      	cmp	r3, #100	; 0x64
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e103      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de0:	4b75      	ldr	r3, [pc, #468]	; (8006fb8 <HAL_RCC_OscConfig+0x4c8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d106      	bne.n	8006e02 <HAL_RCC_OscConfig+0x312>
 8006df4:	4b6f      	ldr	r3, [pc, #444]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	4a6e      	ldr	r2, [pc, #440]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	6213      	str	r3, [r2, #32]
 8006e00:	e02d      	b.n	8006e5e <HAL_RCC_OscConfig+0x36e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCC_OscConfig+0x334>
 8006e0a:	4b6a      	ldr	r3, [pc, #424]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	4a69      	ldr	r2, [pc, #420]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	6213      	str	r3, [r2, #32]
 8006e16:	4b67      	ldr	r3, [pc, #412]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	4a66      	ldr	r2, [pc, #408]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e1c:	f023 0304 	bic.w	r3, r3, #4
 8006e20:	6213      	str	r3, [r2, #32]
 8006e22:	e01c      	b.n	8006e5e <HAL_RCC_OscConfig+0x36e>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d10c      	bne.n	8006e46 <HAL_RCC_OscConfig+0x356>
 8006e2c:	4b61      	ldr	r3, [pc, #388]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	4a60      	ldr	r2, [pc, #384]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e32:	f043 0304 	orr.w	r3, r3, #4
 8006e36:	6213      	str	r3, [r2, #32]
 8006e38:	4b5e      	ldr	r3, [pc, #376]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	4a5d      	ldr	r2, [pc, #372]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e3e:	f043 0301 	orr.w	r3, r3, #1
 8006e42:	6213      	str	r3, [r2, #32]
 8006e44:	e00b      	b.n	8006e5e <HAL_RCC_OscConfig+0x36e>
 8006e46:	4b5b      	ldr	r3, [pc, #364]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	4a5a      	ldr	r2, [pc, #360]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	6213      	str	r3, [r2, #32]
 8006e52:	4b58      	ldr	r3, [pc, #352]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	4a57      	ldr	r2, [pc, #348]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e58:	f023 0304 	bic.w	r3, r3, #4
 8006e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d015      	beq.n	8006e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e66:	f7ff fb43 	bl	80064f0 <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6c:	e00a      	b.n	8006e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6e:	f7ff fb3f 	bl	80064f0 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e0b1      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e84:	4b4b      	ldr	r3, [pc, #300]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0ee      	beq.n	8006e6e <HAL_RCC_OscConfig+0x37e>
 8006e90:	e014      	b.n	8006ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e92:	f7ff fb2d 	bl	80064f0 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e98:	e00a      	b.n	8006eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e9a:	f7ff fb29 	bl	80064f0 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e09b      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eb0:	4b40      	ldr	r3, [pc, #256]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1ee      	bne.n	8006e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d105      	bne.n	8006ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec2:	4b3c      	ldr	r3, [pc, #240]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	4a3b      	ldr	r2, [pc, #236]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 8087 	beq.w	8006fe6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ed8:	4b36      	ldr	r3, [pc, #216]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d061      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d146      	bne.n	8006f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eec:	4b33      	ldr	r3, [pc, #204]	; (8006fbc <HAL_RCC_OscConfig+0x4cc>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef2:	f7ff fafd 	bl	80064f0 <HAL_GetTick>
 8006ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006efa:	f7ff faf9 	bl	80064f0 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e06d      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f0c:	4b29      	ldr	r3, [pc, #164]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f0      	bne.n	8006efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f20:	d108      	bne.n	8006f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f22:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	4921      	ldr	r1, [pc, #132]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f34:	4b1f      	ldr	r3, [pc, #124]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a19      	ldr	r1, [r3, #32]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	430b      	orrs	r3, r1
 8006f46:	491b      	ldr	r1, [pc, #108]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f4c:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <HAL_RCC_OscConfig+0x4cc>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f52:	f7ff facd 	bl	80064f0 <HAL_GetTick>
 8006f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f58:	e008      	b.n	8006f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f5a:	f7ff fac9 	bl	80064f0 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e03d      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f6c:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0f0      	beq.n	8006f5a <HAL_RCC_OscConfig+0x46a>
 8006f78:	e035      	b.n	8006fe6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7a:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <HAL_RCC_OscConfig+0x4cc>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f80:	f7ff fab6 	bl	80064f0 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f88:	f7ff fab2 	bl	80064f0 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e026      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <HAL_RCC_OscConfig+0x4c4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f0      	bne.n	8006f88 <HAL_RCC_OscConfig+0x498>
 8006fa6:	e01e      	b.n	8006fe6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d107      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e019      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	40007000 	.word	0x40007000
 8006fbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <HAL_RCC_OscConfig+0x500>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d106      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d001      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40021000 	.word	0x40021000

08006ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0d0      	b.n	80071aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007008:	4b6a      	ldr	r3, [pc, #424]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d910      	bls.n	8007038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007016:	4b67      	ldr	r3, [pc, #412]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 0207 	bic.w	r2, r3, #7
 800701e:	4965      	ldr	r1, [pc, #404]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	4313      	orrs	r3, r2
 8007024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007026:	4b63      	ldr	r3, [pc, #396]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d001      	beq.n	8007038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e0b8      	b.n	80071aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d020      	beq.n	8007086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007050:	4b59      	ldr	r3, [pc, #356]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4a58      	ldr	r2, [pc, #352]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800705a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007068:	4b53      	ldr	r3, [pc, #332]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a52      	ldr	r2, [pc, #328]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 800706e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007074:	4b50      	ldr	r3, [pc, #320]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	494d      	ldr	r1, [pc, #308]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007082:	4313      	orrs	r3, r2
 8007084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d040      	beq.n	8007114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d107      	bne.n	80070aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800709a:	4b47      	ldr	r3, [pc, #284]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d115      	bne.n	80070d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e07f      	b.n	80071aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d107      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070b2:	4b41      	ldr	r3, [pc, #260]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e073      	b.n	80071aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c2:	4b3d      	ldr	r3, [pc, #244]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e06b      	b.n	80071aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070d2:	4b39      	ldr	r3, [pc, #228]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f023 0203 	bic.w	r2, r3, #3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	4936      	ldr	r1, [pc, #216]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070e4:	f7ff fa04 	bl	80064f0 <HAL_GetTick>
 80070e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ea:	e00a      	b.n	8007102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ec:	f7ff fa00 	bl	80064f0 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e053      	b.n	80071aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007102:	4b2d      	ldr	r3, [pc, #180]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f003 020c 	and.w	r2, r3, #12
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	429a      	cmp	r2, r3
 8007112:	d1eb      	bne.n	80070ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007114:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d210      	bcs.n	8007144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007122:	4b24      	ldr	r3, [pc, #144]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f023 0207 	bic.w	r2, r3, #7
 800712a:	4922      	ldr	r1, [pc, #136]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	4313      	orrs	r3, r2
 8007130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007132:	4b20      	ldr	r3, [pc, #128]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d001      	beq.n	8007144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e032      	b.n	80071aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007150:	4b19      	ldr	r3, [pc, #100]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	4916      	ldr	r1, [pc, #88]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 800715e:	4313      	orrs	r3, r2
 8007160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800716e:	4b12      	ldr	r3, [pc, #72]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	490e      	ldr	r1, [pc, #56]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 800717e:	4313      	orrs	r3, r2
 8007180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007182:	f000 f821 	bl	80071c8 <HAL_RCC_GetSysClockFreq>
 8007186:	4602      	mov	r2, r0
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	091b      	lsrs	r3, r3, #4
 800718e:	f003 030f 	and.w	r3, r3, #15
 8007192:	490a      	ldr	r1, [pc, #40]	; (80071bc <HAL_RCC_ClockConfig+0x1c8>)
 8007194:	5ccb      	ldrb	r3, [r1, r3]
 8007196:	fa22 f303 	lsr.w	r3, r2, r3
 800719a:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <HAL_RCC_ClockConfig+0x1cc>)
 800719c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <HAL_RCC_ClockConfig+0x1d0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff f962 	bl	800646c <HAL_InitTick>

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	40022000 	.word	0x40022000
 80071b8:	40021000 	.word	0x40021000
 80071bc:	08009364 	.word	0x08009364
 80071c0:	20000004 	.word	0x20000004
 80071c4:	20000008 	.word	0x20000008

080071c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	2300      	movs	r3, #0
 80071dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80071e2:	4b1e      	ldr	r3, [pc, #120]	; (800725c <HAL_RCC_GetSysClockFreq+0x94>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d002      	beq.n	80071f8 <HAL_RCC_GetSysClockFreq+0x30>
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d003      	beq.n	80071fe <HAL_RCC_GetSysClockFreq+0x36>
 80071f6:	e027      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071f8:	4b19      	ldr	r3, [pc, #100]	; (8007260 <HAL_RCC_GetSysClockFreq+0x98>)
 80071fa:	613b      	str	r3, [r7, #16]
      break;
 80071fc:	e027      	b.n	800724e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	0c9b      	lsrs	r3, r3, #18
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	4a17      	ldr	r2, [pc, #92]	; (8007264 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007208:	5cd3      	ldrb	r3, [r2, r3]
 800720a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d010      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007216:	4b11      	ldr	r3, [pc, #68]	; (800725c <HAL_RCC_GetSysClockFreq+0x94>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	0c5b      	lsrs	r3, r3, #17
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	4a11      	ldr	r2, [pc, #68]	; (8007268 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007222:	5cd3      	ldrb	r3, [r2, r3]
 8007224:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a0d      	ldr	r2, [pc, #52]	; (8007260 <HAL_RCC_GetSysClockFreq+0x98>)
 800722a:	fb03 f202 	mul.w	r2, r3, r2
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	fbb2 f3f3 	udiv	r3, r2, r3
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	e004      	b.n	8007242 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a0c      	ldr	r2, [pc, #48]	; (800726c <HAL_RCC_GetSysClockFreq+0xa4>)
 800723c:	fb02 f303 	mul.w	r3, r2, r3
 8007240:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	613b      	str	r3, [r7, #16]
      break;
 8007246:	e002      	b.n	800724e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <HAL_RCC_GetSysClockFreq+0x98>)
 800724a:	613b      	str	r3, [r7, #16]
      break;
 800724c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800724e:	693b      	ldr	r3, [r7, #16]
}
 8007250:	4618      	mov	r0, r3
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40021000 	.word	0x40021000
 8007260:	007a1200 	.word	0x007a1200
 8007264:	08009374 	.word	0x08009374
 8007268:	08009384 	.word	0x08009384
 800726c:	003d0900 	.word	0x003d0900

08007270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <RCC_Delay+0x34>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a0a      	ldr	r2, [pc, #40]	; (80072a8 <RCC_Delay+0x38>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	0a5b      	lsrs	r3, r3, #9
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	fb02 f303 	mul.w	r3, r2, r3
 800728a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800728c:	bf00      	nop
  }
  while (Delay --);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1e5a      	subs	r2, r3, #1
 8007292:	60fa      	str	r2, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f9      	bne.n	800728c <RCC_Delay+0x1c>
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr
 80072a4:	20000004 	.word	0x20000004
 80072a8:	10624dd3 	.word	0x10624dd3

080072ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e041      	b.n	8007342 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d106      	bne.n	80072d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff f868 	bl	80063a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f000 fa82 	bl	80077f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d001      	beq.n	8007364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e044      	b.n	80073ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1d      	ldr	r2, [pc, #116]	; (80073f8 <HAL_TIM_Base_Start_IT+0xac>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d018      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <HAL_TIM_Base_Start_IT+0xb0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007398:	d00e      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a18      	ldr	r2, [pc, #96]	; (8007400 <HAL_TIM_Base_Start_IT+0xb4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d009      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a16      	ldr	r2, [pc, #88]	; (8007404 <HAL_TIM_Base_Start_IT+0xb8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <HAL_TIM_Base_Start_IT+0xbc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d111      	bne.n	80073dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b06      	cmp	r3, #6
 80073c8:	d010      	beq.n	80073ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0201 	orr.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073da:	e007      	b.n	80073ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr
 80073f8:	40012c00 	.word	0x40012c00
 80073fc:	40013400 	.word	0x40013400
 8007400:	40000400 	.word	0x40000400
 8007404:	40000800 	.word	0x40000800
 8007408:	40000c00 	.word	0x40000c00

0800740c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b02      	cmp	r3, #2
 8007420:	d122      	bne.n	8007468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b02      	cmp	r3, #2
 800742e:	d11b      	bne.n	8007468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0202 	mvn.w	r2, #2
 8007438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f9b4 	bl	80077bc <HAL_TIM_IC_CaptureCallback>
 8007454:	e005      	b.n	8007462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f9a7 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9b6 	bl	80077ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b04      	cmp	r3, #4
 8007474:	d122      	bne.n	80074bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b04      	cmp	r3, #4
 8007482:	d11b      	bne.n	80074bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0204 	mvn.w	r2, #4
 800748c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f98a 	bl	80077bc <HAL_TIM_IC_CaptureCallback>
 80074a8:	e005      	b.n	80074b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f97d 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f98c 	bl	80077ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d122      	bne.n	8007510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d11b      	bne.n	8007510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0208 	mvn.w	r2, #8
 80074e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2204      	movs	r2, #4
 80074e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f960 	bl	80077bc <HAL_TIM_IC_CaptureCallback>
 80074fc:	e005      	b.n	800750a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f953 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f962 	bl	80077ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b10      	cmp	r3, #16
 800751c:	d122      	bne.n	8007564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b10      	cmp	r3, #16
 800752a:	d11b      	bne.n	8007564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0210 	mvn.w	r2, #16
 8007534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2208      	movs	r2, #8
 800753a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f936 	bl	80077bc <HAL_TIM_IC_CaptureCallback>
 8007550:	e005      	b.n	800755e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f929 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f938 	bl	80077ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10e      	bne.n	8007590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b01      	cmp	r3, #1
 800757e:	d107      	bne.n	8007590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0201 	mvn.w	r2, #1
 8007588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fe fe4a 	bl	8006224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b80      	cmp	r3, #128	; 0x80
 800759c:	d10e      	bne.n	80075bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a8:	2b80      	cmp	r3, #128	; 0x80
 80075aa:	d107      	bne.n	80075bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 faa1 	bl	8007afe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d10e      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d107      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8fc 	bl	80077e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d10e      	bne.n	8007614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b20      	cmp	r3, #32
 8007602:	d107      	bne.n	8007614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0220 	mvn.w	r2, #32
 800760c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa6c 	bl	8007aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_TIM_ConfigClockSource+0x1c>
 8007634:	2302      	movs	r3, #2
 8007636:	e0b4      	b.n	80077a2 <HAL_TIM_ConfigClockSource+0x186>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800765e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007670:	d03e      	beq.n	80076f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007676:	f200 8087 	bhi.w	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 800767a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767e:	f000 8086 	beq.w	800778e <HAL_TIM_ConfigClockSource+0x172>
 8007682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007686:	d87f      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b70      	cmp	r3, #112	; 0x70
 800768a:	d01a      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0xa6>
 800768c:	2b70      	cmp	r3, #112	; 0x70
 800768e:	d87b      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007690:	2b60      	cmp	r3, #96	; 0x60
 8007692:	d050      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0x11a>
 8007694:	2b60      	cmp	r3, #96	; 0x60
 8007696:	d877      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007698:	2b50      	cmp	r3, #80	; 0x50
 800769a:	d03c      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0xfa>
 800769c:	2b50      	cmp	r3, #80	; 0x50
 800769e:	d873      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	d058      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x13a>
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	d86f      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076a8:	2b30      	cmp	r3, #48	; 0x30
 80076aa:	d064      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076ac:	2b30      	cmp	r3, #48	; 0x30
 80076ae:	d86b      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d060      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d867      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d05c      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076bc:	2b10      	cmp	r3, #16
 80076be:	d05a      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076c0:	e062      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076d2:	f000 f980 	bl	80079d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	609a      	str	r2, [r3, #8]
      break;
 80076ee:	e04f      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007700:	f000 f969 	bl	80079d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007712:	609a      	str	r2, [r3, #8]
      break;
 8007714:	e03c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007722:	461a      	mov	r2, r3
 8007724:	f000 f8e0 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2150      	movs	r1, #80	; 0x50
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f937 	bl	80079a2 <TIM_ITRx_SetConfig>
      break;
 8007734:	e02c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007742:	461a      	mov	r2, r3
 8007744:	f000 f8fe 	bl	8007944 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2160      	movs	r1, #96	; 0x60
 800774e:	4618      	mov	r0, r3
 8007750:	f000 f927 	bl	80079a2 <TIM_ITRx_SetConfig>
      break;
 8007754:	e01c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007762:	461a      	mov	r2, r3
 8007764:	f000 f8c0 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2140      	movs	r1, #64	; 0x40
 800776e:	4618      	mov	r0, r3
 8007770:	f000 f917 	bl	80079a2 <TIM_ITRx_SetConfig>
      break;
 8007774:	e00c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4619      	mov	r1, r3
 8007780:	4610      	mov	r0, r2
 8007782:	f000 f90e 	bl	80079a2 <TIM_ITRx_SetConfig>
      break;
 8007786:	e003      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
      break;
 800778c:	e000      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800778e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr

080077ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr
	...

080077f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a33      	ldr	r2, [pc, #204]	; (80078d4 <TIM_Base_SetConfig+0xe0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d013      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a32      	ldr	r2, [pc, #200]	; (80078d8 <TIM_Base_SetConfig+0xe4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00f      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781a:	d00b      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a2f      	ldr	r2, [pc, #188]	; (80078dc <TIM_Base_SetConfig+0xe8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d007      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a2e      	ldr	r2, [pc, #184]	; (80078e0 <TIM_Base_SetConfig+0xec>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d003      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a2d      	ldr	r2, [pc, #180]	; (80078e4 <TIM_Base_SetConfig+0xf0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d108      	bne.n	8007846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a22      	ldr	r2, [pc, #136]	; (80078d4 <TIM_Base_SetConfig+0xe0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <TIM_Base_SetConfig+0x82>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <TIM_Base_SetConfig+0xe4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00f      	beq.n	8007876 <TIM_Base_SetConfig+0x82>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785c:	d00b      	beq.n	8007876 <TIM_Base_SetConfig+0x82>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a1e      	ldr	r2, [pc, #120]	; (80078dc <TIM_Base_SetConfig+0xe8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d007      	beq.n	8007876 <TIM_Base_SetConfig+0x82>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <TIM_Base_SetConfig+0xec>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d003      	beq.n	8007876 <TIM_Base_SetConfig+0x82>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a1c      	ldr	r2, [pc, #112]	; (80078e4 <TIM_Base_SetConfig+0xf0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d108      	bne.n	8007888 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <TIM_Base_SetConfig+0xe0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_Base_SetConfig+0xc8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a08      	ldr	r2, [pc, #32]	; (80078d8 <TIM_Base_SetConfig+0xe4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d103      	bne.n	80078c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	615a      	str	r2, [r3, #20]
}
 80078ca:	bf00      	nop
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr
 80078d4:	40012c00 	.word	0x40012c00
 80078d8:	40013400 	.word	0x40013400
 80078dc:	40000400 	.word	0x40000400
 80078e0:	40000800 	.word	0x40000800
 80078e4:	40000c00 	.word	0x40000c00

080078e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0201 	bic.w	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f023 030a 	bic.w	r3, r3, #10
 8007924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr

08007944 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f023 0210 	bic.w	r2, r3, #16
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800796e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	031b      	lsls	r3, r3, #12
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007980:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	621a      	str	r2, [r3, #32]
}
 8007998:	bf00      	nop
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	f043 0307 	orr.w	r3, r3, #7
 80079c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	609a      	str	r2, [r3, #8]
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr

080079d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b087      	sub	sp, #28
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	021a      	lsls	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	609a      	str	r2, [r3, #8]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr

08007a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e050      	b.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a1b      	ldr	r2, [pc, #108]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d018      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a19      	ldr	r2, [pc, #100]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d013      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a82:	d00e      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d009      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a14      	ldr	r2, [pc, #80]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d004      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a12      	ldr	r2, [pc, #72]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d10c      	bne.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bc80      	pop	{r7}
 8007ad6:	4770      	bx	lr
 8007ad8:	40012c00 	.word	0x40012c00
 8007adc:	40013400 	.word	0x40013400
 8007ae0:	40000400 	.word	0x40000400
 8007ae4:	40000800 	.word	0x40000800
 8007ae8:	40000c00 	.word	0x40000c00

08007aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr

08007afe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr

08007b10 <memset>:
 8007b10:	4603      	mov	r3, r0
 8007b12:	4402      	add	r2, r0
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d100      	bne.n	8007b1a <memset+0xa>
 8007b18:	4770      	bx	lr
 8007b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b1e:	e7f9      	b.n	8007b14 <memset+0x4>

08007b20 <__libc_init_array>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	2600      	movs	r6, #0
 8007b24:	4d0c      	ldr	r5, [pc, #48]	; (8007b58 <__libc_init_array+0x38>)
 8007b26:	4c0d      	ldr	r4, [pc, #52]	; (8007b5c <__libc_init_array+0x3c>)
 8007b28:	1b64      	subs	r4, r4, r5
 8007b2a:	10a4      	asrs	r4, r4, #2
 8007b2c:	42a6      	cmp	r6, r4
 8007b2e:	d109      	bne.n	8007b44 <__libc_init_array+0x24>
 8007b30:	f000 f81a 	bl	8007b68 <_init>
 8007b34:	2600      	movs	r6, #0
 8007b36:	4d0a      	ldr	r5, [pc, #40]	; (8007b60 <__libc_init_array+0x40>)
 8007b38:	4c0a      	ldr	r4, [pc, #40]	; (8007b64 <__libc_init_array+0x44>)
 8007b3a:	1b64      	subs	r4, r4, r5
 8007b3c:	10a4      	asrs	r4, r4, #2
 8007b3e:	42a6      	cmp	r6, r4
 8007b40:	d105      	bne.n	8007b4e <__libc_init_array+0x2e>
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b48:	4798      	blx	r3
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7ee      	b.n	8007b2c <__libc_init_array+0xc>
 8007b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b52:	4798      	blx	r3
 8007b54:	3601      	adds	r6, #1
 8007b56:	e7f2      	b.n	8007b3e <__libc_init_array+0x1e>
 8007b58:	08009388 	.word	0x08009388
 8007b5c:	08009388 	.word	0x08009388
 8007b60:	08009388 	.word	0x08009388
 8007b64:	0800938c 	.word	0x0800938c

08007b68 <_init>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr

08007b74 <_fini>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr
